/home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/CarpetReduce
Preparing:
+ set -e
+ cd output-0000-active
+ echo Checking:
Checking:
+ pwd
/home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/CarpetReduce/output-0000-active
+ hostname
fv-az75-809
+ date
Wed Sep 22 21:01:05 UTC 2021
+ echo Environment:
Environment:
+ export CACTUS_NUM_PROCS=1
+ export CACTUS_NUM_THREADS=1
+ export GMON_OUT_PREFIX=gmon.out
+ export OMP_NUM_THREADS=1
+ env
+ sort
+ echo Starting:
Starting:
+ date +%s
+ export CACTUS_STARTTIME=1632344465
+ [ 1 = 1 ]
+ [ 0 -eq 0 ]
+ /home/runner/simulations/TestJob01_temp_2/SIMFACTORY/exe/cactus_sim -L 3 /home/runner/simulations/TestJob01_temp_2/output-0000/arrangements/Carpet/CarpetReduce/test/staggered.par
INFO (Cactus): Increased logging level from 0 to 3
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.9.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 
--------------------------------------------------------------------------------

Cactus version:    4.9.0
Compile date:      Sep 22 2021 (20:38:30)
Run date:          Sep 22 2021 (21:01:06+0000)
Run host:          fv-az75-809.ozjq2hgvjyiebjvorarhoiqszb.bx.internal.cloudapp.net (pid=110032)
Working directory: /home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/CarpetReduce
Executable:        /home/runner/simulations/TestJob01_temp_2/SIMFACTORY/exe/cactus_sim
Parameter file:    /home/runner/simulations/TestJob01_temp_2/output-0000/arrangements/Carpet/CarpetReduce/test/staggered.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->IOUtil Boundary CartGrid3D CoordBase SymBase MoL InitBase Carpet CarpetLib CarpetInterp GSL LoopControl CarpetReduce CarpetSlab CarpetIOASCII CarpetIOBasic<---
Thorn Carpet requests automatic activation of MPI
Thorn Carpet requests automatic activation of Timers
Thorn CarpetLib requests automatic activation of Vectors
Thorn CarpetLib requests automatic activation of CycleClock
Thorn LoopControl requests automatic activation of hwloc
Thorn hwloc requests automatic activation of zlib
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetInterp...Success -> active implementation interp
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetIOBasic...Success -> active implementation IOBasic
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CarpetSlab...Success -> active implementation Hyperslab
Activating thorn CartGrid3D...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn CycleClock...Success -> active implementation CycleClock
Activating thorn GSL...Success -> active implementation GSL
Activating thorn hwloc...Success -> active implementation hwloc
Activating thorn InitBase...Success -> active implementation InitBase
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn MPI...Success -> active implementation MPI
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn Timers...Success -> active implementation Timers
Activating thorn Vectors...Success -> active implementation Vectors
Activating thorn zlib...Success -> active implementation zlib
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CycleClock::CycleClock_Setup: Set up CycleClock
      LoopControl::LC_setup: Set up LoopControl
      Timers::Timer_Startup: Prepare hierarchical timers
      CarpetInterp::CarpetInterpStartup: Startup routine
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      Carpet::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      MoL::MoL_Startup: Startup banner
      SymBase::SymBase_Startup: Register GH Extension for SymBase
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      Vectors::Vectors_Startup: Print startup message
      GROUP hwloc_startup: hwloc startup group
        hwloc::hwloc_version: Output hwloc version

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      GROUP MoL_Register: The group where physics thorns register variables with MoL
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::CartGrid3D_RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      MoL::MoL_ParamCheck: Basic parameter checking
      Vectors::Vectors_Test: Run correctness tests.

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_BASEGRID]
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
      [CCTK_INITIAL]
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        MoL::MoL_StartLoop: [level] Initialise the step size control
      [CCTK_POSTINITIAL]
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      LoopControl::LC_steer: [meta] Update LoopControl algorithm preferences
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
            MoL::MoL_AllocateScratchSpace: [level] Allocate storage for scratch levels
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
          MoL::MoL_AllocateScratch: Allocate sufficient space for array scratch variables
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
              GROUP MoL_PostRHS: Modify RHS functions
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient ICN method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
          MoL::MoL_FreeScratchSpace: [level] Free storage for scratch levels
      end while
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    [CCTK_POSTSTEP]
    if (checkpoint)
      [CCTK_CHECKPOINT]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
    endif
    Output grid variables
    enddo

  Termination routines
    [CCTK_TERMINATE]
      LoopControl::LC_statistics_terminate: [meta] Output LoopControl statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays

  Shutdown routines
    [CCTK_SHUTDOWN]
      Timers::Timer_Shutdown: Prepare hierarchical timers

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   process 0: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
INFO (CarpetLib): Process startup time was 1.54 seconds
Current core file size limit: hard=[unlimited], soft=0 MB
Current addres space size limit: hard=[unlimited], soft=[unlimited]
Current data segment size limit: hard=[unlimited], soft=[unlimited]
Current resident set size limit: hard=[unlimited], soft=[unlimited]
INFO (CycleClock): Measuring CycleClock tick via OpenMP...
INFO (CycleClock): Calibrated CycleClock: 0.435787 ns per clock tick (2.2947 GHz)
INFO (Vectors): Using vector size 2 for architecture SSE2 (64-bit precision)
INFO (hwloc): library version 2.1.0, API version 0x20100
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 1 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 1 threads, this is thread 0
INFO (Carpet): There are 1 threads in total
INFO (Carpet): There are 1 threads per process
INFO (Carpet): This process runs on host fv-az75-809, pid=110032
INFO (Carpet): This process runs on 2 cores: 0-1
INFO (Carpet): Thread 0 runs on 2 cores: 0-1
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): Boundary specification for map 0:
   nboundaryzones: [[0,3,2],[0,3,2]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[1,0,1],[1,0,1]]
   shiftout      : [[0,1,0],[0,1,0]]
INFO (Carpet): CoordBase domain specification for map 0:
   physical extent: [-1,-1,0] : [1,1,1]   ([2,2,1])
   interior extent: [0,-1,0.125] : [0,1,0.875]   ([0,2,0.75])
   exterior extent: [0,-2.5,-0.375] : [0,2.5,1.375]   ([0,5,1.75])
   base_spacing   : [2,0.5,0.25]
INFO (Carpet): Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-1,-1,0] : [1,1,1]   ([2,2,1])
   interior extent   : [0,-1,0.125] : [0,1,0.875]   ([0,2,0.75])
   exterior extent   : [0,-2.5,-0.375] : [0,2.5,1.375]   ([0,5,1.75])
   spacing           : [2,0.5,0.25]
INFO (Carpet): Base grid specification for map 0:
   number of grid points             : [1,11,8]
   number of coarse grid ghost points: [[3,3,3],[3,3,3]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 207 grid functions in 10 groups
INFO (Carpet):    There are 60 grid scalars in 13 groups
INFO (Carpet):    There are 11 1-dimensional grid arrays in 4 groups
INFO (Carpet):    There are 1 2-dimensional grid arrays in 1 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 0 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 0D AMR output requested for:
   CARPETREDUCE::weight
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   CARPETREDUCE::weight
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (MoL): Using Iterative Crank Nicholson with 3 iterations as the time integrator.
INFO (MoL): The maximum number of evolved variables is 83. 0 are registered.
INFO (MoL): The maximum number of slow evolved variables is 83. 0 are registered.
INFO (MoL): The maximum number of constrained variables is 83. 0 are registered.
INFO (MoL): The maximum number of SandR variables is 83. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 83. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 83. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 83. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (Vectors): Testing vectorisation... [errors may result in segfaults]
INFO (Vectors): 375/375 tests passed 
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>2.0000000e+00  dy=>5.0000000e-01  dz=>2.5000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[ 0.000, 0.000]  y=>[-2.500, 2.500]  z=>[-0.375, 1.375]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,0]  y=>[0,10]  z=>[0,7]
INFO (CarpetReduce): Allocating weight function helpers
INFO (CarpetReduce): Initialising weight to 1 on level 0
INFO (CarpetReduce): Setting boundary points in direction 0 face 0 to weight 0 on level 0
INFO (CarpetReduce): Setting boundary points in direction 0 face 1 to weight 0 on level 0
INFO (CarpetReduce): Setting boundary points in direction 1 face 0 to weight 0 on level 0
INFO (CarpetReduce): Setting non-staggered boundary points on level 0 in direction 1 face 0 to bmask 0xcc
INFO (CarpetReduce): Setting boundary points in direction 1 face 1 to weight 0 on level 0
INFO (CarpetReduce): Setting non-staggered boundary points on level 0 in direction 1 face 1 to bmask 0x33
INFO (CarpetReduce): Setting boundary points in direction 2 face 0 to weight 0 on level 0
INFO (CarpetReduce): Setting boundary points in direction 2 face 1 to weight 0 on level 0
INFO (CarpetReduce): Setting boundary [-1,-1,-1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x7f
INFO (CarpetReduce): Setting boundary [-1,-1,-1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x7f
INFO (CarpetReduce): Setting boundary [0,-1,-1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x3f
INFO (CarpetReduce): Setting boundary [0,-1,-1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x3f
INFO (CarpetReduce): Setting boundary [1,-1,-1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xbf
INFO (CarpetReduce): Setting boundary [1,-1,-1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xbf
INFO (CarpetReduce): Setting boundary [-1,0,-1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x5f
INFO (CarpetReduce): Setting boundary [-1,0,-1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x5f
INFO (CarpetReduce): Setting boundary [0,0,-1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xf
INFO (CarpetReduce): Setting boundary [0,0,-1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xf
INFO (CarpetReduce): Setting boundary [1,0,-1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xaf
INFO (CarpetReduce): Setting boundary [1,0,-1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xaf
INFO (CarpetReduce): Setting boundary [-1,1,-1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xdf
INFO (CarpetReduce): Setting boundary [-1,1,-1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xdf
INFO (CarpetReduce): Setting boundary [0,1,-1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xcf
INFO (CarpetReduce): Setting boundary [0,1,-1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xcf
INFO (CarpetReduce): Setting boundary [1,1,-1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xef
INFO (CarpetReduce): Setting boundary [1,1,-1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xef
INFO (CarpetReduce): Setting boundary [-1,-1,0]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x77
INFO (CarpetReduce): Setting boundary [-1,-1,0]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x77
INFO (CarpetReduce): Setting boundary [0,-1,0]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x33
INFO (CarpetReduce): Setting boundary [0,-1,0]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x33
INFO (CarpetReduce): Setting boundary [1,-1,0]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xbb
INFO (CarpetReduce): Setting boundary [1,-1,0]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xbb
INFO (CarpetReduce): Setting boundary [-1,0,0]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x55
INFO (CarpetReduce): Setting boundary [-1,0,0]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x55
INFO (CarpetReduce): Setting boundary [0,0,0]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x0
INFO (CarpetReduce): Setting boundary [0,0,0]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0x0
INFO (CarpetReduce): Setting boundary [1,0,0]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xaa
INFO (CarpetReduce): Setting boundary [1,0,0]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xaa
INFO (CarpetReduce): Setting boundary [-1,1,0]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xdd
INFO (CarpetReduce): Setting boundary [-1,1,0]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xdd
INFO (CarpetReduce): Setting boundary [0,1,0]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xcc
INFO (CarpetReduce): Setting boundary [0,1,0]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xcc
INFO (CarpetReduce): Setting boundary [1,1,0]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xee
INFO (CarpetReduce): Setting boundary [1,1,0]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xee
INFO (CarpetReduce): Setting boundary [-1,-1,1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xf7
INFO (CarpetReduce): Setting boundary [-1,-1,1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xf7
INFO (CarpetReduce): Setting boundary [0,-1,1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xf3
INFO (CarpetReduce): Setting boundary [0,-1,1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xf3
INFO (CarpetReduce): Setting boundary [1,-1,1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xfb
INFO (CarpetReduce): Setting boundary [1,-1,1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xfb
INFO (CarpetReduce): Setting boundary [-1,0,1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xf5
INFO (CarpetReduce): Setting boundary [-1,0,1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xf5
INFO (CarpetReduce): Setting boundary [0,0,1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xf0
INFO (CarpetReduce): Setting boundary [0,0,1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xf0
INFO (CarpetReduce): Setting boundary [1,0,1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xfa
INFO (CarpetReduce): Setting boundary [1,0,1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xfa
INFO (CarpetReduce): Setting boundary [-1,1,1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xfd
INFO (CarpetReduce): Setting boundary [-1,1,1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xfd
INFO (CarpetReduce): Setting boundary [0,1,1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xfc
INFO (CarpetReduce): Setting boundary [0,1,1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xfc
INFO (CarpetReduce): Setting boundary [1,1,1]: level 0 prolongation region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xfe
INFO (CarpetReduce): Setting boundary [1,1,1]: level 0 restriction region bboxset<CCTK_INT4,3>(set<bbox>:{},stride:[1,1,1],offset:[0,0,0]) to bmask 0xfe
INFO (CarpetReduce): Finalise the weight on level 0
INFO (CarpetReduce): Testing weight
INFO (CarpetReduce): Reduction weight sum: 16
INFO (CarpetReduce): Volume of map #0: 16
INFO (CarpetReduce): Simulation domain volume:  16
INFO (CarpetReduce): Additional excised volume: 0
-------------------
Iteration      Time
                   
-------------------
        0     0.000
        1     1.000
        2     2.000
--------------------------------------------------------------------------------
Done.
+ echo Stopping:
Stopping:
+ date
Wed Sep 22 21:01:06 UTC 2021
+ echo Done.
Done.
  Elapsed time: 1.0 s
