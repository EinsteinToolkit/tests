/home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/DNSdata
Preparing:
+ set -e
+ cd output-0000-active
+ echo Checking:
Checking:
+ pwd
/home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/DNSdata/output-0000-active
+ hostname
fv-az1241-539
+ date
Thu Oct 19 15:48:44 UTC 2023
+ echo Environment:
Environment:
+ export CACTUS_NUM_PROCS=2
+ CACTUS_NUM_PROCS=2
+ export CACTUS_NUM_THREADS=1
+ CACTUS_NUM_THREADS=1
+ export GMON_OUT_PREFIX=gmon.out
+ GMON_OUT_PREFIX=gmon.out
+ export OMP_NUM_THREADS=1
+ OMP_NUM_THREADS=1
+ env
+ sort
+ echo Starting:
Starting:
++ date +%s
+ export CACTUS_STARTTIME=1697730524
+ CACTUS_STARTTIME=1697730524
+ '[' 2 = 1 ']'
+ mpirun -np 2 /home/runner/simulations/TestJob01_temp_2/SIMFACTORY/exe/cactus_sim -L 3 /home/runner/simulations/TestJob01_temp_2/output-0000/arrangements/CactusSgrid/DNSdata/test/CactusSgrid_test.par
INFO (Cactus): Increased logging level from 0 to 3
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.14.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 
--------------------------------------------------------------------------------

Cactus version:    4.14.0
Compile date:      Oct 19 2023 (15:25:01)
Run date:          Oct 19 2023 (15:48:44+0000)
Run host:          fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net (pid=136310)
Working directory: /home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/DNSdata
Executable:        /home/runner/simulations/TestJob01_temp_2/SIMFACTORY/exe/cactus_sim
Parameter file:    /home/runner/simulations/TestJob01_temp_2/output-0000/arrangements/CactusSgrid/DNSdata/test/CactusSgrid_test.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->Boundary CartGrid3D CoordBase Fortran InitBase IOUtil LocalReduce SymBase Time AEILocalInterp MoL Slab SpaceMask SphericalSurface Carpet CarpetInterp CarpetInterp2 CarpetIOASCII CarpetIOHDF5 CarpetIOScalar CarpetLib CarpetIOBasic CarpetReduce CarpetRegrid2 CarpetSlab CarpetTracker CarpetMask LoopControl Formaline HTTPD Socket NaNChecker TerminationTrigger TimerReport ADMbase ADMcoupling ADMmacros CoordGauge StaticConformal RotatingSymmetry180 ReflectionSymmetry Constants TmunuBase HydroBase QuasiLocalMeasures EOS_Omni GRHydro SummationByParts GenericFD NewRad ML_BSSN ML_BSSN_Helper ML_ADMConstraints Hydro_Analysis Dissipation SystemStatistics SystemTopology DNSdata CoordBase<---
Warning: thorn CoordBase already scheduled for activation
Thorn Carpet requests automatic activation of MPI
Thorn Carpet requests automatic activation of Timers
Thorn CarpetIOHDF5 requests automatic activation of HDF5
Thorn CarpetLib requests automatic activation of Vectors
Thorn CarpetLib requests automatic activation of CycleClock
Thorn Formaline requests automatic activation of pthreads
Thorn GRHydro requests automatic activation of EOS_Polytrope
Thorn LoopControl requests automatic activation of hwloc
Thorn QuasiLocalMeasures requests automatic activation of LAPACK
Thorn QuasiLocalMeasures requests automatic activation of TGRtensor
Thorn EOS_Polytrope requests automatic activation of EOS_Base
Thorn HDF5 requests automatic activation of zlib
Thorn LAPACK requests automatic activation of BLAS
Activating thorn ADMbase...Success -> active implementation ADMBase
Activating thorn ADMcoupling...Success -> active implementation ADMCoupling
Activating thorn ADMmacros...Success -> active implementation ADMMacros
Activating thorn AEILocalInterp...Success -> active implementation AEILocalInterp
Activating thorn BLAS...Success -> active implementation BLAS
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetInterp...Success -> active implementation interp
Activating thorn CarpetInterp2...Success -> active implementation interp2
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetIOBasic...Success -> active implementation IOBasic
Activating thorn CarpetIOHDF5...Success -> active implementation IOHDF5
Activating thorn CarpetIOScalar...Success -> active implementation IOScalar
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetMask...Success -> active implementation CarpetMask
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CarpetRegrid2...Success -> active implementation CarpetRegrid2
Activating thorn CarpetSlab...Success -> active implementation Hyperslab
Activating thorn CarpetTracker...Success -> active implementation CarpetTracker
Activating thorn CartGrid3D...Success -> active implementation grid
Activating thorn Constants...Success -> active implementation Constants
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn CoordGauge...Success -> active implementation CoordGauge
Activating thorn CycleClock...Success -> active implementation CycleClock
Activating thorn Dissipation...Success -> active implementation Dissipation
Activating thorn DNSdata...Success -> active implementation DNSdata
Activating thorn EOS_Base...Success -> active implementation EOS_Base
Activating thorn EOS_Omni...Success -> active implementation EOS_Omni
Activating thorn EOS_Polytrope...Success -> active implementation EOS_2d_Polytrope
Activating thorn Formaline...Success -> active implementation Formaline
Activating thorn Fortran...Success -> active implementation Fortran
Activating thorn GenericFD...Success -> active implementation GenericFD
Activating thorn GRHydro...Success -> active implementation GRHydro
Activating thorn HDF5...Success -> active implementation HDF5
Activating thorn HTTPD...Success -> active implementation HTTPD
Activating thorn hwloc...Success -> active implementation hwloc
Activating thorn Hydro_Analysis...Success -> active implementation Hydro_Analysis
Activating thorn HydroBase...Success -> active implementation HydroBase
Activating thorn InitBase...Success -> active implementation InitBase
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LAPACK...Success -> active implementation LAPACK
Activating thorn LocalReduce...Success -> active implementation LocalReduce
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn ML_ADMConstraints...Success -> active implementation ML_ADMConstraints
Activating thorn ML_BSSN...Success -> active implementation ML_BSSN
Activating thorn ML_BSSN_Helper...Success -> active implementation ML_BSSN_Helper
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn MPI...Success -> active implementation MPI
Activating thorn NaNChecker...Success -> active implementation NaNChecker
Activating thorn NewRad...Success -> active implementation NewRad
Activating thorn pthreads...Success -> active implementation PTHREADS
Activating thorn QuasiLocalMeasures...Success -> active implementation QuasiLocalMeasures
Activating thorn ReflectionSymmetry...Success -> active implementation ReflectionSymmetry
Activating thorn RotatingSymmetry180...Success -> active implementation RotatingSymmetry180
Activating thorn Slab...Success -> active implementation Slab
Activating thorn Socket...Success -> active implementation Socket
Activating thorn SpaceMask...Success -> active implementation SpaceMask
Activating thorn SphericalSurface...Success -> active implementation SphericalSurface
Activating thorn StaticConformal...Success -> active implementation StaticConformal
Activating thorn SummationByParts...Success -> active implementation SummationByParts
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn SystemStatistics...Success -> active implementation SystemStatistics
Activating thorn SystemTopology...Success -> active implementation SystemTopology
Activating thorn TerminationTrigger...Success -> active implementation TerminationTrigger
Activating thorn TGRtensor...Success -> active implementation TGRtensor
Activating thorn Time...Success -> active implementation time
Activating thorn TimerReport...Success -> active implementation timerreport
Activating thorn Timers...Success -> active implementation Timers
Activating thorn TmunuBase...Success -> active implementation TmunuBase
Activating thorn Vectors...Success -> active implementation Vectors
Activating thorn zlib...Success -> active implementation zlib
INFO (IOUtil): Recovery directory 'CactusSgrid_test' doesn't exist
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CycleClock::CycleClock_Setup: Set up CycleClock
      LoopControl::LC_setup: Set up LoopControl
      ML_BSSN_Helper::ML_BSSN_SetGroupTags: [meta] Set checkpointing and prolongation group tags
      GROUP hwloc_startup: hwloc startup group
        hwloc::hwloc_version: Output hwloc version
      Timers::Timer_Startup: Prepare hierarchical timers
      SystemTopology::ST_system_topology: Output and/or modify system topology and hardware locality
      CarpetInterp::CarpetInterpStartup: Startup routine
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      Carpet::Driver_Startup: Startup routine
      EOS_Omni::EOS_Omni_Startup: [global] Set up conversion factors and other fun stuff
      EOS_Polytrope::EOS_Polytrope_Startup: Setup the polytropic EOS
      Formaline::Formaline_PrintIDs: [meta] Print the build and simulation ids
      GRHydro::GRHydro_Startup: Startup banner
      GRHydro::GRHydro_RegisterMask: Register the hydro masks
      GROUP HTTP_Startup: HTTP daemon startup group
        HTTPD::HTTP_StartServer: [global] Start HTTP server
        GROUP HTTP_SetupPages: Group to setup stuff which needs to be done between starting the server and the first time it serves pages
        HTTPD::HTTP_FirstServ: [global] Serve first pages at startup
      HydroBase::HydroBase_StartUp: Startup banner
      IOUtil::IOUtil_Startup: Startup routine
      LocalReduce::LocalReduce_Startup: Startup routine
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      ML_ADMConstraints::ML_ADMConstraints_Startup: [meta] create banner
      ML_BSSN::ML_BSSN_Startup: [meta] create banner
      ML_BSSN_Helper::ML_BSSN_RegisterSlicing: [meta] Register slicing
      CarpetIOHDF5::CarpetIOHDF5_Startup: Startup routine
      MoL::MoL_Startup: Startup banner
      Slab::Slab_InitMPIDatatypes: Create MPI datatypes for complex variables in C
      SymBase::SymBase_Startup: Register GH Extension for SymBase
      CarpetIOScalar::CarpetIOScalarStartup: [global] Startup routine
      TerminationTrigger::TerminationTrigger_StartSignalHandler: Start signal handler
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      Vectors::Vectors_Startup: Print startup message
      AEILocalInterp::AEILocalInterp_U_Startup: register CCTK_InterpLocalUniform() interpolation operators

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      ADMBase::Einstein_InitSymBound: [global] Set up GF symmetries
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CarpetRegrid2::CarpetRegrid2_Initialise: [global] Initialise locations of refined regions
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      CoordGauge::Einstein_ActivateSlicing: Initialize slicing, setup priorities for mixed slicings
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      Formaline::Formaline_OutputSource: [meta] Output Cactus source tree
      Formaline::Formaline_RegisterWarnings: [meta] Register to receive warnings and info messages from the flesh
      Formaline::Formaline_AnnounceInitial: [global] Put some meta information about the current run into permanent storage
      GRHydro::GRHydro_ClearLastMoLPostStep: [global] Initialize InLastMoLPostStep to zero
      ML_BSSN_Helper::ML_BSSN_ParamCompat: [meta] Handle parameter backward compatibility
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        GRHydro::GRHydro_Register: Register variables for MoL
        ML_ADMConstraints::ML_ADMConstraints_RegisterVars: [meta] Register Variables for MoL
        ML_BSSN::ML_BSSN_RegisterVars: [meta] Register Variables for MoL
        ML_BSSN_Helper::ML_BSSN_RegisterConstrained: [meta] Register ADMBase variables as constrained
      Slab::Slab_InitTimers: Initialise timers
      SpaceMask::MaskSym: [global] Set grid symmetries for mask
      SpaceMask::MaskSym_emask: [global] Set grid symmetries for emask (compatibility mode)
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::CartGrid3D_RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
          ML_ADMConstraints::ML_ADMConstraints_RegisterSymmetries: [meta] register symmetries
          ML_BSSN::ML_BSSN_RegisterSymmetries: [meta] register symmetries
          ReflectionSymmetry::ReflectionSymmetry_Register: Register reflection symmetry boundaries
          RotatingSymmetry180::Rot180_RegisterSymmetry: Register symmetry boundaries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
  Parameter checking routines
    [CCTK_PARAMCHECK]
      ADMBase::ADMBase_ParamCheck: [global] Check consistency of parameters
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CarpetMask::CarpetSurfaceParamCheck: [global] Check parameters
      CarpetRegrid2::CarpetRegrid2_ParamCheck: Check parameters
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      DNSdata::DNSdataPars: Read pars from BNSdata_properties.txt
      Dissipation::dissipation_paramcheck: Check dissipation parameters for consistency
      Fortran::CheckFortranParameters: Test whether Fortran parameters work correctly
      GRHydro::GRHydro_ParamCheck: Check parameters
      ML_BSSN_Helper::ML_BSSN_ParamCheck: [meta] Check parameters
      MoL::MoL_ParamCheck: Basic parameter checking
      QuasiLocalMeasures::qlm_paramcheck: [global] Check quasi-local parameter settings
      RotatingSymmetry180::Rot180_CheckTensorTypes: Check tensor type definitions for consistency
      SphericalSurface::SphericalSurface_ParamCheck: [global] Check that all surface names are unique
      TerminationTrigger::TerminationTrigger_ParamCheck: Check consitency of parameters
      TmunuBase::TmunuBase_ParamCheck: [global] Check that no deprecated parameters are used.
      Vectors::Vectors_Test: Run correctness tests.

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
              CarpetMask::CarpetExcludedSetup: [global] [loop-local] Set up the weight function for the excluded regions
              CarpetMask::CarpetSurfaceSetup: [global] [loop-local] Set up the weight function for the excluded spherical surfaces
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        Dissipation::setup_epsdis: Setup spatially varying dissipation
        SpaceMask::MaskZero: Initialise mask to zero
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GROUP GRHydro_PrimitiveBoundaries: Apply boundary conditions to all primitives
          GRHydro::GRHydro_SelectPrimitiveBoundaries: [level] Select primitive variables for boundary conditions
          GROUP GRHydro_ApplyPrimitiveBCs: Apply boundary conditions to all primitive variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
          HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_ADMConstraints_evaluate_bc_group: ML_ADMConstraints_evaluate
            ML_ADMConstraints::ML_ADMConstraints_evaluate_SelectBCs: [level] ML_ADMConstraints_evaluate_SelectBCs
            GROUP ML_ADMConstraints_evaluate_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints_evaluate
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
            ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
            GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
            ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
            GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        SpaceMask::MaskOne: Set mask to one
        GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        Dissipation::dissipation_basegrid: Ensure that there are enough ghost zones
        GRHydro::GRHydro_Reset_Execution_Flags: [global] Initially set execution flags to 'YEAH, Execute'!
        GRHydro::GRHydro_InitSymBound: Schedule symmetries and check shift state
        GRHydro::reset_GRHydro_C2P_failed: Initialise the mask function that contains the points where C2P has failed (at BASEGRID)
        Hydro_Analysis::Hydro_Analysis_Init: [global] Initialize variables
        ML_ADMConstraints::ML_ADMConstraints_CheckBoundaries: [meta] check boundaries treatment
        ML_BSSN::ML_BSSN_CheckBoundaries: [meta] check boundaries treatment
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        SpaceMask::MaskZero: Initialise mask to zero
        SpaceMask::MaskOne: Set old style mask to one
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
              CarpetMask::CarpetExcludedSetup: [global] [loop-local] Set up the weight function for the excluded regions
              CarpetMask::CarpetSurfaceSetup: [global] [loop-local] Set up the weight function for the excluded spherical surfaces
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SummationByParts::SBP_SetNormMask: Setup the mask for the calculation of the norm
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        TerminationTrigger::TerminationTrigger_ResetTrigger: Clear trigger state
        TerminationTrigger::TerminationTrigger_StartTimer: Start timer
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_INITIAL]
        StaticConformal::StaticConformal_InitialiseState: Set the conformal_state variable to 0
        GROUP ADMBase_InitialData: Schedule group for calculating ADM initial data
        GRHydro::GRHydro_EOSHandle: [global] Set the EOS number
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOHDF5::CarpetIOHDF5_Init: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        GRHydro::GRHydro_Rho_Minima_Setup: Set up minimum for the rest-mass density in the atmosphere (before intial data)
        GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GROUP ADMBase_InitialGauge: Schedule group for the ADM initial gauge condition
          ADMBase::ADMBase_ShiftZero: Set the shift to 0 at all points
          ADMBase::ADMBase_DtShiftZero: Set the dtshift to 0 at all points
        GROUP HydroBase_Initial: HydroBase initial data group
          DNSdata::DNSdataReader: Read binary neutron star initial data
          GROUP GRHydro_Initial: GRHydro initial data group
          GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
            HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
        GROUP ADMBase_PostInitial: Schedule group for modifying the ADM initial data, such as e.g. adding noise
        GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
        GRHydro::GRHydro_InitialAtmosphereReset: Use mask to enforce atmosphere at initial time
        ML_BSSN::ML_BSSN_InitialADMBase1Everywhere: ML_BSSN_InitialADMBase1Everywhere
        ML_BSSN::ML_BSSN_InitialADMBase2Interior: ML_BSSN_InitialADMBase2Interior
        ML_BSSN::ML_BSSN_InitialADMBase2BoundaryScalar: ML_BSSN_InitialADMBase2BoundaryScalar
        ML_BSSN_Helper::ML_BSSN_ExtrapolateGammas: Extrapolate Gammas and time derivatives of lapse and shift
        MoL::MoL_StartLoop: [level] Initialise the step size control
        QuasiLocalMeasures::qlm_init: [global] Initialise quasi-local calculations
        GROUP HydroBase_Prim2ConInitial: Recover the conservative variables from the primitive variables
          GRHydro::Primitive2ConservativeCells: Convert initial data given in primive variables to conserved variables
      [CCTK_POSTINITIAL]
        CarpetIOHDF5::CarpetIOHDF5_CloseFiles: [global] Close all filereader input files
        GRHydro::GRHydro_Scalar_Setup: Set up and check scalars for efficiency
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
          ML_BSSN::ML_BSSN_EnforceEverywhere: ML_BSSN_EnforceEverywhere
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
          GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
          GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
          ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
          ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
          ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP GRHydro_PostStep: Post step tasks for GRHydro
            GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
              GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
              GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
            if (GRHydro::InLastMoLPostStep)
              GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
            if (GRHydro::InLastMoLPostStep)
              GROUP GRHydro_PrimitiveInitialGuessesBoundaries: Apply boundary conditions to those primitives used as initial guesses
                GRHydro::GRHydro_SelectPrimitiveInitialGuessesBoundaries: [level] Select initial guess primitive variables for boudary conditions
                GROUP GRHydro_ApplyPrimitiveInitialGuessBCs: Apply boundary conditions to initial guess primitive variables
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                    RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                    RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                if (GRHydro::execute_MoL_PostStep)
                  GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
              if (GRHydro::execute_MoL_Step)
                GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
              if (GRHydro::execute_MoL_PostStep)
                GRHydro::Con2Prim: Convert back to primitive variables (general)
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP ML_ADMConstraints_evaluate_group: ML_ADMConstraints_evaluate
            ML_ADMConstraints::ML_ADMConstraints_evaluate: ML_ADMConstraints_evaluate
            GROUP ML_ADMConstraints_evaluate_bc_group: ML_ADMConstraints_evaluate
              ML_ADMConstraints::ML_ADMConstraints_evaluate_SelectBCs: [level] ML_ADMConstraints_evaluate_SelectBCs
              GROUP ML_ADMConstraints_evaluate_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints_evaluate
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ConstraintsEverywhere_group: ML_BSSN_ConstraintsEverywhere
            ML_BSSN::ML_BSSN_ConstraintsEverywhere: ML_BSSN_ConstraintsEverywhere
            GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
              ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
              GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ConstraintsInterior_group: ML_BSSN_ConstraintsInterior
            ML_BSSN::ML_BSSN_ConstraintsInterior: ML_BSSN_ConstraintsInterior
            GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
              ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
              GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        SummationByParts::SBP_CheckGridSizes: Check grid sizes and ghost zones
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
          GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
          GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
          ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
          ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
          ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP GRHydro_PostStep: Post step tasks for GRHydro
            GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
              GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
              GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
            if (GRHydro::InLastMoLPostStep)
              GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
            if (GRHydro::InLastMoLPostStep)
              GROUP GRHydro_PrimitiveInitialGuessesBoundaries: Apply boundary conditions to those primitives used as initial guesses
                GRHydro::GRHydro_SelectPrimitiveInitialGuessesBoundaries: [level] Select initial guess primitive variables for boudary conditions
                GROUP GRHydro_ApplyPrimitiveInitialGuessBCs: Apply boundary conditions to initial guess primitive variables
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                    RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                    RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                if (GRHydro::execute_MoL_PostStep)
                  GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
              if (GRHydro::execute_MoL_Step)
                GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
              if (GRHydro::execute_MoL_PostStep)
                GRHydro::Con2Prim: Convert back to primitive variables (general)
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_ADMConstraints_evaluate_bc_group: ML_ADMConstraints_evaluate
            ML_ADMConstraints::ML_ADMConstraints_evaluate_SelectBCs: [level] ML_ADMConstraints_evaluate_SelectBCs
            GROUP ML_ADMConstraints_evaluate_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints_evaluate
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
            ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
            GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
            ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
            GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_POSTPOSTINITIAL]
        GRHydro::GRHydro_Rho_Minima_Setup_Final: Set the value of the rest-mass density of the atmosphere which will be used during the evolution
        GRHydro::GRHydro_InitialAtmosphereReset: Use mask to enforce atmosphere at initial time
        GROUP Con2Prim: Convert from conservative to primitive variables (might be redundant)
          if (GRHydro::execute_MoL_Step)
            GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
          if (GRHydro::execute_MoL_PostStep)
            GRHydro::Con2Prim: Convert back to primitive variables (general)
        GROUP SetTmunu: Calculate the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
        GROUP ADMConstraintsGroup: Evaluate ADM constraints, and perform symmetry boundary conditions
      [CCTK_POSTSTEP]
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level (for the check of the C2P mask)
        GRHydro::check_GRHydro_C2P_failed: Check the mask function that contains the points where C2P has failed and report an error in case a failure is found
        HTTPD::HTTP_Work: [global] Working routine
        HTTPD::HTTP_ContentWork: [global] Content Working routine
        GROUP HydroBase_ExcisionHasBeenSet: Group to schedule thorns changing the mask before and thorns using the mask after
        GROUP Hydro_Analysis: Group for Hydro_Analysis routines
          Hydro_Analysis::Hydro_Analysis_PrepareReduction: [global] [loop-local] Compute the local reduction results
          Hydro_Analysis::Hydro_Analysis_Reduction: [global] Compute the global reduction results
          GROUP Hydro_Analysis_LocationSearch: Look for the location of the maximum density
            Hydro_Analysis::Hydro_Analysis_LocationSearch_Setup: [global] Prepare data structures for search
            Hydro_Analysis::Hydro_Analysis_LocationSearch_Search: [global] [loop-local] Search for the location of the maximum density
            Hydro_Analysis::Hydro_Analysis_LocationSearch_Combine: [global] Communicate and verify the location of the maximum density
          Hydro_Analysis::Hydro_Analysis_FindSeparation: [global] Compute the proper distance between the maximum of the density and the origin (along a straight coordinate line)
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
        SpaceMask::CheckMask: Ensure that all mask values are legal
        Dissipation::setup_epsdis: Setup spatially varying dissipation
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
              CarpetMask::CarpetExcludedSetup: [global] [loop-local] Set up the weight function for the excluded regions
              CarpetMask::CarpetSurfaceSetup: [global] [loop-local] Set up the weight function for the excluded spherical surfaces
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        Dissipation::dissipation_basegrid: Ensure that there are enough ghost zones
        GRHydro::GRHydro_Reset_Execution_Flags: [global] Initially set execution flags to 'YEAH, Execute'!
        GRHydro::GRHydro_InitSymBound: Schedule symmetries and check shift state
        GRHydro::reset_GRHydro_C2P_failed: Initialise the mask function that contains the points where C2P has failed (at BASEGRID)
        Hydro_Analysis::Hydro_Analysis_Init: [global] Initialize variables
        ML_ADMConstraints::ML_ADMConstraints_CheckBoundaries: [meta] check boundaries treatment
        ML_BSSN::ML_BSSN_CheckBoundaries: [meta] check boundaries treatment
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        SpaceMask::MaskZero: Initialise mask to zero
        SpaceMask::MaskOne: Set old style mask to one
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
              CarpetMask::CarpetExcludedSetup: [global] [loop-local] Set up the weight function for the excluded regions
              CarpetMask::CarpetSurfaceSetup: [global] [loop-local] Set up the weight function for the excluded spherical surfaces
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SummationByParts::SBP_SetNormMask: Setup the mask for the calculation of the norm
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        TerminationTrigger::TerminationTrigger_ResetTrigger: Clear trigger state
        TerminationTrigger::TerminationTrigger_StartTimer: Start timer
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_RECOVER_VARIABLES]
        IOUtil::IOUtil_RecoverGH: [level] Checkpoint recovery routine
      [CCTK_POST_RECOVER_VARIABLES]
        CarpetIOHDF5::CarpetIOHDF5_InitCheckpointingIntervals: [global] Initialisation of checkpointing intervals after recovery
        CarpetIOHDF5::CarpetIOHDF5_CloseFiles: [meta] Close all initial data checkpoint files after recovery
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
              CarpetMask::CarpetExcludedSetup: [global] [loop-local] Set up the weight function for the excluded regions
              CarpetMask::CarpetSurfaceSetup: [global] [loop-local] Set up the weight function for the excluded spherical surfaces
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GRHydro::GRHydro_EOSHandle: [global] Set the EOS number
        GRHydro::GRHydroCopyIntegerMask: Initialize the real valued atmosphere mask after checkpoint recovery
        GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
        GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
          HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
          GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
          GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
          ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
          ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
          ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP GRHydro_PostStep: Post step tasks for GRHydro
            GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
              GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
              GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
            if (GRHydro::InLastMoLPostStep)
              GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
            if (GRHydro::InLastMoLPostStep)
              GROUP GRHydro_PrimitiveInitialGuessesBoundaries: Apply boundary conditions to those primitives used as initial guesses
                GRHydro::GRHydro_SelectPrimitiveInitialGuessesBoundaries: [level] Select initial guess primitive variables for boudary conditions
                GROUP GRHydro_ApplyPrimitiveInitialGuessBCs: Apply boundary conditions to initial guess primitive variables
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                    RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                    RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                if (GRHydro::execute_MoL_PostStep)
                  GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
              if (GRHydro::execute_MoL_Step)
                GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
              if (GRHydro::execute_MoL_PostStep)
                GRHydro::Con2Prim: Convert back to primitive variables (general)
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
        TerminationTrigger::TerminationTrigger_ResetMinutes: [global] Reset Watchtime
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
        CarpetIOHDF5::CarpetIOHDF5_InitialDataCheckpoint: [meta] Initial data checkpoint routine
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        Formaline::Formaline_AnnounceUpdate: [global] Put some meta information about the current run into permanent storage
        LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
        GROUP ML_BSSN_EvolutionAnalysis: Calculate RHS at analysis
          ML_BSSN::ML_BSSN_EvolutionAnalysisInit: ML_BSSN_EvolutionAnalysisInit
          ML_BSSN::ML_BSSN_EvolutionAnalysisInterior: ML_BSSN_EvolutionAnalysisInterior
          ML_BSSN_Helper::ML_BSSN_NewRad: Apply NewRad boundary conditions to RHS
        QuasiLocalMeasures::qlm_calculate: [global] Calculate quasi-local quantities
        SystemStatistics::SystemStatistics_Collect: [global] Collect system statistics
        TerminationTrigger::TerminationTrigger_CheckWalltime: Check elapsed job walltime
        TerminationTrigger::TerminationTrigger_CheckSignal: Check if we received a termination signal
        TerminationTrigger::TerminationTrigger_CheckFile: Check termination file
        TimerReport::zzz_TimerReport_Output: [global] Print the timer report
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
      CarpetTracker::CarpetTracker_SetPositions: [global] Set positions of refined regions
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetMask::CarpetExcludedSetup: [global] [loop-local] Set up the weight function for the excluded regions
            CarpetMask::CarpetSurfaceSetup: [global] [loop-local] Set up the weight function for the excluded spherical surfaces
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      Dissipation::setup_epsdis: Setup spatially varying dissipation
      SpaceMask::MaskZero: Initialise mask to zero
      GROUP GRHydro_PrimitiveBoundaries: Apply boundary conditions to all primitives
        GRHydro::GRHydro_SelectPrimitiveBoundaries: [level] Select primitive variables for boundary conditions
        GROUP GRHydro_ApplyPrimitiveBCs: Apply boundary conditions to all primitive variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
        HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
      SpaceMask::MaskOne: Set mask to one
      GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
        GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
        ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
        ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
        ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
        GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP GRHydro_PostStep: Post step tasks for GRHydro
          GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
            GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
            GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
          if (GRHydro::InLastMoLPostStep)
            GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
          if (GRHydro::InLastMoLPostStep)
            GROUP GRHydro_PrimitiveInitialGuessesBoundaries: Apply boundary conditions to those primitives used as initial guesses
              GRHydro::GRHydro_SelectPrimitiveInitialGuessesBoundaries: [level] Select initial guess primitive variables for boudary conditions
              GROUP GRHydro_ApplyPrimitiveInitialGuessBCs: Apply boundary conditions to initial guess primitive variables
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              if (GRHydro::execute_MoL_PostStep)
                GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
            if (GRHydro::execute_MoL_Step)
              GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
            if (GRHydro::execute_MoL_PostStep)
              GRHydro::Con2Prim: Convert back to primitive variables (general)
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_ADMConstraints_evaluate_bc_group: ML_ADMConstraints_evaluate
          ML_ADMConstraints::ML_ADMConstraints_evaluate_SelectBCs: [level] ML_ADMConstraints_evaluate_SelectBCs
          GROUP ML_ADMConstraints_evaluate_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints_evaluate
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
          ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
          GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
          ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
          GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      GRHydro::reset_GRHydro_C2P_failed: Reset the mask function that contains the points where C2P has failed (at PRESTEP)
      LoopControl::LC_steer: [meta] Update LoopControl algorithm preferences
      NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
            MoL::MoL_AllocateScratchSpace: [level] Allocate storage for scratch levels
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
            GRHydro::GRHydro_Scalar_Setup: Set up and check scalars for efficiency
          MoL::MoL_AllocateScratch: Allocate sufficient space for array scratch variables
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                GROUP HydroBase_RHS: Groups for scheduling tasks for calculating RHS of hydro variables
                  if (GRHydro::execute_MoL_Step)
                    GROUP GRHydroRHS: Calculate the update terms
                      GRHydro::SourceTerms: Source term calculation
                      GRHydro::GRHydroStartLoop: [level] Set the flux_direction variable
                      while (GRHydro::flux_direction)
                        GROUP FluxTerms: Calculation of intercell fluxes
                          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
                          GRHydro::Reconstruct: Reconstruct the functions at the cell boundaries
                          GRHydro::Riemann: Solve the local Riemann problems
                          GRHydro::UpdateCalcul: Calculate the update term from the fluxes
                          GRHydro::GRHydroAdvanceLoop: [level] Decrement the flux_direction variable
                      end while
                      GRHydro::GRHydroUpdateAtmosphereMask: Alter the update terms if inside the atmosphere region
                ML_BSSN::ML_BSSN_EvolutionBoundaryScalar: ML_BSSN_EvolutionBoundaryScalar
                GROUP ML_BSSN_EvolutionInteriorSplitBy: 
                  ML_BSSN::ML_BSSN_EvolutionInteriorSplitBy1: ML_BSSN_EvolutionInteriorSplitBy1
                  ML_BSSN::ML_BSSN_EvolutionInteriorSplitBy2: ML_BSSN_EvolutionInteriorSplitBy2
                  ML_BSSN::ML_BSSN_EvolutionInteriorSplitBy3: ML_BSSN_EvolutionInteriorSplitBy3
                ML_BSSN_Helper::ML_BSSN_NewRad: Apply NewRad boundary conditions to RHS
              GROUP MoL_PostRHS: Modify RHS functions
                Dissipation::dissipation_add: Add Kreiss-Oliger dissipation to the right hand sides
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient Runge-Kutta 4 method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
                ML_BSSN::ML_BSSN_EnforceEverywhere: ML_BSSN_EnforceEverywhere
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
                GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
                GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
                GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                    RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                    RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
                GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                    RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                    RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
                ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
                ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
                ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
                GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                    RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                    RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
                GROUP HydroBase_PostStep: Post step tasks for hydro thorns
                  GROUP GRHydro_PostStep: Post step tasks for GRHydro
                  GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
                    GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
                    GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
                      GROUP BoundaryConditions: Execute all boundary conditions
                        Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                        CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                        ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                        RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                        RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                      Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                  GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
                  if (GRHydro::InLastMoLPostStep)
                    GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
                  if (GRHydro::InLastMoLPostStep)
                    GROUP GRHydro_PrimitiveInitialGuessesBoundaries: Apply boundary conditions to those primitives used as initial guesses
                      GRHydro::GRHydro_SelectPrimitiveInitialGuessesBoundaries: [level] Select initial guess primitive variables for boudary conditions
                      GROUP GRHydro_ApplyPrimitiveInitialGuessBCs: Apply boundary conditions to initial guess primitive variables
                        GROUP BoundaryConditions: Execute all boundary conditions
                          Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                          CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                          ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                          RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                          RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                        Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                  GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
                    GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
                    GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                      if (GRHydro::execute_MoL_PostStep)
                        GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
                    GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                      GROUP BoundaryConditions: Execute all boundary conditions
                        Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                        CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                        ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                        RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                        RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                      Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                  GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
                    if (GRHydro::execute_MoL_Step)
                      GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
                    if (GRHydro::execute_MoL_PostStep)
                      GRHydro::Con2Prim: Convert back to primitive variables (general)
                GROUP SetTmunu: Group for calculating the stress-energy tensor
                  TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
                  GROUP AddToTmunu: Add to the stress-energy tensor here
                    GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
              GRHydro::GRHydro_ClearLastMoLPostStep: [level] Reset InLastMoLPostStep to zero
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
          MoL::MoL_FreeScratchSpace: [level] Free storage for scratch levels
      end while
      GRHydro::sync_GRHydro_C2P_failed: Syncronise the mask function that contains the points where C2P has failed
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP ML_ADMConstraints_evaluate_group: ML_ADMConstraints_evaluate
          ML_ADMConstraints::ML_ADMConstraints_evaluate: ML_ADMConstraints_evaluate
          GROUP ML_ADMConstraints_evaluate_bc_group: ML_ADMConstraints_evaluate
            ML_ADMConstraints::ML_ADMConstraints_evaluate_SelectBCs: [level] ML_ADMConstraints_evaluate_SelectBCs
            GROUP ML_ADMConstraints_evaluate_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints_evaluate
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsEverywhere_group: ML_BSSN_ConstraintsEverywhere
          ML_BSSN::ML_BSSN_ConstraintsEverywhere: ML_BSSN_ConstraintsEverywhere
          GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
            ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
            GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsInterior_group: ML_BSSN_ConstraintsInterior
          ML_BSSN::ML_BSSN_ConstraintsInterior: ML_BSSN_ConstraintsInterior
          GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
            ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
            GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
        GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
        ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
        ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
        ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
        GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP GRHydro_PostStep: Post step tasks for GRHydro
          GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
            GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
            GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
          if (GRHydro::InLastMoLPostStep)
            GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
          if (GRHydro::InLastMoLPostStep)
            GROUP GRHydro_PrimitiveInitialGuessesBoundaries: Apply boundary conditions to those primitives used as initial guesses
              GRHydro::GRHydro_SelectPrimitiveInitialGuessesBoundaries: [level] Select initial guess primitive variables for boudary conditions
              GROUP GRHydro_ApplyPrimitiveInitialGuessBCs: Apply boundary conditions to initial guess primitive variables
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              if (GRHydro::execute_MoL_PostStep)
                GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
            if (GRHydro::execute_MoL_Step)
              GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
            if (GRHydro::execute_MoL_PostStep)
              GRHydro::Con2Prim: Convert back to primitive variables (general)
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_ADMConstraints_evaluate_bc_group: ML_ADMConstraints_evaluate
          ML_ADMConstraints::ML_ADMConstraints_evaluate_SelectBCs: [level] ML_ADMConstraints_evaluate_SelectBCs
          GROUP ML_ADMConstraints_evaluate_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints_evaluate
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
          ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
          GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
          ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
          GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    [CCTK_POSTSTEP]
      SphericalSurface::SphericalSurface_Set: [global] Set surface radii
      GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
        SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
      GRHydro::GRHydro_RefinementLevel: Calculate current refinement level (for the check of the C2P mask)
      GRHydro::check_GRHydro_C2P_failed: Check the mask function that contains the points where C2P has failed and report an error in case a failure is found
      HTTPD::HTTP_Work: [global] Working routine
      HTTPD::HTTP_ContentWork: [global] Content Working routine
      GROUP HydroBase_ExcisionHasBeenSet: Group to schedule thorns changing the mask before and thorns using the mask after
      GROUP Hydro_Analysis: Group for Hydro_Analysis routines
        Hydro_Analysis::Hydro_Analysis_PrepareReduction: [global] [loop-local] Compute the local reduction results
        Hydro_Analysis::Hydro_Analysis_Reduction: [global] Compute the global reduction results
        GROUP Hydro_Analysis_LocationSearch: Look for the location of the maximum density
          Hydro_Analysis::Hydro_Analysis_LocationSearch_Setup: [global] Prepare data structures for search
          Hydro_Analysis::Hydro_Analysis_LocationSearch_Search: [global] [loop-local] Search for the location of the maximum density
          Hydro_Analysis::Hydro_Analysis_LocationSearch_Combine: [global] Communicate and verify the location of the maximum density
        Hydro_Analysis::Hydro_Analysis_FindSeparation: [global] Compute the proper distance between the maximum of the density and the origin (along a straight coordinate line)
      GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
      NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
      SpaceMask::CheckMask: Ensure that all mask values are legal
      Dissipation::setup_epsdis: Setup spatially varying dissipation
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetMask::CarpetExcludedSetup: [global] [loop-local] Set up the weight function for the excluded regions
            CarpetMask::CarpetSurfaceSetup: [global] [loop-local] Set up the weight function for the excluded spherical surfaces
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
    if (checkpoint)
      [CCTK_CHECKPOINT]
      CarpetIOHDF5::CarpetIOHDF5_EvolutionCheckpoint: [meta] Evolution checkpoint routine
      TimerReport::zzz_TimerReport_Checkpoint: [global] Print the timer report
    endif
    if (analysis)
      [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      Formaline::Formaline_AnnounceUpdate: [global] Put some meta information about the current run into permanent storage
      LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
      GROUP ML_BSSN_EvolutionAnalysis: Calculate RHS at analysis
        ML_BSSN::ML_BSSN_EvolutionAnalysisInit: ML_BSSN_EvolutionAnalysisInit
        ML_BSSN::ML_BSSN_EvolutionAnalysisInterior: ML_BSSN_EvolutionAnalysisInterior
        ML_BSSN_Helper::ML_BSSN_NewRad: Apply NewRad boundary conditions to RHS
      QuasiLocalMeasures::qlm_calculate: [global] Calculate quasi-local quantities
      SystemStatistics::SystemStatistics_Collect: [global] Collect system statistics
      TerminationTrigger::TerminationTrigger_CheckWalltime: Check elapsed job walltime
      TerminationTrigger::TerminationTrigger_CheckSignal: Check if we received a termination signal
      TerminationTrigger::TerminationTrigger_CheckFile: Check termination file
      TimerReport::zzz_TimerReport_Output: [global] Print the timer report
    endif
    Output grid variables
    enddo

  Termination routines
    [CCTK_TERMINATE]
      CarpetIOHDF5::CarpetIOHDF5_TerminationCheckpoint: [meta] Termination checkpoint routine
      Formaline::Formaline_AnnounceFinal: [global] Put some meta information about the current run into permanent storage
      LoopControl::LC_statistics_terminate: [meta] Output LoopControl statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays
      TimerReport::zzz_TimerReport_Output: [global] Print the timer report

  Shutdown routines
    [CCTK_SHUTDOWN]
      HTTPD::HTTP_Shutdown: [global] HTTP daemon shutdown
      Timers::Timer_Shutdown: Prepare hierarchical timers

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetMask::CarpetExcludedSetup: [global] [loop-local] Set up the weight function for the excluded regions
            CarpetMask::CarpetSurfaceSetup: [global] [loop-local] Set up the weight function for the excluded spherical surfaces
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      Dissipation::setup_epsdis: Setup spatially varying dissipation
      SpaceMask::MaskZero: Initialise mask to zero
      GROUP GRHydro_PrimitiveBoundaries: Apply boundary conditions to all primitives
        GRHydro::GRHydro_SelectPrimitiveBoundaries: [level] Select primitive variables for boundary conditions
        GROUP GRHydro_ApplyPrimitiveBCs: Apply boundary conditions to all primitive variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
        HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
      SpaceMask::MaskOne: Set mask to one
      GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
        GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
        ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
        ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
        ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
        GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP GRHydro_PostStep: Post step tasks for GRHydro
          GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
            GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
            GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
          if (GRHydro::InLastMoLPostStep)
            GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
          if (GRHydro::InLastMoLPostStep)
            GROUP GRHydro_PrimitiveInitialGuessesBoundaries: Apply boundary conditions to those primitives used as initial guesses
              GRHydro::GRHydro_SelectPrimitiveInitialGuessesBoundaries: [level] Select initial guess primitive variables for boudary conditions
              GROUP GRHydro_ApplyPrimitiveInitialGuessBCs: Apply boundary conditions to initial guess primitive variables
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              if (GRHydro::execute_MoL_PostStep)
                GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
            if (GRHydro::execute_MoL_Step)
              GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
            if (GRHydro::execute_MoL_PostStep)
              GRHydro::Con2Prim: Convert back to primitive variables (general)
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_ADMConstraints_evaluate_bc_group: ML_ADMConstraints_evaluate
          ML_ADMConstraints::ML_ADMConstraints_evaluate_SelectBCs: [level] ML_ADMConstraints_evaluate_SelectBCs
          GROUP ML_ADMConstraints_evaluate_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints_evaluate
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
          ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
          GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
          ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
          GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ComputeLevelExtent: [level] Compute extent of level
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   processes 0-1: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
INFO (CarpetLib): Process startup time was 0.87 seconds
Current core file size limit: hard=[unlimited], soft=0 MB
Current addres space size limit: hard=[unlimited], soft=[unlimited]
Current data segment size limit: hard=[unlimited], soft=[unlimited]
Current resident set size limit: hard=[unlimited], soft=[unlimited]
INFO (CycleClock): Measuring CycleClock tick via OpenMP...
INFO (CycleClock): Calibrated CycleClock: 0.385516 ns per clock tick (2.59393 GHz)
INFO (hwloc): library version 2.7.0, API version 0x20500
INFO (SystemTopology): MPI process-to-host mapping:
This is MPI process 0 of 2
MPI hosts:
  0: fv-az1241-539
This MPI process runs on host 0 of 1
On this host, this is MPI process 0 of 2
INFO (SystemTopology): Topology support:
Discovery support:
  discovery->pu                            : yes
CPU binding support:
  cpubind->set_thisproc_cpubind            : yes
  cpubind->get_thisproc_cpubind            : yes
  cpubind->set_proc_cpubind                : yes
  cpubind->get_proc_cpubind                : yes
  cpubind->set_thisthread_cpubind          : yes
  cpubind->get_thisthread_cpubind          : yes
  cpubind->set_thread_cpubind              : yes
  cpubind->get_thread_cpubind              : yes
  cpubind->get_thisproc_last_cpu_location  : yes
  cpubind->get_proc_last_cpu_location      : yes
  cpubind->get_thisthread_last_cpu_location: yes
Memory binding support:
  membind->set_thisproc_membind            : no
  membind->get_thisproc_membind            : no
  membind->set_proc_membind                : no
  membind->get_proc_membind                : no
  membind->set_thisthread_membind          : yes
  membind->get_thisthread_membind          : yes
  membind->set_area_membind                : yes
  membind->get_area_membind                : yes
  membind->alloc_membind                   : yes
  membind->firsttouch_membind              : yes
  membind->bind_membind                    : yes
  membind->interleave_membind              : yes
  membind->nexttouch_membind               : no
  membind->migrate_membind                 : yes
INFO (SystemTopology): Hardware objects in this node:
Machine L#0: (P#0, total=7088112KB, DMIProductName="Virtual Machine", DMIProductVersion=7.0, DMIProductUUID=e0014f6e-9fb5-c840-aaaf-38929153aceb, DMIBoardVendor="Microsoft Corporation", DMIBoardName="Virtual Machine", DMIBoardVersion=7.0, DMIChassisVendor="Microsoft Corporation", DMIChassisType=3, DMIChassisVersion=7.0, DMIChassisAssetTag=7783-7084-3265-9085-8269-3286-77, DMIBIOSVendor="American Megatrends Inc.", DMIBIOSVersion="090008 ", DMIBIOSDate=12/07/2018, DMISysVendor="Microsoft Corporation", Backend=Linux, LinuxCgroup=/system.slice/runner-provisioner.service, OSName=Linux, OSRelease=6.2.0-1014-azure, OSVersion="#14~22.04.1-Ubuntu SMP Wed Sep 13 16:15:26 UTC 2023", HostName=fv-az1241-539, Architecture=x86_64, hwlocVersion=2.7.0, ProcessName=cactus_sim)
  Package L#0: (P#0, total=7088112KB, CPUVendor=GenuineIntel, CPUFamilyNumber=6, CPUModelNumber=85, CPUModel="Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz", CPUStepping=7)
    L3Cache L#0: (P#0, size=36608KB, linesize=64, ways=11, Inclusive=0)
      L2Cache L#0: (P#0, size=1024KB, linesize=64, ways=16, Inclusive=0)
        L1dCache L#0: (P#0, size=32KB, linesize=64, ways=8, Inclusive=0)
          Core L#0: (P#0)
            PU L#0: (P#0)
      L2Cache L#1: (P#1, size=1024KB, linesize=64, ways=16, Inclusive=0)
        L1dCache L#1: (P#1, size=32KB, linesize=64, ways=8, Inclusive=0)
          Core L#1: (P#1)
            PU L#1: (P#1)
INFO (SystemTopology): Thread CPU bindings:
  MPI process 0 on host 0 (process 0 of 2 on this host)
    OpenMP thread 0: PU set L#{0} P#{0}
  MPI process 1 on host 0 (process 1 of 2 on this host)
    OpenMP thread 0: PU set L#{1} P#{1}
INFO (SystemTopology): Setting thread CPU bindings:
INFO (SystemTopology): Thread CPU bindings:
  MPI process 0 on host 0 (process 0 of 2 on this host)
    OpenMP thread 0: PU set L#{0} P#{0}
  MPI process 1 on host 0 (process 1 of 2 on this host)
    OpenMP thread 0: PU set L#{1} P#{1}
INFO (SystemTopology): Extracting CPU/cache/memory properties:
  There are 1 PUs per core (aka hardware SMT threads)
  There are 1 threads per core (aka SMT threads used)
  Cache (unknown name) has type "data" depth 1
    size 32768 linesize 64 associativity 8 stride 4096, for 1 PUs
  Cache (unknown name) has type "unified" depth 2
    size 1048576 linesize 64 associativity 16 stride 65536, for 1 PUs
  Cache (unknown name) has type "unified" depth 3
    size 37486592 linesize 64 associativity 11 stride 3407872, for 2 PUs
INFO (Formaline): Configuration id: config-sim-fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net-home-runner-work-tests-tests-master
INFO (Formaline): Build id: build-sim-fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net-runner-2023.10.19-15.24.58-125754
INFO (Formaline): Simulation id: run-CactusSgrid_test-fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net-runner-2023.10.19-15.48.44-136310
INFO (Formaline): Run id: run-CactusSgrid_test-fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net-runner-2023.10.19-15.48.44-136310
Server started on http://fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net:5555/
Not announcing location via Twitter.
INFO (Vectors): Using vector size 2 for architecture SSE2 (64-bit precision)
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
GRHydro: relativistic hydrodynamics, no ice.
--------------------------------------------------------------------------------
HydroBase: Let it flow.
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------
ML_ADMConstraints
--------------------------------------------------------------------------------
ML_BSSN
--------------------------------------------------------------------------------
AMR HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 0D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 1D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 2D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 3D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------
AMR scalar I/O provided by CarpetIOScalar
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 2 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 1 threads, this is thread 0
INFO (Carpet): There are 2 threads in total
INFO (Carpet): There are 1 threads per process
INFO (Carpet): This process runs on host fv-az1241-539, pid=136310
INFO (Carpet): This process runs on 1 core: 0
INFO (Carpet): Thread 0 runs on 1 core: 0
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): Boundary specification for map 0:
   nboundaryzones: [[3,3,3],[3,3,3]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[1,0,1],[0,0,0]]
INFO (Carpet): CoordBase domain specification for map 0:
   physical extent: [0,-200,0] : [200,200,200]   ([200,400,200])
   interior extent: [0,-192,0] : [192,192,192]   ([192,384,192])
   exterior extent: [-24,-216,-24] : [216,216,216]   ([240,432,240])
   base_spacing   : [8,8,8]
INFO (Carpet): Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [0,-200,0] : [200,200,200]   ([200,400,200])
   interior extent   : [0,-192,0] : [192,192,192]   ([192,384,192])
   exterior extent   : [-24,-216,-24] : [216,216,216]   ([240,432,240])
   spacing           : [8,8,8]
INFO (Carpet): Base grid specification for map 0:
   number of grid points             : [31,55,31]
   number of coarse grid ghost points: [[3,3,3],[3,3,3]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[9,9,9],[9,9,9]]
   [2]: [[9,9,9],[9,9,9]]
   [3]: [[9,9,9],[9,9,9]]
   [4]: [[9,9,9],[9,9,9]]
   [5]: [[9,9,9],[9,9,9]]
   [6]: [[9,9,9],[9,9,9]]
   [7]: [[9,9,9],[9,9,9]]
   [8]: [[9,9,9],[9,9,9]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[0,0,0],[0,0,0]]
   [2]: [[0,0,0],[0,0,0]]
   [3]: [[0,0,0],[0,0,0]]
   [4]: [[0,0,0],[0,0,0]]
   [5]: [[0,0,0],[0,0,0]]
   [6]: [[0,0,0],[0,0,0]]
   [7]: [[0,0,0],[0,0,0]]
   [8]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 1106 grid functions in 140 groups
INFO (Carpet):    There are 587 grid scalars in 90 groups
INFO (Carpet):    There are 130 1-dimensional grid arrays in 13 groups
INFO (Carpet):    There are 142 2-dimensional grid arrays in 17 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 0 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOHDF5): I/O Method 'IOHDF5' registered: AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_0D' registered: 0D AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_1D' registered: 1D AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_2D' registered: 2D AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): Periodic 2D AMR output requested for:
   ADMBASE::gxx
   ADMBASE::gxy
   ADMBASE::gxz
   ADMBASE::gyy
   ADMBASE::gyz
   ADMBASE::gzz
   ADMBASE::alp
   ADMBASE::betax
   ADMBASE::betay
   ADMBASE::betaz
   CARPETREDUCE::weight
   GRID::x
   GRID::y
   GRID::z
   GRID::r
   HYDROBASE::rho
   HYDROBASE::eps
   HYDROBASE::vel[0]
   HYDROBASE::vel[1]
   HYDROBASE::vel[2]
   ML_ADMCONSTRAINTS::H
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_3D' registered: 3D AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): Periodic 3D AMR output requested for:
   ADMBASE::alp
   ADMBASE::betax
   ADMBASE::betay
   ADMBASE::betaz
   CARPETREDUCE::weight
   GRID::x
   GRID::y
   GRID::z
   GRID::r
   HYDROBASE::rho
   HYDROBASE::eps
   HYDROBASE::vel[0]
   HYDROBASE::vel[1]
   HYDROBASE::vel[2]
   ML_ADMCONSTRAINTS::H
INFO (CarpetIOScalar): Periodic scalar output requested for:
   ADMBASE::gxx
   ADMBASE::gxy
   ADMBASE::gxz
   ADMBASE::gyy
   ADMBASE::gyz
   ADMBASE::gzz
   ADMBASE::kxx
   ADMBASE::kxy
   ADMBASE::kxz
   ADMBASE::kyy
   ADMBASE::kyz
   ADMBASE::kzz
   ADMBASE::alp
   ADMBASE::betax
   ADMBASE::betay
   ADMBASE::betaz
   GRHYDRO::dens
   HYDROBASE::rho
   HYDROBASE::vel[0]
   HYDROBASE::vel[1]
   HYDROBASE::vel[2]
   HYDROBASE::w_lorentz
   ML_ADMCONSTRAINTS::H
   SPHERICALSURFACE::sf_radius[0]
   SPHERICALSURFACE::sf_radius[1]
   SPHERICALSURFACE::sf_radius[2]
   SPHERICALSURFACE::sf_radius[3]
   SPHERICALSURFACE::sf_radius[4]
   SYSTEMSTATISTICS::maxrss_mb
   SYSTEMSTATISTICS::majflt_mb
   SYSTEMSTATISTICS::arena_mb
   SYSTEMSTATISTICS::ordblks_mb
   SYSTEMSTATISTICS::hblks_mb
   SYSTEMSTATISTICS::hblkhd_mb
   SYSTEMSTATISTICS::uordblks_mb
   SYSTEMSTATISTICS::fordblks_mb
   SYSTEMSTATISTICS::keepcost_mb
   SYSTEMSTATISTICS::swap_used_mb
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 0D AMR output requested for:
   CARPET::physical_time_per_hour
   CARPET::current_physical_time_per_hour
   CARPET::time_total
   CARPET::time_evolution
   CARPET::time_computing
   CARPET::time_communicating
   CARPET::time_io
   CARPET::evolution_steps_count
   CARPET::local_grid_points_per_second
   CARPET::total_grid_points_per_second
   CARPET::local_grid_point_updates_count
   CARPET::total_grid_point_updates_count
   CARPET::local_interior_points_per_second
   CARPET::total_interior_points_per_second
   CARPET::local_interior_point_updates_count
   CARPET::total_interior_point_updates_count
   CARPET::io_per_second
   CARPET::io_bytes_per_second
   CARPET::io_bytes_ascii_per_second
   CARPET::io_bytes_binary_per_second
   CARPET::io_count
   CARPET::io_bytes_count
   CARPET::io_bytes_ascii_count
   CARPET::io_bytes_binary_count
   CARPET::comm_per_second
   CARPET::comm_bytes_per_second
   CARPET::comm_count
   CARPET::comm_bytes_count
   CARPET::time_levels
   CARPET::current_walltime
   CARPET::syncs_count
   HYDRO_ANALYSIS::Hydro_Analysis_rho_max_loc[0]
   HYDRO_ANALYSIS::Hydro_Analysis_rho_max_loc[1]
   HYDRO_ANALYSIS::Hydro_Analysis_rho_max_loc[2]
   HYDRO_ANALYSIS::Hydro_Analysis_rho_max_origin_distance
   QUASILOCALMEASURES::qlm_time[0]
   QUASILOCALMEASURES::qlm_time[1]
   QUASILOCALMEASURES::qlm_equatorial_circumference[0]
   QUASILOCALMEASURES::qlm_equatorial_circumference[1]
   QUASILOCALMEASURES::qlm_polar_circumference_0[0]
   QUASILOCALMEASURES::qlm_polar_circumference_0[1]
   QUASILOCALMEASURES::qlm_polar_circumference_pi_2[0]
   QUASILOCALMEASURES::qlm_polar_circumference_pi_2[1]
   QUASILOCALMEASURES::qlm_area[0]
   QUASILOCALMEASURES::qlm_area[1]
   QUASILOCALMEASURES::qlm_irreducible_mass[0]
   QUASILOCALMEASURES::qlm_irreducible_mass[1]
   QUASILOCALMEASURES::qlm_radius[0]
   QUASILOCALMEASURES::qlm_radius[1]
   QUASILOCALMEASURES::qlm_spin_guess[0]
   QUASILOCALMEASURES::qlm_spin_guess[1]
   QUASILOCALMEASURES::qlm_mass_guess[0]
   QUASILOCALMEASURES::qlm_mass_guess[1]
   QUASILOCALMEASURES::qlm_killing_eigenvalue_re[0]
   QUASILOCALMEASURES::qlm_killing_eigenvalue_re[1]
   QUASILOCALMEASURES::qlm_killing_eigenvalue_im[0]
   QUASILOCALMEASURES::qlm_killing_eigenvalue_im[1]
   QUASILOCALMEASURES::qlm_spin[0]
   QUASILOCALMEASURES::qlm_spin[1]
   QUASILOCALMEASURES::qlm_npspin[0]
   QUASILOCALMEASURES::qlm_npspin[1]
   QUASILOCALMEASURES::qlm_wsspin[0]
   QUASILOCALMEASURES::qlm_wsspin[1]
   QUASILOCALMEASURES::qlm_cvspin[0]
   QUASILOCALMEASURES::qlm_cvspin[1]
   QUASILOCALMEASURES::qlm_coordspinx[0]
   QUASILOCALMEASURES::qlm_coordspinx[1]
   QUASILOCALMEASURES::qlm_coordspiny[0]
   QUASILOCALMEASURES::qlm_coordspiny[1]
   QUASILOCALMEASURES::qlm_coordspinz[0]
   QUASILOCALMEASURES::qlm_coordspinz[1]
   QUASILOCALMEASURES::qlm_mass[0]
   QUASILOCALMEASURES::qlm_mass[1]
   QUASILOCALMEASURES::qlm_adm_energy[0]
   QUASILOCALMEASURES::qlm_adm_energy[1]
   QUASILOCALMEASURES::qlm_adm_momentum_x[0]
   QUASILOCALMEASURES::qlm_adm_momentum_x[1]
   QUASILOCALMEASURES::qlm_adm_momentum_y[0]
   QUASILOCALMEASURES::qlm_adm_momentum_y[1]
   QUASILOCALMEASURES::qlm_adm_momentum_z[0]
   QUASILOCALMEASURES::qlm_adm_momentum_z[1]
   QUASILOCALMEASURES::qlm_adm_angular_momentum_x[0]
   QUASILOCALMEASURES::qlm_adm_angular_momentum_x[1]
   QUASILOCALMEASURES::qlm_adm_angular_momentum_y[0]
   QUASILOCALMEASURES::qlm_adm_angular_momentum_y[1]
   QUASILOCALMEASURES::qlm_adm_angular_momentum_z[0]
   QUASILOCALMEASURES::qlm_adm_angular_momentum_z[1]
   QUASILOCALMEASURES::qlm_w_energy[0]
   QUASILOCALMEASURES::qlm_w_energy[1]
   QUASILOCALMEASURES::qlm_w_momentum_x[0]
   QUASILOCALMEASURES::qlm_w_momentum_x[1]
   QUASILOCALMEASURES::qlm_w_momentum_y[0]
   QUASILOCALMEASURES::qlm_w_momentum_y[1]
   QUASILOCALMEASURES::qlm_w_momentum_z[0]
   QUASILOCALMEASURES::qlm_w_momentum_z[1]
   QUASILOCALMEASURES::qlm_w_angular_momentum_x[0]
   QUASILOCALMEASURES::qlm_w_angular_momentum_x[1]
   QUASILOCALMEASURES::qlm_w_angular_momentum_y[0]
   QUASILOCALMEASURES::qlm_w_angular_momentum_y[1]
   QUASILOCALMEASURES::qlm_w_angular_momentum_z[0]
   QUASILOCALMEASURES::qlm_w_angular_momentum_z[1]
   SPHERICALSURFACE::sf_active[0]
   SPHERICALSURFACE::sf_active[1]
   SPHERICALSURFACE::sf_active[2]
   SPHERICALSURFACE::sf_active[3]
   SPHERICALSURFACE::sf_active[4]
   SPHERICALSURFACE::sf_valid[0]
   SPHERICALSURFACE::sf_valid[1]
   SPHERICALSURFACE::sf_valid[2]
   SPHERICALSURFACE::sf_valid[3]
   SPHERICALSURFACE::sf_valid[4]
   SPHERICALSURFACE::sf_area[0]
   SPHERICALSURFACE::sf_area[1]
   SPHERICALSURFACE::sf_area[2]
   SPHERICALSURFACE::sf_area[3]
   SPHERICALSURFACE::sf_area[4]
   SPHERICALSURFACE::sf_mean_radius[0]
   SPHERICALSURFACE::sf_mean_radius[1]
   SPHERICALSURFACE::sf_mean_radius[2]
   SPHERICALSURFACE::sf_mean_radius[3]
   SPHERICALSURFACE::sf_mean_radius[4]
   SPHERICALSURFACE::sf_centroid_x[0]
   SPHERICALSURFACE::sf_centroid_x[1]
   SPHERICALSURFACE::sf_centroid_x[2]
   SPHERICALSURFACE::sf_centroid_x[3]
   SPHERICALSURFACE::sf_centroid_x[4]
   SPHERICALSURFACE::sf_centroid_y[0]
   SPHERICALSURFACE::sf_centroid_y[1]
   SPHERICALSURFACE::sf_centroid_y[2]
   SPHERICALSURFACE::sf_centroid_y[3]
   SPHERICALSURFACE::sf_centroid_y[4]
   SPHERICALSURFACE::sf_centroid_z[0]
   SPHERICALSURFACE::sf_centroid_z[1]
   SPHERICALSURFACE::sf_centroid_z[2]
   SPHERICALSURFACE::sf_centroid_z[3]
   SPHERICALSURFACE::sf_centroid_z[4]
   SPHERICALSURFACE::sf_quadrupole_xx[0]
   SPHERICALSURFACE::sf_quadrupole_xx[1]
   SPHERICALSURFACE::sf_quadrupole_xx[2]
   SPHERICALSURFACE::sf_quadrupole_xx[3]
   SPHERICALSURFACE::sf_quadrupole_xx[4]
   SPHERICALSURFACE::sf_quadrupole_xy[0]
   SPHERICALSURFACE::sf_quadrupole_xy[1]
   SPHERICALSURFACE::sf_quadrupole_xy[2]
   SPHERICALSURFACE::sf_quadrupole_xy[3]
   SPHERICALSURFACE::sf_quadrupole_xy[4]
   SPHERICALSURFACE::sf_quadrupole_xz[0]
   SPHERICALSURFACE::sf_quadrupole_xz[1]
   SPHERICALSURFACE::sf_quadrupole_xz[2]
   SPHERICALSURFACE::sf_quadrupole_xz[3]
   SPHERICALSURFACE::sf_quadrupole_xz[4]
   SPHERICALSURFACE::sf_quadrupole_yy[0]
   SPHERICALSURFACE::sf_quadrupole_yy[1]
   SPHERICALSURFACE::sf_quadrupole_yy[2]
   SPHERICALSURFACE::sf_quadrupole_yy[3]
   SPHERICALSURFACE::sf_quadrupole_yy[4]
   SPHERICALSURFACE::sf_quadrupole_yz[0]
   SPHERICALSURFACE::sf_quadrupole_yz[1]
   SPHERICALSURFACE::sf_quadrupole_yz[2]
   SPHERICALSURFACE::sf_quadrupole_yz[3]
   SPHERICALSURFACE::sf_quadrupole_yz[4]
   SPHERICALSURFACE::sf_quadrupole_zz[0]
   SPHERICALSURFACE::sf_quadrupole_zz[1]
   SPHERICALSURFACE::sf_quadrupole_zz[2]
   SPHERICALSURFACE::sf_quadrupole_zz[3]
   SPHERICALSURFACE::sf_quadrupole_zz[4]
   SPHERICALSURFACE::sf_min_radius[0]
   SPHERICALSURFACE::sf_min_radius[1]
   SPHERICALSURFACE::sf_min_radius[2]
   SPHERICALSURFACE::sf_min_radius[3]
   SPHERICALSURFACE::sf_min_radius[4]
   SPHERICALSURFACE::sf_max_radius[0]
   SPHERICALSURFACE::sf_max_radius[1]
   SPHERICALSURFACE::sf_max_radius[2]
   SPHERICALSURFACE::sf_max_radius[3]
   SPHERICALSURFACE::sf_max_radius[4]
   SPHERICALSURFACE::sf_min_x[0]
   SPHERICALSURFACE::sf_min_x[1]
   SPHERICALSURFACE::sf_min_x[2]
   SPHERICALSURFACE::sf_min_x[3]
   SPHERICALSURFACE::sf_min_x[4]
   SPHERICALSURFACE::sf_min_y[0]
   SPHERICALSURFACE::sf_min_y[1]
   SPHERICALSURFACE::sf_min_y[2]
   SPHERICALSURFACE::sf_min_y[3]
   SPHERICALSURFACE::sf_min_y[4]
   SPHERICALSURFACE::sf_min_z[0]
   SPHERICALSURFACE::sf_min_z[1]
   SPHERICALSURFACE::sf_min_z[2]
   SPHERICALSURFACE::sf_min_z[3]
   SPHERICALSURFACE::sf_min_z[4]
   SPHERICALSURFACE::sf_max_x[0]
   SPHERICALSURFACE::sf_max_x[1]
   SPHERICALSURFACE::sf_max_x[2]
   SPHERICALSURFACE::sf_max_x[3]
   SPHERICALSURFACE::sf_max_x[4]
   SPHERICALSURFACE::sf_max_y[0]
   SPHERICALSURFACE::sf_max_y[1]
   SPHERICALSURFACE::sf_max_y[2]
   SPHERICALSURFACE::sf_max_y[3]
   SPHERICALSURFACE::sf_max_y[4]
   SPHERICALSURFACE::sf_max_z[0]
   SPHERICALSURFACE::sf_max_z[1]
   SPHERICALSURFACE::sf_max_z[2]
   SPHERICALSURFACE::sf_max_z[3]
   SPHERICALSURFACE::sf_max_z[4]
   SPHERICALSURFACE::sf_radius[0]
   SPHERICALSURFACE::sf_radius[1]
   SPHERICALSURFACE::sf_radius[2]
   SPHERICALSURFACE::sf_radius[3]
   SPHERICALSURFACE::sf_radius[4]
   SPHERICALSURFACE::sf_origin_x[0]
   SPHERICALSURFACE::sf_origin_x[1]
   SPHERICALSURFACE::sf_origin_x[2]
   SPHERICALSURFACE::sf_origin_x[3]
   SPHERICALSURFACE::sf_origin_x[4]
   SPHERICALSURFACE::sf_origin_y[0]
   SPHERICALSURFACE::sf_origin_y[1]
   SPHERICALSURFACE::sf_origin_y[2]
   SPHERICALSURFACE::sf_origin_y[3]
   SPHERICALSURFACE::sf_origin_y[4]
   SPHERICALSURFACE::sf_origin_z[0]
   SPHERICALSURFACE::sf_origin_z[1]
   SPHERICALSURFACE::sf_origin_z[2]
   SPHERICALSURFACE::sf_origin_z[3]
   SPHERICALSURFACE::sf_origin_z[4]
   SPHERICALSURFACE::sf_origin_theta[0]
   SPHERICALSURFACE::sf_origin_theta[1]
   SPHERICALSURFACE::sf_origin_theta[2]
   SPHERICALSURFACE::sf_origin_theta[3]
   SPHERICALSURFACE::sf_origin_theta[4]
   SPHERICALSURFACE::sf_origin_phi[0]
   SPHERICALSURFACE::sf_origin_phi[1]
   SPHERICALSURFACE::sf_origin_phi[2]
   SPHERICALSURFACE::sf_origin_phi[3]
   SPHERICALSURFACE::sf_origin_phi[4]
   SPHERICALSURFACE::sf_delta_theta[0]
   SPHERICALSURFACE::sf_delta_theta[1]
   SPHERICALSURFACE::sf_delta_theta[2]
   SPHERICALSURFACE::sf_delta_theta[3]
   SPHERICALSURFACE::sf_delta_theta[4]
   SPHERICALSURFACE::sf_delta_phi[0]
   SPHERICALSURFACE::sf_delta_phi[1]
   SPHERICALSURFACE::sf_delta_phi[2]
   SPHERICALSURFACE::sf_delta_phi[3]
   SPHERICALSURFACE::sf_delta_phi[4]
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   ADMBASE::gxx
   ADMBASE::gxy
   ADMBASE::gxz
   ADMBASE::gyy
   ADMBASE::gyz
   ADMBASE::gzz
   ADMBASE::kxx
   ADMBASE::kxy
   ADMBASE::kxz
   ADMBASE::kyy
   ADMBASE::kyz
   ADMBASE::kzz
   ADMBASE::alp
   ADMBASE::betax
   ADMBASE::betay
   ADMBASE::betaz
   HYDROBASE::rho
   HYDROBASE::vel[0]
   HYDROBASE::vel[1]
   HYDROBASE::vel[2]
   ML_ADMCONSTRAINTS::H
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 1
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:10:
  -> Forcing ML_BSSN::initial_boundary_condition="extrapolate-gammas" because ML_BSSN::my_initial_boundary_condition="extrapolate-gammas"
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 1
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:25:
  -> Forcing ML_BSSN::rhs_boundary_condition="NewRad" because ML_BSSN::my_rhs_boundary_condition="NewRad"
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 1
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:45:
  -> Forcing ML_BSSN::epsDiss=0.0 because ML_BSSN::apply_dissipation="never"
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 1
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:114:
  -> Forcing ML_BSSN::advectLapse=1 because ML_BSSN::LapseAdvectionCoeff=1.0
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 1
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:132:
  -> Forcing ML_BSSN::advectShift=1 because ML_BSSN::ShiftAdvectionCoeff=1.0
Error: could not open /mnt/beegfs/home/mpirog/ET/2023_10_16/A/Cactus/arrangements/CactusSgrid/DNSdata/test/sgrid_id/BNSdata_properties.txt  (/home/runner/work/tests/tests/master/configs/sim/build/DNSdata/DNSdataReader.c, line 525)
--------------------------------------------------------------------------------
INFO (Formaline): Writing tarballs with the Cactus sources into the directory "CactusSgrid_test/cactus-source"
--------------------------------------------------------------------------
Primary job  terminated normally, but 1 process returned
a non-zero exit code. Per user-direction, the job has been aborted.
--------------------------------------------------------------------------
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 0
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:10:
  -> Forcing ML_BSSN::initial_boundary_condition="extrapolate-gammas" because ML_BSSN::my_initial_boundary_condition="extrapolate-gammas"
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 0
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:25:
  -> Forcing ML_BSSN::rhs_boundary_condition="NewRad" because ML_BSSN::my_rhs_boundary_condition="NewRad"
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 0
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:45:
  -> Forcing ML_BSSN::epsDiss=0.0 because ML_BSSN::apply_dissipation="never"
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 0
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:114:
  -> Forcing ML_BSSN::advectLapse=1 because ML_BSSN::LapseAdvectionCoeff=1.0
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 0
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:132:
  -> Forcing ML_BSSN::advectShift=1 because ML_BSSN::ShiftAdvectionCoeff=1.0
INFO (MoL): Using Runge-Kutta 4 as the time integrator.
INFO (SymBase): Symmetry on lower x-face: rotating_symmetry_180
INFO (SymBase): Symmetry on lower z-face: reflection_symmetry
INFO (MoL): The maximum number of evolved variables is 1208. 30 are registered.
INFO (MoL): The maximum number of slow evolved variables is 1208. 0 are registered.
INFO (MoL): The maximum number of constrained variables is 1208. 37 are registered.
INFO (MoL): The maximum number of SandR variables is 1208. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 1208. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 1208. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 1208. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (DNSdata): DNSdataPars: Reading pars for DNS initial data
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 0
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:10:
  -> Forcing ML_BSSN::initial_boundary_condition="extrapolate-gammas" because ML_BSSN::my_initial_boundary_condition="extrapolate-gammas"
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 0
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:25:
  -> Forcing ML_BSSN::rhs_boundary_condition="NewRad" because ML_BSSN::my_rhs_boundary_condition="NewRad"
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 0
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:45:
  -> Forcing ML_BSSN::epsDiss=0.0 because ML_BSSN::apply_dissipation="never"
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 0
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:114:
  -> Forcing ML_BSSN::advectLapse=1 because ML_BSSN::LapseAdvectionCoeff=1.0
WARNING level 1 from host fv-az1241-539.0oz2twoujq0evjbi1nv0kcjjgc.cx.internal.cloudapp.net process 0
  while executing schedule bin CCTK_WRAGH, routine ML_BSSN_Helper::ML_BSSN_ParamCompat
  in thorn ML_BSSN_Helper, file /home/runner/work/tests/tests/master/configs/sim/build/ML_BSSN_Helper/Parameters.c:132:
  -> Forcing ML_BSSN::advectShift=1 because ML_BSSN::ShiftAdvectionCoeff=1.0
Error: could not open /mnt/beegfs/home/mpirog/ET/2023_10_16/A/Cactus/arrangements/CactusSgrid/DNSdata/test/sgrid_id/BNSdata_properties.txt  (/home/runner/work/tests/tests/master/configs/sim/build/DNSdata/DNSdataReader.c, line 525)
--------------------------------------------------------------------------
mpirun detected that one or more processes exited with non-zero status, thus causing
the job to be terminated. The first process to do so was:

  Process name: [[17296,1],1]
  Exit code:    1
--------------------------------------------------------------------------
  Elapsed time: 3.2 s
