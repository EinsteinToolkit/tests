/home/runner/simulations/TestJob01_temp_1/output-0000/TEST/sim/ML_BSSN_Test
Preparing:
+ set -e
+ cd output-0000-active
+ echo Checking:
Checking:
+ pwd
/home/runner/simulations/TestJob01_temp_1/output-0000/TEST/sim/ML_BSSN_Test/output-0000-active
+ hostname
fv-az318-729
+ date
Tue Oct  4 20:39:18 UTC 2022
+ echo Environment:
Environment:
+ export CACTUS_NUM_PROCS=1
+ CACTUS_NUM_PROCS=1
+ export CACTUS_NUM_THREADS=2
+ CACTUS_NUM_THREADS=2
+ export GMON_OUT_PREFIX=gmon.out
+ GMON_OUT_PREFIX=gmon.out
+ export OMP_NUM_THREADS=2
+ OMP_NUM_THREADS=2
+ env
+ sort
+ echo Starting:
Starting:
++ date +%s
+ export CACTUS_STARTTIME=1664915958
+ CACTUS_STARTTIME=1664915958
+ '[' 1 = 1 ']'
+ '[' 0 -eq 0 ']'
+ /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim -L 3 /home/runner/simulations/TestJob01_temp_1/output-0000/arrangements/McLachlan/ML_BSSN_Test/test/ML_BSSN_MP_O8_bh.par
INFO (Cactus): Increased logging level from 0 to 3
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.12.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 
--------------------------------------------------------------------------------

Cactus version:    4.12.0
Compile date:      Oct 04 2022 (20:32:15)
Run date:          Oct 04 2022 (20:39:19+0000)
Run host:          fv-az318-729.ewvrrcgabbbubjc05i3n4a3pph.dx.internal.cloudapp.net (pid=101200)
Working directory: /home/runner/simulations/TestJob01_temp_1/output-0000/TEST/sim/ML_BSSN_Test
Executable:        /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim
Parameter file:    /home/runner/simulations/TestJob01_temp_1/output-0000/arrangements/McLachlan/ML_BSSN_Test/test/ML_BSSN_MP_O8_bh.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->CoordBase SymBase Boundary NanChecker CartGrid3d Time MoL CarpetIOBasic CarpetIOScalar IOUtil Carpet CarpetLib CarpetReduce CarpetInterp CarpetSlab CarpetIOASCII ADMBase StaticConformal SpaceMask Slab GenericFD CoordGauge LoopControl ML_BSSN ML_BSSN_Helper GenericFD TMuNuBase SphericalSurface ADMMacros Coordinates CarpetInterp2 Interpolate2 TimerReport IDAnalyticBH NewRad<---
Warning: thorn GenericFD already scheduled for activation
Thorn Carpet requests automatic activation of MPI
Thorn Carpet requests automatic activation of Timers
Thorn CarpetLib requests automatic activation of Vectors
Thorn CarpetLib requests automatic activation of CycleClock
Thorn Coordinates requests automatic activation of TensorTypes
Thorn Coordinates requests automatic activation of TGRtensor
Thorn Interpolate2 requests automatic activation of LAPACK
Thorn LoopControl requests automatic activation of hwloc
Thorn hwloc requests automatic activation of zlib
Thorn LAPACK requests automatic activation of BLAS
Activating thorn ADMBase...Success -> active implementation ADMBase
Activating thorn ADMMacros...Success -> active implementation ADMMacros
Activating thorn BLAS...Success -> active implementation BLAS
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetInterp...Success -> active implementation interp
Activating thorn CarpetInterp2...Success -> active implementation interp2
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetIOBasic...Success -> active implementation IOBasic
Activating thorn CarpetIOScalar...Success -> active implementation IOScalar
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CarpetSlab...Success -> active implementation Hyperslab
Activating thorn CartGrid3d...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn CoordGauge...Success -> active implementation CoordGauge
Activating thorn Coordinates...Success -> active implementation Coordinates
Activating thorn CycleClock...Success -> active implementation CycleClock
Activating thorn GenericFD...Success -> active implementation GenericFD
Activating thorn hwloc...Success -> active implementation hwloc
Activating thorn IDAnalyticBH...Success -> active implementation idanalyticbh
Activating thorn Interpolate2...Success -> active implementation Interpolate
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LAPACK...Success -> active implementation LAPACK
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn ML_BSSN...Success -> active implementation ML_BSSN
Activating thorn ML_BSSN_Helper...Success -> active implementation ML_BSSN_Helper
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn MPI...Success -> active implementation MPI
Activating thorn NanChecker...Success -> active implementation NaNChecker
Activating thorn NewRad...Success -> active implementation NewRad
Activating thorn Slab...Success -> active implementation Slab
Activating thorn SpaceMask...Success -> active implementation SpaceMask
Activating thorn SphericalSurface...Success -> active implementation SphericalSurface
Activating thorn StaticConformal...Success -> active implementation StaticConformal
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn TensorTypes...Success -> active implementation TensorTypes
Activating thorn TGRtensor...Success -> active implementation TGRtensor
Activating thorn Time...Success -> active implementation time
Activating thorn TimerReport...Success -> active implementation timerreport
Activating thorn Timers...Success -> active implementation Timers
Activating thorn TMuNuBase...Success -> active implementation TmunuBase
Activating thorn Vectors...Success -> active implementation Vectors
Activating thorn zlib...Success -> active implementation zlib
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      Coordinates::Coordinates_ChoosePatchSystem: [meta] Choose patch system
      CycleClock::CycleClock_Setup: Set up CycleClock
      LoopControl::LC_setup: Set up LoopControl
      ML_BSSN_Helper::ML_BSSN_SetGroupTags: [meta] Set checkpointing and prolongation group tags
      CarpetInterp::CarpetInterpStartup: Startup routine
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      Timers::Timer_Startup: Prepare hierarchical timers
      Carpet::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      ML_BSSN::ML_BSSN_Startup: [meta] create banner
      ML_BSSN_Helper::ML_BSSN_RegisterSlicing: [meta] Register slicing
      CarpetIOScalar::CarpetIOScalarStartup: [global] Startup routine
      MoL::MoL_Startup: Startup banner
      Slab::Slab_InitMPIDatatypes: Create MPI datatypes for complex variables in C
      SymBase::SymBase_Startup: Register GH Extension for SymBase
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      Vectors::Vectors_Startup: Print startup message
      GROUP hwloc_startup: hwloc startup group
        hwloc::hwloc_version: Output hwloc version

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      ADMBase::Einstein_InitSymBound: [global] Set up GF symmetries
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      CoordGauge::Einstein_ActivateSlicing: Initialize slicing, setup priorities for mixed slicings
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      ML_BSSN_Helper::ML_BSSN_ParamCompat: [meta] Handle parameter backward compatibility
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        ML_BSSN::ML_BSSN_RegisterVars: [meta] Register Variables for MoL
        ML_BSSN_Helper::ML_BSSN_RegisterConstrained: [meta] Register ADMBase variables as constrained
      Slab::Slab_InitTimers: Initialise timers
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::CartGrid3D_RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
          Coordinates::Coordinates_RegisterSymmetry: [meta] Register inter-patch boundaries as symmetries
          ML_BSSN::ML_BSSN_RegisterSymmetries: [meta] register symmetries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
  Parameter checking routines
    [CCTK_PARAMCHECK]
      ADMBase::ADMBase_ParamCheck: [global] Check consistency of parameters
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      Coordinates::Coordinates_ParamCheck: Check thorn parameters for consistency.
      IDAnalyticBH::IDAnalyticBH_ParamChecker: [global] Construct parameters for analytic black hole solutions
      ML_BSSN_Helper::ML_BSSN_ParamCheck: [meta] Check parameters
      MoL::MoL_ParamCheck: Basic parameter checking
      SphericalSurface::SphericalSurface_ParamCheck: [global] Check that all surface names are unique
      TmunuBase::TmunuBase_ParamCheck: [global] Check that no deprecated parameters are used.
      Vectors::Vectors_Test: Run correctness tests.

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MultiPatch_SpatialCoordinates: Determine the global coordinates of each gridpoint.
          Coordinates::Coordinates_SetGlobalCoords: [local] Determine the global coordinates of each gridpoint.
          Coordinates::Coordinates_SetJacobian: [local] Fill in the Jacobian matrices for Thornburg04 coordinates.
          Coordinates::Coordinates_SetVolumeForm: [local] Set weight mask (for Carpet reduction operators)
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
            ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
            GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
            ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
            GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::SpatialSpacings: [singlemap] Set up ranges for spatial 3D Cartesian coordinates (on all maps)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        GROUP MultiPatch_SpatialCoordinates: Determine the global coordinates of each gridpoint.
          Coordinates::Coordinates_SetGlobalCoords: [local] Determine the global coordinates of each gridpoint.
          Coordinates::Coordinates_SetJacobian: [local] Fill in the Jacobian matrices for Thornburg04 coordinates.
          Coordinates::Coordinates_SetVolumeForm: [local] Set weight mask (for Carpet reduction operators)
        Interpolate2::Interpolate2Init: Initialise interpolating inter-patch boundaries
        GROUP Interpolate2Test: Test interpolating inter-patch boundaries
          Interpolate2::Interpolate2TestInit: Test: Initialise test grid function
          Interpolate2::Interpolate2TestSelectBCs: [level] Test: Interpolate test grid function
          GROUP Interpolate2TestApplyBCs: Test: Interpolate test grid function
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          Interpolate2::Interpolate2TestCheck: Test: Check test grid function
        ML_BSSN::ML_BSSN_CheckBoundaries: [meta] check boundaries treatment
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set fixed timestep
      [CCTK_INITIAL]
        StaticConformal::StaticConformal_InitialiseState: Set the conformal_state variable to 0
        GROUP ADMBase_InitialData: Schedule group for calculating ADM initial data
          IDAnalyticBH::Schwarzschild: Construct initial data for a single Schwarzschild black hole
        GROUP ADMBase_InitialGauge: Schedule group for the ADM initial gauge condition
          ADMBase::ADMBase_LapseOne: Set the lapse to 1 at all points
          ADMBase::ADMBase_ShiftZero: Set the shift to 0 at all points
          ADMBase::ADMBase_DtLapseZero: Set the dtlapse to 0 at all points
          ADMBase::ADMBase_DtShiftZero: Set the dtshift to 0 at all points
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        GROUP ADMBase_PostInitial: Schedule group for modifying the ADM initial data, such as e.g. adding noise
        ML_BSSN::ML_BSSN_InitialADMBase1Everywhere: ML_BSSN_InitialADMBase1Everywhere
        ML_BSSN::ML_BSSN_InitialADMBase2Interior: ML_BSSN_InitialADMBase2Interior
        MoL::MoL_StartLoop: [level] Initialise the step size control
        ML_BSSN_Helper::ML_BSSN_ExtrapolateGammas: Extrapolate Gammas and time derivatives of lapse and shift
      [CCTK_POSTINITIAL]
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
          ML_BSSN::ML_BSSN_EnforceEverywhere: ML_BSSN_EnforceEverywhere
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
          ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
          ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
          ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP ML_BSSN_ConstraintsEverywhere_group: ML_BSSN_ConstraintsEverywhere
            ML_BSSN::ML_BSSN_ConstraintsEverywhere: ML_BSSN_ConstraintsEverywhere
            GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
              ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
              GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ConstraintsInterior_group: ML_BSSN_ConstraintsInterior
            ML_BSSN::ML_BSSN_ConstraintsInterior: ML_BSSN_ConstraintsInterior
            GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
              ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
              GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
          ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
          ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
          ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
            ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
            GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
            ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
            GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::SpatialSpacings: [singlemap] Set up ranges for spatial 3D Cartesian coordinates (on all maps)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        GROUP MultiPatch_SpatialCoordinates: Determine the global coordinates of each gridpoint.
          Coordinates::Coordinates_SetGlobalCoords: [local] Determine the global coordinates of each gridpoint.
          Coordinates::Coordinates_SetJacobian: [local] Fill in the Jacobian matrices for Thornburg04 coordinates.
          Coordinates::Coordinates_SetVolumeForm: [local] Set weight mask (for Carpet reduction operators)
        Interpolate2::Interpolate2Init: Initialise interpolating inter-patch boundaries
        GROUP Interpolate2Test: Test interpolating inter-patch boundaries
          Interpolate2::Interpolate2TestInit: Test: Initialise test grid function
          Interpolate2::Interpolate2TestSelectBCs: [level] Test: Interpolate test grid function
          GROUP Interpolate2TestApplyBCs: Test: Interpolate test grid function
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          Interpolate2::Interpolate2TestCheck: Test: Check test grid function
        ML_BSSN::ML_BSSN_CheckBoundaries: [meta] check boundaries treatment
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set fixed timestep
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
          ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
          ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
          ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
        GROUP ML_BSSN_EvolutionAnalysis: Calculate RHS at analysis
          ML_BSSN::ML_BSSN_EvolutionAnalysisInit: ML_BSSN_EvolutionAnalysisInit
          ML_BSSN::ML_BSSN_EvolutionAnalysisInterior: ML_BSSN_EvolutionAnalysisInterior
        TimerReport::zzz_TimerReport_Output: [global] Print the timer report
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MultiPatch_SpatialCoordinates: Determine the global coordinates of each gridpoint.
        Coordinates::Coordinates_SetGlobalCoords: [local] Determine the global coordinates of each gridpoint.
        Coordinates::Coordinates_SetJacobian: [local] Fill in the Jacobian matrices for Thornburg04 coordinates.
        Coordinates::Coordinates_SetVolumeForm: [local] Set weight mask (for Carpet reduction operators)
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
        ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
        ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
        ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
        GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
          ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
          GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
          ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
          GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      LoopControl::LC_steer: [meta] Update LoopControl algorithm preferences
      NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
            MoL::MoL_AllocateScratchSpace: [level] Allocate storage for scratch levels
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
          MoL::MoL_AllocateScratch: Allocate sufficient space for array scratch variables
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                ML_BSSN::ML_BSSN_EvolutionBoundaryScalar: ML_BSSN_EvolutionBoundaryScalar
                GROUP ML_BSSN_EvolutionInteriorSplitBy: 
                  ML_BSSN::ML_BSSN_EvolutionInteriorSplitBy1: ML_BSSN_EvolutionInteriorSplitBy1
                  ML_BSSN::ML_BSSN_EvolutionInteriorSplitBy2: ML_BSSN_EvolutionInteriorSplitBy2
                  ML_BSSN::ML_BSSN_EvolutionInteriorSplitBy3: ML_BSSN_EvolutionInteriorSplitBy3
              GROUP MoL_PostRHS: Modify RHS functions
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient Runge-Kutta 4 method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
                ML_BSSN::ML_BSSN_EnforceEverywhere: ML_BSSN_EnforceEverywhere
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
                GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
                ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
                ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
                ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
                GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
          MoL::MoL_FreeScratchSpace: [level] Free storage for scratch levels
      end while
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP ML_BSSN_ConstraintsEverywhere_group: ML_BSSN_ConstraintsEverywhere
          ML_BSSN::ML_BSSN_ConstraintsEverywhere: ML_BSSN_ConstraintsEverywhere
          GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
            ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
            GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsInterior_group: ML_BSSN_ConstraintsInterior
          ML_BSSN::ML_BSSN_ConstraintsInterior: ML_BSSN_ConstraintsInterior
          GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
            ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
            GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
        ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
        ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
        ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
        GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
          ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
          GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
          ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
          GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    [CCTK_POSTSTEP]
      GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
      NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
      SphericalSurface::SphericalSurface_Set: [global] Set surface radii
      GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
        SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
    if (checkpoint)
      [CCTK_CHECKPOINT]
      TimerReport::zzz_TimerReport_Checkpoint: [global] Print the timer report
    endif
    if (analysis)
      [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
      GROUP ML_BSSN_EvolutionAnalysis: Calculate RHS at analysis
        ML_BSSN::ML_BSSN_EvolutionAnalysisInit: ML_BSSN_EvolutionAnalysisInit
        ML_BSSN::ML_BSSN_EvolutionAnalysisInterior: ML_BSSN_EvolutionAnalysisInterior
      TimerReport::zzz_TimerReport_Output: [global] Print the timer report
    endif
    Output grid variables
    enddo

  Termination routines
    [CCTK_TERMINATE]
      LoopControl::LC_statistics_terminate: [meta] Output LoopControl statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays
      TimerReport::zzz_TimerReport_Output: [global] Print the timer report

  Shutdown routines
    [CCTK_SHUTDOWN]
      Timers::Timer_Shutdown: Prepare hierarchical timers

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MultiPatch_SpatialCoordinates: Determine the global coordinates of each gridpoint.
        Coordinates::Coordinates_SetGlobalCoords: [local] Determine the global coordinates of each gridpoint.
        Coordinates::Coordinates_SetJacobian: [local] Fill in the Jacobian matrices for Thornburg04 coordinates.
        Coordinates::Coordinates_SetVolumeForm: [local] Set weight mask (for Carpet reduction operators)
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
        ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
        ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
        ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
        GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
          ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
          GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
          ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
          GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Interpolate2::Interpolate2ApplyBC: [level] Apply interpolating inter-patch boundaries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   process 0: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
INFO (CarpetLib): Process startup time was 1.29 seconds
Current core file size limit: hard=[unlimited], soft=0 MB
Current addres space size limit: hard=[unlimited], soft=[unlimited]
Current data segment size limit: hard=[unlimited], soft=[unlimited]
Current resident set size limit: hard=[unlimited], soft=[unlimited]
INFO (CycleClock): Measuring CycleClock tick via OpenMP...
INFO (CycleClock): Calibrated CycleClock: 0.477302 ns per clock tick (2.09511 GHz)
INFO (Vectors): Using vector size 2 for architecture SSE2 (64-bit precision)
INFO (hwloc): library version 2.1.0, API version 0x20100
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------
ML_BSSN
--------------------------------------------------------------------------------
AMR scalar I/O provided by CarpetIOScalar
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 1 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 2 threads, this is thread 0
INFO (Carpet): There are 2 threads in total
INFO (Carpet): There are 2 threads per process
INFO (Carpet): This process runs on host fv-az318-729, pid=101200
INFO (Carpet): This process runs on 2 cores: 0-1
INFO (Carpet): Thread 0 runs on 2 cores: 0-1
INFO (Carpet): Thread 1 runs on 2 cores: 0-1
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): Boundary specification for map 0:
   nboundaryzones: [[5,5,5],[5,5,5]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[3,3,3],[3,3,3]]
INFO (Carpet): CoordBase domain specification for map 0:
   physical extent: [-0.6,-0.6,-0.6] : [0.6,0.6,0.6]   ([1.2,1.2,1.2])
   interior extent: [-0.72,-0.72,-0.72] : [0.72,0.72,0.72]   ([1.44,1.44,1.44])
   exterior extent: [-1.02,-1.02,-1.02] : [1.02,1.02,1.02]   ([2.04,2.04,2.04])
   base_spacing   : [0.06,0.06,0.06]
INFO (Carpet): Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-0.6,-0.6,-0.6] : [0.6,0.6,0.6]   ([1.2,1.2,1.2])
   interior extent   : [-0.72,-0.72,-0.72] : [0.72,0.72,0.72]   ([1.44,1.44,1.44])
   exterior extent   : [-1.02,-1.02,-1.02] : [1.02,1.02,1.02]   ([2.04,2.04,2.04])
   spacing           : [0.06,0.06,0.06]
INFO (Carpet): Base grid specification for map 0:
   number of grid points             : [35,35,35]
   number of coarse grid ghost points: [[5,5,5],[5,5,5]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Boundary specification for map 1:
   nboundaryzones: [[5,5,5],[5,5,5]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[3,3,3],[3,3,0]]
INFO (Carpet): CoordBase domain specification for map 1:
   physical extent: [-0.785398,-0.785398,0.6] : [0.785398,0.785398,1.8]   ([1.5708,1.5708,1.2])
   interior extent: [-1.09956,-1.09956,0.3] : [1.09956,1.09956,1.65]   ([2.19911,2.19911,1.35])
   exterior extent: [-1.88496,-1.88496,-0.45] : [1.88496,1.88496,2.4]   ([3.76991,3.76991,2.85])
   base_spacing   : [0.15708,0.15708,0.15]
INFO (Carpet): Adapted domain specification for map 1:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-0.785398,-0.785398,0.6] : [0.785398,0.785398,1.8]   ([1.5708,1.5708,1.2])
   interior extent   : [-1.09956,-1.09956,0.3] : [1.09956,1.09956,1.65]   ([2.19911,2.19911,1.35])
   exterior extent   : [-1.88496,-1.88496,-0.45] : [1.88496,1.88496,2.4]   ([3.76991,3.76991,2.85])
   spacing           : [0.15708,0.15708,0.15]
INFO (Carpet): Base grid specification for map 1:
   number of grid points             : [25,25,20]
   number of coarse grid ghost points: [[5,5,5],[5,5,5]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Boundary specification for map 2:
   nboundaryzones: [[5,5,5],[5,5,5]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[3,3,3],[3,3,0]]
INFO (Carpet): CoordBase domain specification for map 2:
   physical extent: [-0.785398,-0.785398,0.6] : [0.785398,0.785398,1.8]   ([1.5708,1.5708,1.2])
   interior extent: [-1.09956,-1.09956,0.3] : [1.09956,1.09956,1.65]   ([2.19911,2.19911,1.35])
   exterior extent: [-1.88496,-1.88496,-0.45] : [1.88496,1.88496,2.4]   ([3.76991,3.76991,2.85])
   base_spacing   : [0.15708,0.15708,0.15]
INFO (Carpet): Adapted domain specification for map 2:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-0.785398,-0.785398,0.6] : [0.785398,0.785398,1.8]   ([1.5708,1.5708,1.2])
   interior extent   : [-1.09956,-1.09956,0.3] : [1.09956,1.09956,1.65]   ([2.19911,2.19911,1.35])
   exterior extent   : [-1.88496,-1.88496,-0.45] : [1.88496,1.88496,2.4]   ([3.76991,3.76991,2.85])
   spacing           : [0.15708,0.15708,0.15]
INFO (Carpet): Base grid specification for map 2:
   number of grid points             : [25,25,20]
   number of coarse grid ghost points: [[5,5,5],[5,5,5]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Boundary specification for map 3:
   nboundaryzones: [[5,5,5],[5,5,5]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[3,3,3],[3,3,0]]
INFO (Carpet): CoordBase domain specification for map 3:
   physical extent: [-0.785398,-0.785398,0.6] : [0.785398,0.785398,1.8]   ([1.5708,1.5708,1.2])
   interior extent: [-1.09956,-1.09956,0.3] : [1.09956,1.09956,1.65]   ([2.19911,2.19911,1.35])
   exterior extent: [-1.88496,-1.88496,-0.45] : [1.88496,1.88496,2.4]   ([3.76991,3.76991,2.85])
   base_spacing   : [0.15708,0.15708,0.15]
INFO (Carpet): Adapted domain specification for map 3:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-0.785398,-0.785398,0.6] : [0.785398,0.785398,1.8]   ([1.5708,1.5708,1.2])
   interior extent   : [-1.09956,-1.09956,0.3] : [1.09956,1.09956,1.65]   ([2.19911,2.19911,1.35])
   exterior extent   : [-1.88496,-1.88496,-0.45] : [1.88496,1.88496,2.4]   ([3.76991,3.76991,2.85])
   spacing           : [0.15708,0.15708,0.15]
INFO (Carpet): Base grid specification for map 3:
   number of grid points             : [25,25,20]
   number of coarse grid ghost points: [[5,5,5],[5,5,5]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Boundary specification for map 4:
   nboundaryzones: [[5,5,5],[5,5,5]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[3,3,3],[3,3,0]]
INFO (Carpet): CoordBase domain specification for map 4:
   physical extent: [-0.785398,-0.785398,0.6] : [0.785398,0.785398,1.8]   ([1.5708,1.5708,1.2])
   interior extent: [-1.09956,-1.09956,0.3] : [1.09956,1.09956,1.65]   ([2.19911,2.19911,1.35])
   exterior extent: [-1.88496,-1.88496,-0.45] : [1.88496,1.88496,2.4]   ([3.76991,3.76991,2.85])
   base_spacing   : [0.15708,0.15708,0.15]
INFO (Carpet): Adapted domain specification for map 4:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-0.785398,-0.785398,0.6] : [0.785398,0.785398,1.8]   ([1.5708,1.5708,1.2])
   interior extent   : [-1.09956,-1.09956,0.3] : [1.09956,1.09956,1.65]   ([2.19911,2.19911,1.35])
   exterior extent   : [-1.88496,-1.88496,-0.45] : [1.88496,1.88496,2.4]   ([3.76991,3.76991,2.85])
   spacing           : [0.15708,0.15708,0.15]
INFO (Carpet): Base grid specification for map 4:
   number of grid points             : [25,25,20]
   number of coarse grid ghost points: [[5,5,5],[5,5,5]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Boundary specification for map 5:
   nboundaryzones: [[5,5,5],[5,5,5]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[3,3,3],[3,3,0]]
INFO (Carpet): CoordBase domain specification for map 5:
   physical extent: [-0.785398,-0.785398,0.6] : [0.785398,0.785398,1.8]   ([1.5708,1.5708,1.2])
   interior extent: [-1.09956,-1.09956,0.3] : [1.09956,1.09956,1.65]   ([2.19911,2.19911,1.35])
   exterior extent: [-1.88496,-1.88496,-0.45] : [1.88496,1.88496,2.4]   ([3.76991,3.76991,2.85])
   base_spacing   : [0.15708,0.15708,0.15]
INFO (Carpet): Adapted domain specification for map 5:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-0.785398,-0.785398,0.6] : [0.785398,0.785398,1.8]   ([1.5708,1.5708,1.2])
   interior extent   : [-1.09956,-1.09956,0.3] : [1.09956,1.09956,1.65]   ([2.19911,2.19911,1.35])
   exterior extent   : [-1.88496,-1.88496,-0.45] : [1.88496,1.88496,2.4]   ([3.76991,3.76991,2.85])
   spacing           : [0.15708,0.15708,0.15]
INFO (Carpet): Base grid specification for map 5:
   number of grid points             : [25,25,20]
   number of coarse grid ghost points: [[5,5,5],[5,5,5]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Boundary specification for map 6:
   nboundaryzones: [[5,5,5],[5,5,5]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[3,3,3],[3,3,0]]
INFO (Carpet): CoordBase domain specification for map 6:
   physical extent: [-0.785398,-0.785398,0.6] : [0.785398,0.785398,1.8]   ([1.5708,1.5708,1.2])
   interior extent: [-1.09956,-1.09956,0.3] : [1.09956,1.09956,1.65]   ([2.19911,2.19911,1.35])
   exterior extent: [-1.88496,-1.88496,-0.45] : [1.88496,1.88496,2.4]   ([3.76991,3.76991,2.85])
   base_spacing   : [0.15708,0.15708,0.15]
INFO (Carpet): Adapted domain specification for map 6:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-0.785398,-0.785398,0.6] : [0.785398,0.785398,1.8]   ([1.5708,1.5708,1.2])
   interior extent   : [-1.09956,-1.09956,0.3] : [1.09956,1.09956,1.65]   ([2.19911,2.19911,1.35])
   exterior extent   : [-1.88496,-1.88496,-0.45] : [1.88496,1.88496,2.4]   ([3.76991,3.76991,2.85])
   spacing           : [0.15708,0.15708,0.15]
INFO (Carpet): Base grid specification for map 6:
   number of grid points             : [25,25,20]
   number of coarse grid ghost points: [[5,5,5],[5,5,5]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 811 grid functions in 57 groups
INFO (Carpet):    There are 80 grid scalars in 41 groups
INFO (Carpet):    There are 11 1-dimensional grid arrays in 4 groups
INFO (Carpet):    There are 1 2-dimensional grid arrays in 2 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 0 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   ADMBASE::gxx
   ADMBASE::kxx
   ML_BSSN::phi
   ML_BSSN::gt11
   ML_BSSN::gt12
   ML_BSSN::gt13
   ML_BSSN::gt22
   ML_BSSN::gt23
   ML_BSSN::gt33
   ML_BSSN::Xt1
   ML_BSSN::Xt2
   ML_BSSN::Xt3
   ML_BSSN::trK
   ML_BSSN::At11
   ML_BSSN::At12
   ML_BSSN::At13
   ML_BSSN::At22
   ML_BSSN::At23
   ML_BSSN::At33
   ML_BSSN::alpha
   ML_BSSN::A
   ML_BSSN::beta1
   ML_BSSN::beta2
   ML_BSSN::beta3
   ML_BSSN::B1
   ML_BSSN::B2
   ML_BSSN::B3
   ML_BSSN::cS
   ML_BSSN::cXt1
   ML_BSSN::cXt2
   ML_BSSN::cXt3
   ML_BSSN::cA
   ML_BSSN::At11rhs
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (MoL): Using Runge-Kutta 4 as the time integrator.
INFO (SymBase): Symmetry on lower x-face: multipatch
INFO (SymBase): Symmetry on upper x-face: multipatch
INFO (SymBase): Symmetry on lower y-face: multipatch
INFO (SymBase): Symmetry on upper y-face: multipatch
INFO (SymBase): Symmetry on lower z-face: multipatch
INFO (SymBase): Symmetry on upper z-face: multipatch
INFO (MoL): The maximum number of evolved variables is 274. 25 are registered.
INFO (MoL): The maximum number of slow evolved variables is 274. 0 are registered.
INFO (MoL): The maximum number of constrained variables is 274. 20 are registered.
INFO (MoL): The maximum number of SandR variables is 274. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 274. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 274. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 274. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (IDAnalyticBH): Schwarzschild black hole
INFO (IDAnalyticBH):   throat at 0.500000
INFO (IDAnalyticBH): Implements non-conformal metric
INFO (IDAnalyticBH):   (Not usually a good idea!)
INFO (Vectors): Testing vectorisation... [errors may result in segfaults]
INFO (Vectors): 375/375 tests passed 
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>6.0000000e-02  dy=>6.0000000e-02  dz=>6.0000000e-02
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-1.020, 1.020]  y=>[-1.020, 1.020]  z=>[-1.020, 1.020]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,34]  y=>[0,34]  z=>[0,34]
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.5707963e-01  dy=>1.5707963e-01  dz=>1.5000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-1.885, 1.885]  y=>[-1.885, 1.885]  z=>[-0.450, 2.400]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,24]  y=>[0,24]  z=>[0,19]
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.5707963e-01  dy=>1.5707963e-01  dz=>1.5000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-1.885, 1.885]  y=>[-1.885, 1.885]  z=>[-0.450, 2.400]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,24]  y=>[0,24]  z=>[0,19]
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.5707963e-01  dy=>1.5707963e-01  dz=>1.5000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-1.885, 1.885]  y=>[-1.885, 1.885]  z=>[-0.450, 2.400]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,24]  y=>[0,24]  z=>[0,19]
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.5707963e-01  dy=>1.5707963e-01  dz=>1.5000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-1.885, 1.885]  y=>[-1.885, 1.885]  z=>[-0.450, 2.400]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,24]  y=>[0,24]  z=>[0,19]
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordReWARNING[L1,P0] (ML_BSSN): GetBoundaryWidths: Could not determine current map (can be caused by calling in LEVEL mode)
gisterRangePhysIndex: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.5707963e-01  dy=>1.5707963e-01  dz=>1.5000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-1.885, 1.885]  y=>[-1.885, 1.885]  z=>[-0.450, 2.400]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,24]  y=>[0,24]  z=>[0,19]
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRange: Range already registered for system 'cart3d'
WARNING[L3,P0] (Cactus): CCTK_CoordRegisterRangePhysIndex: Range already registered for system 'cart3d'
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.5707963e-01  dy=>1.5707963e-01  dz=>1.5000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-1.885, 1.885]  y=>[-1.885, 1.885]  z=>[-0.450, 2.400]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,24]  y=>[0,24]  z=>[0,19]
INFO (Coordinates): Setting up global coordinates for thornburg04.
INFO (Coordinates): Setting up global coordinates for thornburg04.
INFO (Coordinates): Setting up global coordinates for thornburg04.
INFO (Coordinates): Setting up global coordinates for thornburg04.
INFO (Coordinates): Setting up global coordinates for thornburg04.
INFO (Coordinates): Setting up global coordinates for thornburg04.
INFO (Coordinates): Setting up global coordinates for thornburg04.
INFO (Coordinates): Setting local coordinates: Thornburg04
INFO (Coordinates): Setting local coordinates: Thornburg04
INFO (Coordinates): Setting local coordinates: Thornburg04
INFO (Coordinates): Setting local coordinates: Thornburg04
INFO (Coordinates): Setting local coordinates: Thornburg04
INFO (Coordinates): Setting local coordinates: Thornburg04
INFO (Coordinates): Setting local coordinates: Thornburg04
INFO (Interpolate2): Setting up interpolation for level 0
INFO (IDAnalyticBH): setting up Schwarzschild initial
INFO (IDAnalyticBH): setting up Schwarzschild initial
INFO (IDAnalyticBH): setting up Schwarzschild initial
INFO (IDAnalyticBH): setting up Schwarzschild initial
INFO (IDAnalyticBH): setting up Schwarzschild initial
INFO (IDAnalyticBH): setting up Schwarzschild initial
INFO (IDAnalyticBH): setting up Schwarzschild initial
WARNING[L1,P0] (ML_BSSN): GetBoundaryWidths: Could not determine current map (can be caused by calling in LEVEL mode)
-----------------------------------------------
Iteration      Time |              ML_BSSN::phi
                    |      minimum      maximum
-----------------------------------------------
        0     0.000 |    0.0000040    0.6124764
        1     0.030 |    0.0000490    0.6124764
        2     0.060 |    0.0000923    0.6124764
INFO (TimerReport): Timer Report before terminating at iteration 2 time 0.06
INFO (TimerReport): Top timers at iteration 2 time 0.06
======================================================================
    %    Time/s   Min/s   Max/s   Timer (gettimeofday)
======================================================================
100.0   12.5015 12.5015 12.5015   meta mode/meta mode/global mode
100.0   12.4998 12.4998 12.4998   meta mode/meta mode/global mode/level(0)
 69.0    8.6269  8.6269  8.6269   main/Evolve
 64.9    8.1169  8.1169  8.1169   main/Evolve/CallEvol
 64.6    8.0777  8.0777  8.0777   main/Evolve/CallEvol/CCTK_EVOL
 64.6    8.0762  8.0762  8.0762   main/Evolve/CallEvol/CCTK_EVOL/CallFunction
 64.1    8.0161  8.0161  8.0161   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns
 57.7    7.2081  7.2081  7.2081   [0143] Interpolate2: Interpolate2ApplyBC in CCTK_EVOL
 57.7    7.2079  7.2079  7.2079   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/Interpolate2ApplyBC
 54.3    6.7913  6.7913  6.7913   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/Interpolate2ApplyBC/Interpolate
 31.1    3.8892  3.8892  3.8892   main/Initialise
 28.9    3.6117  3.6117  3.6117   main/Initialise/CallInitial
 18.5    2.3161  2.3161  2.3161   main/Initialise/CallInitial/CCTK_BASEGRID
 18.5    2.3155  2.3155  2.3155   main/Initialise/CallInitial/CCTK_BASEGRID/CallFunction
 18.5    2.3085  2.3085  2.3085   main/Initialise/CallInitial/CCTK_BASEGRID/CallFunction/thorns
 12.4    1.5553  1.5553  1.5553   [0066] Interpolate2: Interpolate2ApplyBC in CCTK_BASEGRID
 12.4    1.5553  1.5553  1.5553   main/Initialise/CallInitial/CCTK_BASEGRID/CallFunction/thorns/Interpolate2ApplyBC
  8.9    1.1123  1.1123  1.1123   main/Initialise/CallInitial/CCTK_POSTINITIAL
  8.9    1.1120  1.1120  1.1120   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction
  8.8    1.1061  1.1061  1.1061   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction/thorns
  8.5    1.0611  1.0611  1.0611   [0100] Interpolate2: Interpolate2ApplyBC in CCTK_POSTINITIAL
  8.5    1.0611  1.0611  1.0611   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction/thorns/Interpolate2ApplyBC
  7.8    0.9704  0.9704  0.9704   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction/thorns/Interpolate2ApplyBC/Interpolate
  5.6    0.7032  0.7032  0.7032   [0058] Coordinates: Coordinates_SetGlobalCoords in CCTK_BASEGRID
  5.6    0.7027  0.7027  0.7027   main/Initialise/CallInitial/CCTK_BASEGRID/CallFunction/thorns/Coordinates_SetGlobalCoords
  4.1    0.5126  0.5126  0.5126   [0111] NaNChecker: NaNChecker_NaNCheck_Check in CCTK_POSTSTEP
  4.1    0.5098  0.5098  0.5098   main/Evolve/CallAnalysis
  2.7    0.3405  0.3405  0.3405   main/Evolve/CallAnalysis/CCTK_POSTSTEP
  2.7    0.3405  0.3405  0.3405   main/Evolve/CallAnalysis/CCTK_POSTSTEP/CallFunction
  2.7    0.3390  0.3390  0.3390   main/Evolve/CallAnalysis/CCTK_POSTSTEP/CallFunction/thorns
  2.7    0.3388  0.3388  0.3388   main/Evolve/CallAnalysis/CCTK_POSTSTEP/CallFunction/thorns/NaNChecker_NaNCheck_Check
  1.6    0.2015  0.2015  0.2015   [0135] ML_BSSN: ML_BSSN_EvolutionInteriorSplitBy3 in CCTK_EVOL
  1.6    0.1975  0.1975  0.1975   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/ML_BSSN_EvolutionInteriorSplitBy3
  1.4    0.1726  0.1726  0.1726   main/Initialise/CallPostInitial
  1.4    0.1725  0.1725  0.1725   main/Initialise/CallPostInitial/CCTK_POSTSTEP
  1.4    0.1725  0.1725  0.1725   main/Initialise/CallPostInitial/CCTK_POSTSTEP/CallFunction
  1.4    0.1717  0.1717  0.1717   main/Initialise/CallPostInitial/CCTK_POSTSTEP/CallFunction/thorns
  1.4    0.1716  0.1716  0.1716   main/Initialise/CallPostInitial/CCTK_POSTSTEP/CallFunction/thorns/NaNChecker_NaNCheck_Check
  1.3    0.1671  0.1671  0.1671   [0134] ML_BSSN: ML_BSSN_EvolutionInteriorSplitBy2 in CCTK_EVOL
  1.3    0.1631  0.1631  0.1631   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/ML_BSSN_EvolutionInteriorSplitBy2
======================================================================
--------------------------------------------------------------------------------
Done.
+ echo Stopping:
Stopping:
+ date
Tue Oct  4 20:39:32 UTC 2022
+ echo Done.
Done.
  Elapsed time: 13.6 s
