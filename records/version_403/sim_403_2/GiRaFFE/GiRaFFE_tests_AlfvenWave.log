/home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/GiRaFFE
Preparing:
+ set -e
+ cd output-0000-active
+ echo Checking:
Checking:
+ pwd
/home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/GiRaFFE/output-0000-active
+ hostname
fv-az619-536
+ date
Wed Nov 23 17:48:55 UTC 2022
+ echo Environment:
Environment:
+ export CACTUS_NUM_PROCS=2
+ CACTUS_NUM_PROCS=2
+ export CACTUS_NUM_THREADS=1
+ CACTUS_NUM_THREADS=1
+ export GMON_OUT_PREFIX=gmon.out
+ GMON_OUT_PREFIX=gmon.out
+ export OMP_NUM_THREADS=1
+ OMP_NUM_THREADS=1
+ env
+ sort
+ echo Starting:
Starting:
++ date +%s
+ export CACTUS_STARTTIME=1669225735
+ CACTUS_STARTTIME=1669225735
+ '[' 2 = 1 ']'
+ mpirun -np 2 /home/runner/simulations/TestJob01_temp_2/SIMFACTORY/exe/cactus_sim -L 3 /home/runner/simulations/TestJob01_temp_2/output-0000/arrangements/WVUThorns/GiRaFFE/test/GiRaFFE_tests_AlfvenWave.par
INFO (Cactus): Increased logging level from 0 to 3
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.13.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 
--------------------------------------------------------------------------------

Cactus version:    4.13.0
Compile date:      Nov 23 2022 (17:28:20)
Run date:          Nov 23 2022 (17:48:56+0000)
Run host:          fv-az619-536.43rgpsa0huuuxoitdp0ch1dl0c.jx.internal.cloudapp.net (pid=113410)
Working directory: /home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/GiRaFFE
Executable:        /home/runner/simulations/TestJob01_temp_2/SIMFACTORY/exe/cactus_sim
Parameter file:    /home/runner/simulations/TestJob01_temp_2/output-0000/arrangements/WVUThorns/GiRaFFE/test/GiRaFFE_tests_AlfvenWave.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->ADMBase ADMMacros HydroBase InitBase StaticConformal TmunuBase SphericalSurface SummationByParts MoL CarpetIOASCII CarpetRegrid2 CarpetIOBasic CarpetReduce Time SymBase GiRaFFE ID_converter_GiRaFFE GiRaFFEfood<---
Thorn ADMBase requests automatic activation of CartGrid3D
Thorn CarpetIOASCII requests automatic activation of Carpet
Thorn CarpetIOASCII requests automatic activation of CarpetLib
Thorn CarpetIOASCII requests automatic activation of IOUtil
Thorn CarpetReduce requests automatic activation of MPI
Thorn CarpetReduce requests automatic activation of LoopControl
Thorn GiRaFFE requests automatic activation of Boundary
Thorn GiRaFFE requests automatic activation of SpaceMask
Thorn GiRaFFEfood requests automatic activation of ShiftedKerrSchild
Thorn GiRaFFEfood requests automatic activation of GSL
Thorn Carpet requests automatic activation of Timers
Thorn CarpetLib requests automatic activation of Vectors
Thorn CarpetLib requests automatic activation of CycleClock
Thorn CartGrid3D requests automatic activation of CoordBase
Thorn LoopControl requests automatic activation of hwloc
Thorn hwloc requests automatic activation of zlib
Activating thorn ADMBase...Success -> active implementation ADMBase
Activating thorn ADMMacros...Success -> active implementation ADMMacros
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetIOBasic...Success -> active implementation IOBasic
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CarpetRegrid2...Success -> active implementation CarpetRegrid2
Activating thorn CartGrid3D...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn CycleClock...Success -> active implementation CycleClock
Activating thorn GiRaFFE...Success -> active implementation GiRaFFE
Activating thorn GiRaFFEfood...Success -> active implementation GiRaFFEFood
Activating thorn GSL...Success -> active implementation GSL
Activating thorn hwloc...Success -> active implementation hwloc
Activating thorn HydroBase...Success -> active implementation HydroBase
Activating thorn ID_converter_GiRaFFE...Success -> active implementation ID_converter_GiRaFFE
Activating thorn InitBase...Success -> active implementation InitBase
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn MPI...Success -> active implementation MPI
Activating thorn ShiftedKerrSchild...Success -> active implementation ShiftedKerrSchild
Activating thorn SpaceMask...Success -> active implementation SpaceMask
Activating thorn SphericalSurface...Success -> active implementation SphericalSurface
Activating thorn StaticConformal...Success -> active implementation StaticConformal
Activating thorn SummationByParts...Success -> active implementation SummationByParts
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn Time...Success -> active implementation time
Activating thorn Timers...Success -> active implementation Timers
Activating thorn TmunuBase...Success -> active implementation TmunuBase
Activating thorn Vectors...Success -> active implementation Vectors
Activating thorn zlib...Success -> active implementation zlib
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CycleClock::CycleClock_Setup: Set up CycleClock
      LoopControl::LC_setup: Set up LoopControl
      Timers::Timer_Startup: Prepare hierarchical timers
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      Carpet::Driver_Startup: Startup routine
      HydroBase::HydroBase_StartUp: Startup banner
      IOUtil::IOUtil_Startup: Startup routine
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      MoL::MoL_Startup: Startup banner
      SymBase::SymBase_Startup: Register GH Extension for SymBase
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      Vectors::Vectors_Startup: Print startup message
      GROUP hwloc_startup: hwloc startup group
        hwloc::hwloc_version: Output hwloc version

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      ADMBase::Einstein_InitSymBound: [global] Set up GF symmetries
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CarpetRegrid2::CarpetRegrid2_Initialise: [global] Initialise locations of refined regions
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        GiRaFFE::GiRaFFE_RegisterVars: [meta] Register evolved, rhs variables in GiRaFFE for MoL
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::CartGrid3D_RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
  Parameter checking routines
    [CCTK_PARAMCHECK]
      ADMBase::ADMBase_ParamCheck: [global] Check consistency of parameters
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CarpetRegrid2::CarpetRegrid2_ParamCheck: Check parameters
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      GiRaFFEfood::GiRaFFEfood_CheckParameters: Check parameters
      MoL::MoL_ParamCheck: Basic parameter checking
      SphericalSurface::SphericalSurface_ParamCheck: [global] Check that all surface names are unique
      TmunuBase::TmunuBase_ParamCheck: [global] Check that no deprecated parameters are used.
      Vectors::Vectors_Test: Run correctness tests.

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        GiRaFFE::GiRaFFE_InitSymBound: Schedule symmetries
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SummationByParts::SBP_SetNormMask: Setup the mask for the calculation of the norm
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_INITIAL]
        StaticConformal::StaticConformal_InitialiseState: Set the conformal_state variable to 0
        GROUP ADMBase_InitialData: Schedule group for calculating ADM initial data
          ADMBase::ADMBase_CartesianMinkowski: Set the metric and extrinsic curvature to cartesian minkowski values
        GROUP ADMBase_InitialGauge: Schedule group for the ADM initial gauge condition
          ADMBase::ADMBase_LapseOne: Set the lapse to 1 at all points
          ADMBase::ADMBase_ShiftZero: Set the shift to 0 at all points
          ADMBase::ADMBase_DtLapseZero: Set the dtlapse to 0 at all points
          ADMBase::ADMBase_DtShiftZero: Set the dtshift to 0 at all points
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        GROUP HydroBase_Initial: HydroBase initial data group
          HydroBase::HydroBase_Zero: Set up vacuum hydro initial data
          HydroBase::HydroBase_Avec_zero: Set vector potential to 0
          HydroBase::HydroBase_Aphi_zero: Set vector potential Phi to 0
        GROUP ADMBase_PostInitial: Schedule group for modifying the ADM initial data, such as e.g. adding noise
        GROUP HydroBase_Prim2ConInitial: Recover the conservative variables from the primitive variables
        GROUP GiRaFFE_Initial: Schedule GiRaFFE functions in HydroBase_Initial
          GiRaFFEfood::GiRaFFEfood_Set_HydroBase_to_Zero: Set HydroBase quantities to zero, including velocity and magnetic potentials, before initialization.
          GiRaFFEfood::GiRaFFE_Food: Alfven 2D force free wave
        MoL::MoL_StartLoop: [level] Initialise the step size control
        GROUP GiRaFFE_ID_Converter: Translate ET-generated, HydroBase-compatible initial data and convert into variables used by GiRaFFE
          ID_converter_GiRaFFE::first_initialdata: [local] Convert HydroBase initial data (ID) to ID that GiRaFFE can read.
          ID_converter_GiRaFFE::third_initialdata: Schedule symmetries -- Actually just a placeholder function to ensure prolongation / processor syncs are done BEFORE the primitives solver.
          ID_converter_GiRaFFE::fourth_initialdata: Compute B and B_stagger from A
          ID_converter_GiRaFFE::fifth_initialdata: Applies the FFE condition B^2>E^2 and recomputes the velocities
      [CCTK_POSTINITIAL]
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
              GiRaFFE::GiRaFFE_InitSymBound: Schedule symmetries -- Actually just a placeholder function to ensure prolongations / processor syncs are done BEFORE outer boundaries are updated.
              GiRaFFE::GiRaFFE_outer_boundaries_on_A_mu: Apply linear extrapolation BCs on A_mu, so that BCs are flat on B^i.
              GiRaFFE::GiRaFFE_compute_B_and_Bstagger_from_A: Compute B and B_stagger from A
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GiRaFFE::GiRaFFE_conserv_to_prims_FFE: Applies the FFE condition B^2>E^2 and recomputes the velocities
              GiRaFFE::GiRaFFE_outer_boundaries_on_vx_vy_vz: Apply outflow-only, flat BCs on {vx,vy,vz}. Outflow only == velocities pointed inward from outer boundary are set to zero.
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        SummationByParts::SBP_CheckGridSizes: Check grid sizes and ghost zones
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
              GiRaFFE::GiRaFFE_InitSymBound: Schedule symmetries -- Actually just a placeholder function to ensure prolongations / processor syncs are done BEFORE outer boundaries are updated.
              GiRaFFE::GiRaFFE_outer_boundaries_on_A_mu: Apply linear extrapolation BCs on A_mu, so that BCs are flat on B^i.
              GiRaFFE::GiRaFFE_compute_B_and_Bstagger_from_A: Compute B and B_stagger from A
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GiRaFFE::GiRaFFE_conserv_to_prims_FFE: Applies the FFE condition B^2>E^2 and recomputes the velocities
              GiRaFFE::GiRaFFE_outer_boundaries_on_vx_vy_vz: Apply outflow-only, flat BCs on {vx,vy,vz}. Outflow only == velocities pointed inward from outer boundary are set to zero.
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_POSTPOSTINITIAL]
        GROUP GiRaFFE_PostPostInitial: HydroBase_Con2Prim in CCTK_POSTPOSTINITIAL sets conserv to prim then outer boundaries (OBs, which are technically disabled). The post OB SYNCs actually reprolongate the conservative variables, making cons and prims INCONSISTENT. So here we redo the con2prim, avoiding the SYNC afterward, then copy the result to other timelevels
          GiRaFFE::postid: Schedule symmetries -- Actually just a placeholder function to ensure prolongations / processor syncs are done BEFORE outer boundaries are updated.
          GiRaFFE::compute_b: Compute B and B_stagger from A SYNC: grmhd_primitives_Bi
          GiRaFFE::GiRaFFE_conserv_to_prims_FFE: Applies the FFE condition B^2>E^2 and recomputes the velocities
          GiRaFFE::mhdpostid: Compute post-initialdata quantities
        GROUP Con2Prim: Convert from conservative to primitive variables (might be redundant)
      [CCTK_POSTSTEP]
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        GiRaFFE::GiRaFFE_InitSymBound: Schedule symmetries
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SummationByParts::SBP_SetNormMask: Setup the mask for the calculation of the norm
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
              GiRaFFE::GiRaFFE_InitSymBound: Schedule symmetries -- Actually just a placeholder function to ensure prolongations / processor syncs are done BEFORE outer boundaries are updated.
              GiRaFFE::GiRaFFE_outer_boundaries_on_A_mu: Apply linear extrapolation BCs on A_mu, so that BCs are flat on B^i.
              GiRaFFE::GiRaFFE_compute_B_and_Bstagger_from_A: Compute B and B_stagger from A
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GiRaFFE::GiRaFFE_conserv_to_prims_FFE: Applies the FFE condition B^2>E^2 and recomputes the velocities
              GiRaFFE::GiRaFFE_outer_boundaries_on_vx_vy_vz: Apply outflow-only, flat BCs on {vx,vy,vz}. Outflow only == velocities pointed inward from outer boundary are set to zero.
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GiRaFFE::GiRaFFE_InitSymBound: Schedule symmetries -- Actually just a placeholder function to ensure prolongations / processor syncs are done BEFORE outer boundaries are updated.
            GiRaFFE::GiRaFFE_outer_boundaries_on_A_mu: Apply linear extrapolation BCs on A_mu, so that BCs are flat on B^i.
            GiRaFFE::GiRaFFE_compute_B_and_Bstagger_from_A: Compute B and B_stagger from A
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GiRaFFE::GiRaFFE_conserv_to_prims_FFE: Applies the FFE condition B^2>E^2 and recomputes the velocities
            GiRaFFE::GiRaFFE_outer_boundaries_on_vx_vy_vz: Apply outflow-only, flat BCs on {vx,vy,vz}. Outflow only == velocities pointed inward from outer boundary are set to zero.
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      ADMBase::ADMBase_LapseStatic: Copy the lapse to the current time level
      ADMBase::ADMBase_ShiftStatic: Copy the shift to the current time level
      ADMBase::ADMBase_Static: Copy the metric and extrinsic curvature to the current time level
      LoopControl::LC_steer: [meta] Update LoopControl algorithm preferences
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
            MoL::MoL_AllocateScratchSpace: [level] Allocate storage for scratch levels
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
          MoL::MoL_AllocateScratch: Allocate sufficient space for array scratch variables
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                GiRaFFE::GiRaFFE_RHS_eval: Evaluate RHSs of GRFFE equations
                GROUP HydroBase_RHS: Groups for scheduling tasks for calculating RHS of hydro variables
              GROUP MoL_PostRHS: Modify RHS functions
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient Runge-Kutta 4 method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
                GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
                GROUP HydroBase_PostStep: Post step tasks for hydro thorns
                  GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
                    GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                    GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                      GROUP BoundaryConditions: Execute all boundary conditions
                        Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                        CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                      Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                    GiRaFFE::GiRaFFE_InitSymBound: Schedule symmetries -- Actually just a placeholder function to ensure prolongations / processor syncs are done BEFORE outer boundaries are updated.
                    GiRaFFE::GiRaFFE_outer_boundaries_on_A_mu: Apply linear extrapolation BCs on A_mu, so that BCs are flat on B^i.
                    GiRaFFE::GiRaFFE_compute_B_and_Bstagger_from_A: Compute B and B_stagger from A
                  GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
                GROUP SetTmunu: Group for calculating the stress-energy tensor
                  TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
                  GROUP AddToTmunu: Add to the stress-energy tensor here
                    GiRaFFE::GiRaFFE_conserv_to_prims_FFE: Applies the FFE condition B^2>E^2 and recomputes the velocities
                    GiRaFFE::GiRaFFE_outer_boundaries_on_vx_vy_vz: Apply outflow-only, flat BCs on {vx,vy,vz}. Outflow only == velocities pointed inward from outer boundary are set to zero.
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
          MoL::MoL_FreeScratchSpace: [level] Free storage for scratch levels
      end while
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GiRaFFE::GiRaFFE_InitSymBound: Schedule symmetries -- Actually just a placeholder function to ensure prolongations / processor syncs are done BEFORE outer boundaries are updated.
            GiRaFFE::GiRaFFE_outer_boundaries_on_A_mu: Apply linear extrapolation BCs on A_mu, so that BCs are flat on B^i.
            GiRaFFE::GiRaFFE_compute_B_and_Bstagger_from_A: Compute B and B_stagger from A
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GiRaFFE::GiRaFFE_conserv_to_prims_FFE: Applies the FFE condition B^2>E^2 and recomputes the velocities
            GiRaFFE::GiRaFFE_outer_boundaries_on_vx_vy_vz: Apply outflow-only, flat BCs on {vx,vy,vz}. Outflow only == velocities pointed inward from outer boundary are set to zero.
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    [CCTK_POSTSTEP]
      SphericalSurface::SphericalSurface_Set: [global] Set surface radii
      GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
        SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
    if (checkpoint)
      [CCTK_CHECKPOINT]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
    endif
    Output grid variables
    enddo

  Termination routines
    [CCTK_TERMINATE]
      LoopControl::LC_statistics_terminate: [meta] Output LoopControl statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays

  Shutdown routines
    [CCTK_SHUTDOWN]
      Timers::Timer_Shutdown: Prepare hierarchical timers

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GiRaFFE::GiRaFFE_InitSymBound: Schedule symmetries -- Actually just a placeholder function to ensure prolongations / processor syncs are done BEFORE outer boundaries are updated.
            GiRaFFE::GiRaFFE_outer_boundaries_on_A_mu: Apply linear extrapolation BCs on A_mu, so that BCs are flat on B^i.
            GiRaFFE::GiRaFFE_compute_B_and_Bstagger_from_A: Compute B and B_stagger from A
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GiRaFFE::GiRaFFE_conserv_to_prims_FFE: Applies the FFE condition B^2>E^2 and recomputes the velocities
            GiRaFFE::GiRaFFE_outer_boundaries_on_vx_vy_vz: Apply outflow-only, flat BCs on {vx,vy,vz}. Outflow only == velocities pointed inward from outer boundary are set to zero.
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   processes 0-1: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
INFO (CarpetLib): Process startup time was 1.25 seconds
Current core file size limit: hard=[unlimited], soft=0 MB
Current addres space size limit: hard=[unlimited], soft=[unlimited]
Current data segment size limit: hard=[unlimited], soft=[unlimited]
Current resident set size limit: hard=[unlimited], soft=[unlimited]
INFO (CycleClock): Measuring CycleClock tick via OpenMP...
INFO (CycleClock): Calibrated CycleClock: 0.385487 ns per clock tick (2.59412 GHz)
INFO (Vectors): Using vector size 2 for architecture SSE2 (64-bit precision)
INFO (hwloc): library version 2.1.0, API version 0x20100
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
HydroBase: Let it flow.
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 2 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 1 threads, this is thread 0
INFO (Carpet): There are 2 threads in total
INFO (Carpet): There are 1 threads per process
INFO (Carpet): This process runs on host fv-az619-536, pid=113410
INFO (Carpet): This process runs on 1 core: 0
INFO (Carpet): Thread 0 runs on 1 core: 0
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): Boundary specification for map 0:
   nboundaryzones: [[3,3,3],[3,3,3]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[0,0,0],[0,0,0]]
INFO (Carpet): CoordBase domain specification for map 0:
   physical extent: [-1.5,-0.1,-0.1] : [1.5,0.1,0.1]   ([3,0.2,0.2])
   interior extent: [-1.475,-0.075,-0.075] : [1.475,0.075,0.075]   ([2.95,0.15,0.15])
   exterior extent: [-1.55,-0.15,-0.15] : [1.55,0.15,0.15]   ([3.1,0.3,0.3])
   base_spacing   : [0.025,0.025,0.025]
INFO (Carpet): Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-1.5,-0.1,-0.1] : [1.5,0.1,0.1]   ([3,0.2,0.2])
   interior extent   : [-1.475,-0.075,-0.075] : [1.475,0.075,0.075]   ([2.95,0.15,0.15])
   exterior extent   : [-1.55,-0.15,-0.15] : [1.55,0.15,0.15]   ([3.1,0.3,0.3])
   spacing           : [0.025,0.025,0.025]
INFO (Carpet): Base grid specification for map 0:
   number of grid points             : [125,13,13]
   number of coarse grid ghost points: [[3,3,3],[3,3,3]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 705 grid functions in 65 groups
INFO (Carpet):    There are 207 grid scalars in 38 groups
INFO (Carpet):    There are 81 1-dimensional grid arrays in 7 groups
INFO (Carpet):    There are 2 2-dimensional grid arrays in 2 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 0 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   GIRAFFE::Bz
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (MoL): Using Runge-Kutta 4 as the time integrator.
INFO (MoL): The maximum number of evolved variables is 493. 7 are registered.
INFO (MoL): The maximum number of slow evolved variables is 493. 0 are registered.
INFO (MoL): The maximum number of constrained variables is 493. 0 are registered.
INFO (MoL): The maximum number of SandR variables is 493. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 493. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 493. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 493. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (GiRaFFEfood): Setting Initial Data for GiRaFFE
INFO (GiRaFFEfood):  Feeding the GiRaFFE... with the Alfven Wave Solution
INFO (Vectors): Testing vectorisation... [errors may result in segfaults]
INFO (Vectors): 375/375 tests passed 
INFO (Carpet): Grid structure (superregions, grid points):
   [0][0][0]   exterior: [0,0,0] : [124,12,12]   ([125,13,13] + PADDING) 21125
INFO (Carpet): Grid structure (superregions, coordinates):
   [0][0][0]   exterior: [-1.55,-0.15,-0.15] : [1.55,0.15,0.15] : [0.025,0.025,0.025]
INFO (Carpet): Global grid structure statistics:
INFO (Carpet): GF: rhs: 6k active, 6k owned (+0%), 22k total (+280%), 1 steps/time
INFO (Carpet): GF: vars: 228, pts: 1M active, 1M owned (+0%), 5M total (+280%), 1.0 comp/proc
INFO (Carpet): GA: vars: 285, pts: 0M active, 0M total (+0%)
INFO (Carpet): Total required memory: 0.040 GByte (for GAs and currently active GFs)
INFO (Carpet): Load balance:  min     avg     max     sdv     max/avg-1
INFO (Carpet): Level  0:       1M      1M      1M      0M owned      1%
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>2.5000000e-02  dy=>2.5000000e-02  dz=>2.5000000e-02
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-1.550, 1.550]  y=>[-0.150, 0.150]  z=>[-0.150, 0.150]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,124]  y=>[0,12]  z=>[0,12]
INFO (GiRaFFE): Setting Symmetry = none... at iteration = 0
INFO (Time): Timestep set to 0.0125 (courant_static)
INFO (GiRaFFE): Setting Symmetry = none... at iteration = 0
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.181e-05, ErrDenom: 6.915e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): Setting Symmetry = none... at iteration = 0
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 6.705e-18, ErrDenom: 6.915e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): Setting Symmetry = none... at iteration = 0
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 2.870e-19, ErrDenom: 6.915e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
----------------------------------
Iteration      Time | *me_per_hour
                    |             
----------------------------------
        0     0.000 |    0.0000000
INFO (GiRaFFE): ***** Iter. # 1, Lev: 0, Integrating to time: 1.250000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.589e-05, ErrDenom: 6.916e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 1, Lev: 0, Integrating to time: 1.875000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.562e-05, ErrDenom: 6.916e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 1, Lev: 0, Integrating to time: 1.875000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.109e-04, ErrDenom: 6.917e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 1, Lev: 0, Integrating to time: 2.500000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.109e-04, ErrDenom: 6.917e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 2, Lev: 0, Integrating to time: 2.500000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.581e-05, ErrDenom: 6.921e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 2, Lev: 0, Integrating to time: 3.125000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.556e-05, ErrDenom: 6.921e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 2, Lev: 0, Integrating to time: 3.125000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.108e-04, ErrDenom: 6.922e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 2, Lev: 0, Integrating to time: 3.750000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.108e-04, ErrDenom: 6.922e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 3, Lev: 0, Integrating to time: 3.750000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.576e-05, ErrDenom: 6.927e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 3, Lev: 0, Integrating to time: 4.375000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.553e-05, ErrDenom: 6.927e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 3, Lev: 0, Integrating to time: 4.375000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.107e-04, ErrDenom: 6.928e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 3, Lev: 0, Integrating to time: 5.000000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.107e-04, ErrDenom: 6.928e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 4, Lev: 0, Integrating to time: 5.000000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.572e-05, ErrDenom: 6.932e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 4, Lev: 0, Integrating to time: 5.625000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.549e-05, ErrDenom: 6.932e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 4, Lev: 0, Integrating to time: 5.625000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.106e-04, ErrDenom: 6.933e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 4, Lev: 0, Integrating to time: 6.250000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.106e-04, ErrDenom: 6.933e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
        4     0.050 |  527.5374844
INFO (GiRaFFE): ***** Iter. # 5, Lev: 0, Integrating to time: 6.250000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.567e-05, ErrDenom: 6.938e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 5, Lev: 0, Integrating to time: 6.875000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.545e-05, ErrDenom: 6.938e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 5, Lev: 0, Integrating to time: 6.875000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.105e-04, ErrDenom: 6.938e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 5, Lev: 0, Integrating to time: 7.500000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.105e-04, ErrDenom: 6.938e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 6, Lev: 0, Integrating to time: 7.500000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.565e-05, ErrDenom: 6.943e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 6, Lev: 0, Integrating to time: 8.125000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.542e-05, ErrDenom: 6.943e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 6, Lev: 0, Integrating to time: 8.125000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.105e-04, ErrDenom: 6.944e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 6, Lev: 0, Integrating to time: 8.750000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.105e-04, ErrDenom: 6.944e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 7, Lev: 0, Integrating to time: 8.750000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.562e-05, ErrDenom: 6.948e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 7, Lev: 0, Integrating to time: 9.375000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.540e-05, ErrDenom: 6.948e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 7, Lev: 0, Integrating to time: 9.375000e-02 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.104e-04, ErrDenom: 6.949e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 7, Lev: 0, Integrating to time: 1.000000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.104e-04, ErrDenom: 6.949e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 8, Lev: 0, Integrating to time: 1.000000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.558e-05, ErrDenom: 6.954e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 8, Lev: 0, Integrating to time: 1.062500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.535e-05, ErrDenom: 6.954e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 8, Lev: 0, Integrating to time: 1.062500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.103e-04, ErrDenom: 6.955e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 8, Lev: 0, Integrating to time: 1.125000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.103e-04, ErrDenom: 6.955e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
        8     0.100 |  530.5305764
INFO (GiRaFFE): ***** Iter. # 9, Lev: 0, Integrating to time: 1.125000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.554e-05, ErrDenom: 6.959e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 9, Lev: 0, Integrating to time: 1.187500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.531e-05, ErrDenom: 6.959e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 9, Lev: 0, Integrating to time: 1.187500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.103e-04, ErrDenom: 6.960e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 9, Lev: 0, Integrating to time: 1.250000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.103e-04, ErrDenom: 6.960e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 10, Lev: 0, Integrating to time: 1.250000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.550e-05, ErrDenom: 6.965e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 10, Lev: 0, Integrating to time: 1.312500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.528e-05, ErrDenom: 6.965e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 10, Lev: 0, Integrating to time: 1.312500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.102e-04, ErrDenom: 6.965e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 10, Lev: 0, Integrating to time: 1.375000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.102e-04, ErrDenom: 6.965e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 11, Lev: 0, Integrating to time: 1.375000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.546e-05, ErrDenom: 6.970e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 11, Lev: 0, Integrating to time: 1.437500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.524e-05, ErrDenom: 6.970e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 11, Lev: 0, Integrating to time: 1.437500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.101e-04, ErrDenom: 6.971e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 11, Lev: 0, Integrating to time: 1.500000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.101e-04, ErrDenom: 6.971e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 12, Lev: 0, Integrating to time: 1.500000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.549e-05, ErrDenom: 6.975e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 12, Lev: 0, Integrating to time: 1.562500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.529e-05, ErrDenom: 6.975e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 12, Lev: 0, Integrating to time: 1.562500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.102e-04, ErrDenom: 6.976e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 12, Lev: 0, Integrating to time: 1.625000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.102e-04, ErrDenom: 6.976e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
       12     0.150 |  526.7558267
INFO (GiRaFFE): ***** Iter. # 13, Lev: 0, Integrating to time: 1.625000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.543e-05, ErrDenom: 6.981e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 13, Lev: 0, Integrating to time: 1.687500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.519e-05, ErrDenom: 6.981e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 13, Lev: 0, Integrating to time: 1.687500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.100e-04, ErrDenom: 6.982e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 13, Lev: 0, Integrating to time: 1.750000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.100e-04, ErrDenom: 6.982e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 14, Lev: 0, Integrating to time: 1.750000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.537e-05, ErrDenom: 6.986e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 14, Lev: 0, Integrating to time: 1.812500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.517e-05, ErrDenom: 6.986e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 14, Lev: 0, Integrating to time: 1.812500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.100e-04, ErrDenom: 6.987e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 14, Lev: 0, Integrating to time: 1.875000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.099e-04, ErrDenom: 6.987e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 15, Lev: 0, Integrating to time: 1.875000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.534e-05, ErrDenom: 6.992e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 15, Lev: 0, Integrating to time: 1.937500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.512e-05, ErrDenom: 6.992e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 15, Lev: 0, Integrating to time: 1.937500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.098e-04, ErrDenom: 6.992e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 15, Lev: 0, Integrating to time: 2.000000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.098e-04, ErrDenom: 6.992e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 16, Lev: 0, Integrating to time: 2.000000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.552e-05, ErrDenom: 6.997e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 16, Lev: 0, Integrating to time: 2.062500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 5.545e-05, ErrDenom: 6.997e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 16, Lev: 0, Integrating to time: 2.062500e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.102e-04, ErrDenom: 6.998e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
INFO (GiRaFFE): ***** Iter. # 16, Lev: 0, Integrating to time: 2.125000e-01 *****
INFO (GiRaFFE): FFEC2P: Lev: 0 NumPts= 11154 | Error: 1.102e-04, ErrDenom: 6.998e+03, v_limits: 0 / 11154 = 0.000e+00, v_nulls: 0 / 11154 = 0.000e+00
       16     0.200 |  527.2241626
--------------------------------------------------------------------------------
Done.
+ echo Stopping:
Stopping:
+ date
Wed Nov 23 17:48:57 UTC 2022
+ echo Done.
Done.
  Elapsed time: 2.5 s
