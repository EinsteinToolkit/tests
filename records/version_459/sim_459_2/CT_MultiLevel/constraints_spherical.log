/home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/CT_MultiLevel
Preparing:
+ set -e
+ cd output-0000-active
+ echo Checking:
Checking:
+ pwd
/home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/CT_MultiLevel/output-0000-active
+ hostname
fv-az748-504
+ date
Tue Dec  6 05:54:52 UTC 2022
+ echo Environment:
Environment:
+ export CACTUS_NUM_PROCS=2
+ CACTUS_NUM_PROCS=2
+ export CACTUS_NUM_THREADS=1
+ CACTUS_NUM_THREADS=1
+ export GMON_OUT_PREFIX=gmon.out
+ GMON_OUT_PREFIX=gmon.out
+ export OMP_NUM_THREADS=1
+ OMP_NUM_THREADS=1
+ env
+ sort
+ echo Starting:
Starting:
++ date +%s
+ export CACTUS_STARTTIME=1670306092
+ CACTUS_STARTTIME=1670306092
+ '[' 2 = 1 ']'
+ mpirun -np 2 /home/runner/simulations/TestJob01_temp_2/SIMFACTORY/exe/cactus_sim -L 3 /home/runner/simulations/TestJob01_temp_2/output-0000/arrangements/CTThorns/CT_MultiLevel/test/constraints_spherical.par
INFO (Cactus): Increased logging level from 0 to 3
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.13.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 
--------------------------------------------------------------------------------

Cactus version:    4.13.0
Compile date:      Dec 06 2022 (05:39:32)
Run date:          Dec 06 2022 (05:54:52+0000)
Run host:          fv-az748-504.4k5rsvd4cmqu5oxra434zmszlb.cx.internal.cloudapp.net (pid=106551)
Working directory: /home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/CT_MultiLevel
Executable:        /home/runner/simulations/TestJob01_temp_2/SIMFACTORY/exe/cactus_sim
Parameter file:    /home/runner/simulations/TestJob01_temp_2/output-0000/arrangements/CTThorns/CT_MultiLevel/test/constraints_spherical.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->Boundary CartGrid3D CoordBase Slab SymBase IOUtil Carpet CarpetLib CarpetInterp LoopControl CarpetReduce CarpetSlab CarpetRegrid2 AEILocalInterp Fortran GenericFD HDF5 InitBase LocalInterp MoL Time CT_MultiLevel CT_Analytic CoordGauge StaticConformal ADMMacros CarpetIOBasic CarpetIOScalar CarpetIOASCII CarpetIOHDF5<---
Thorn Carpet requests automatic activation of MPI
Thorn Carpet requests automatic activation of Timers
Thorn CarpetLib requests automatic activation of Vectors
Thorn CarpetLib requests automatic activation of CycleClock
Thorn HDF5 requests automatic activation of zlib
Thorn LoopControl requests automatic activation of hwloc
Activating thorn ADMMacros...Success -> active implementation ADMMacros
Activating thorn AEILocalInterp...Success -> active implementation AEILocalInterp
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetInterp...Success -> active implementation interp
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetIOBasic...Success -> active implementation IOBasic
Activating thorn CarpetIOHDF5...Success -> active implementation IOHDF5
Activating thorn CarpetIOScalar...Success -> active implementation IOScalar
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CarpetRegrid2...Success -> active implementation CarpetRegrid2
Activating thorn CarpetSlab...Success -> active implementation Hyperslab
Activating thorn CartGrid3D...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn CoordGauge...Success -> active implementation CoordGauge
Activating thorn CT_Analytic...Success -> active implementation CT_Analytic
Activating thorn CT_MultiLevel...Success -> active implementation CT_MultiLevel
Activating thorn CycleClock...Success -> active implementation CycleClock
Activating thorn Fortran...Success -> active implementation Fortran
Activating thorn GenericFD...Success -> active implementation GenericFD
Activating thorn HDF5...Success -> active implementation HDF5
Activating thorn hwloc...Success -> active implementation hwloc
Activating thorn InitBase...Success -> active implementation InitBase
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LocalInterp...Success -> active implementation LocalInterp
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn MPI...Success -> active implementation MPI
Activating thorn Slab...Success -> active implementation Slab
Activating thorn StaticConformal...Success -> active implementation StaticConformal
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn Time...Success -> active implementation time
Activating thorn Timers...Success -> active implementation Timers
Activating thorn Vectors...Success -> active implementation Vectors
Activating thorn zlib...Success -> active implementation zlib
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CT_Analytic::CT_Analytic_Startup: [meta] create banner
      CycleClock::CycleClock_Setup: Set up CycleClock
      LoopControl::LC_setup: Set up LoopControl
      Timers::Timer_Startup: Prepare hierarchical timers
      Carpet::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      CarpetIOScalar::CarpetIOScalarStartup: [global] Startup routine
      CarpetInterp::CarpetInterpStartup: Startup routine
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      AEILocalInterp::AEILocalInterp_U_Startup: register CCTK_InterpLocalUniform() interpolation operators
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      LocalInterp::LocalInterp_Startup: register LocalInterp's interpolation operators
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      MoL::MoL_Startup: Startup banner
      Slab::Slab_InitMPIDatatypes: Create MPI datatypes for complex variables in C
      SymBase::SymBase_Startup: Register GH Extension for SymBase
      CarpetIOHDF5::CarpetIOHDF5_Startup: Startup routine
      Vectors::Vectors_Startup: Print startup message
      GROUP hwloc_startup: hwloc startup group
        hwloc::hwloc_version: Output hwloc version

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CarpetRegrid2::CarpetRegrid2_Initialise: [global] Initialise locations of refined regions
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      CoordGauge::Einstein_ActivateSlicing: Initialize slicing, setup priorities for mixed slicings
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        CT_Analytic::CT_Analytic_RegisterVars: [meta] Register Variables for MoL
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
      Slab::Slab_InitTimers: Initialise timers
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CT_Analytic::CT_Analytic_RegisterSymmetries: [meta] register symmetries
          CartGrid3D::CartGrid3D_RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CarpetRegrid2::CarpetRegrid2_ParamCheck: Check parameters
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      Fortran::CheckFortranParameters: Test whether Fortran parameters work correctly
      MoL::MoL_ParamCheck: Basic parameter checking
      Vectors::Vectors_Test: Run correctness tests.

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_BASEGRID]
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CT_Analytic::CT_Analytic_CheckBoundaries: [meta] check boundaries treatment
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_INITIAL]
        CT_Analytic::CT_Analytic_Lump_Calc: CT_Analytic_Lump_Calc
        CT_Analytic::CT_Analytic_LumpBoundary: CT_Analytic_LumpBoundary
        CT_MultiLevel::CT_MultiLevel: [global] Main MultiLevel function
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOHDF5::CarpetIOHDF5_Init: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        MoL::MoL_StartLoop: [level] Initialise the step size control
        StaticConformal::StaticConformal_InitialiseState: Set the conformal_state variable to 0
      [CCTK_POSTINITIAL]
        CarpetIOHDF5::CarpetIOHDF5_CloseFiles: [global] Close all filereader input files
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          CT_Analytic::CT_Analytic_SelectBoundConds: [level] select boundary conditions
          GROUP CT_Analytic_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          CT_Analytic::CT_Analytic_SelectBoundConds: [level] select boundary conditions
          GROUP CT_Analytic_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CT_Analytic::CT_Analytic_CheckBoundaries: [meta] check boundaries treatment
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        CarpetIOHDF5::CarpetIOHDF5_InitCheckpointingIntervals: [global] Initialisation of checkpointing intervals after recovery
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          CT_Analytic::CT_Analytic_SelectBoundConds: [level] select boundary conditions
          GROUP CT_Analytic_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
        CarpetIOHDF5::CarpetIOHDF5_InitialDataCheckpoint: [meta] Initial data checkpoint routine
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        CT_Analytic::CT_Analytic_SelectBoundConds: [level] select boundary conditions
        GROUP CT_Analytic_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      LoopControl::LC_steer: [meta] Update LoopControl algorithm preferences
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
            MoL::MoL_AllocateScratchSpace: [level] Allocate storage for scratch levels
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
          MoL::MoL_AllocateScratch: Allocate sufficient space for array scratch variables
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
              GROUP MoL_PostRHS: Modify RHS functions
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient Runge-Kutta 4 method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                CT_Analytic::CT_Analytic_SelectBoundConds: [level] select boundary conditions
                GROUP CT_Analytic_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
          MoL::MoL_FreeScratchSpace: [level] Free storage for scratch levels
      end while
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        CT_Analytic::CT_Analytic_SelectBoundConds: [level] select boundary conditions
        GROUP CT_Analytic_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    [CCTK_POSTSTEP]
    if (checkpoint)
      [CCTK_CHECKPOINT]
      CarpetIOHDF5::CarpetIOHDF5_EvolutionCheckpoint: [meta] Evolution checkpoint routine
    endif
    if (analysis)
      [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
    endif
    Output grid variables
    enddo

  Termination routines
    [CCTK_TERMINATE]
      CarpetIOHDF5::CarpetIOHDF5_TerminationCheckpoint: [meta] Termination checkpoint routine
      LoopControl::LC_statistics_terminate: [meta] Output LoopControl statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays

  Shutdown routines
    [CCTK_SHUTDOWN]
      Timers::Timer_Shutdown: Prepare hierarchical timers

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        CT_Analytic::CT_Analytic_SelectBoundConds: [level] select boundary conditions
        GROUP CT_Analytic_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   processes 0-1: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
INFO (CarpetLib): Process startup time was 0.954 seconds
Current core file size limit: hard=[unlimited], soft=0 MB
Current addres space size limit: hard=[unlimited], soft=[unlimited]
Current data segment size limit: hard=[unlimited], soft=[unlimited]
Current resident set size limit: hard=[unlimited], soft=[unlimited]
INFO (CycleClock): Measuring CycleClock tick via OpenMP...
INFO (CycleClock): Calibrated CycleClock: 0.385514 ns per clock tick (2.59394 GHz)
INFO (Vectors): Using vector size 2 for architecture SSE2 (64-bit precision)
INFO (hwloc): library version 2.1.0, API version 0x20100
--------------------------------------------------------------------------------
CT_Analytic
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR scalar I/O provided by CarpetIOScalar
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------
AMR HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 0D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 1D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 2D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 3D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 2 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 1 threads, this is thread 0
INFO (Carpet): There are 2 threads in total
INFO (Carpet): There are 1 threads per process
INFO (Carpet): This process runs on host fv-az748-504, pid=106551
INFO (Carpet): This process runs on 1 core: 0
INFO (Carpet): Thread 0 runs on 1 core: 0
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): Boundary specification for map 0:
   nboundaryzones: [[3,3,3],[3,3,3]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[1,1,1],[1,1,1]]
INFO (Carpet): CoordBase domain specification for map 0:
   physical extent: [-1,-1,-1] : [1,1,1]   ([2,2,2])
   interior extent: [-1,-1,-1] : [1,1,1]   ([2,2,2])
   exterior extent: [-1.6,-1.6,-1.6] : [1.6,1.6,1.6]   ([3.2,3.2,3.2])
   base_spacing   : [0.2,0.2,0.2]
INFO (Carpet): Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-1,-1,-1] : [1,1,1]   ([2,2,2])
   interior extent   : [-1,-1,-1] : [1,1,1]   ([2,2,2])
   exterior extent   : [-1.6,-1.6,-1.6] : [1.6,1.6,1.6]   ([3.2,3.2,3.2])
   spacing           : [0.2,0.2,0.2]
INFO (Carpet): Base grid specification for map 0:
   number of grid points             : [17,17,17]
   number of coarse grid ghost points: [[3,3,3],[3,3,3]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[9,9,9],[9,9,9]]
   [2]: [[9,9,9],[9,9,9]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[0,0,0],[0,0,0]]
   [2]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 916 grid functions in 65 groups
INFO (Carpet):    There are 186 grid scalars in 35 groups
INFO (Carpet):    There are 81 1-dimensional grid arrays in 7 groups
INFO (Carpet):    There are 1 2-dimensional grid arrays in 1 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 0 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   CT_ANALYTIC::epsi
   CT_MULTILEVEL::ct_psi[0]
   CT_MULTILEVEL::ct_psi[1]
   CT_MULTILEVEL::ct_psi[2]
   CT_MULTILEVEL::ct_psi[3]
   CT_MULTILEVEL::ct_err[0]
   CT_MULTILEVEL::ct_err[1]
   CT_MULTILEVEL::ct_err[2]
   CT_MULTILEVEL::ct_err[3]
   CT_MULTILEVEL::ct_terr[0]
   CT_MULTILEVEL::ct_terr[1]
   CT_MULTILEVEL::ct_terr[2]
   CT_MULTILEVEL::ct_terr[3]
   CT_MULTILEVEL::ct_trunc[0]
   CT_MULTILEVEL::ct_trunc[1]
   CT_MULTILEVEL::ct_trunc[2]
   CT_MULTILEVEL::ct_trunc[3]
   CT_MULTILEVEL::ct_residual[0]
   CT_MULTILEVEL::ct_residual[1]
   CT_MULTILEVEL::ct_residual[2]
   CT_MULTILEVEL::ct_residual[3]
   CT_MULTILEVEL::ct_residual_above[0]
   CT_MULTILEVEL::ct_residual_above[1]
   CT_MULTILEVEL::ct_residual_above[2]
   CT_MULTILEVEL::ct_residual_above[3]
   CT_MULTILEVEL::ct_cxx[0]
   CT_MULTILEVEL::ct_cxx[1]
   CT_MULTILEVEL::ct_cxx[2]
   CT_MULTILEVEL::ct_cxx[3]
   CT_MULTILEVEL::ct_cxy[0]
   CT_MULTILEVEL::ct_cxy[1]
   CT_MULTILEVEL::ct_cxy[2]
   CT_MULTILEVEL::ct_cxy[3]
   CT_MULTILEVEL::ct_cxz[0]
   CT_MULTILEVEL::ct_cxz[1]
   CT_MULTILEVEL::ct_cxz[2]
   CT_MULTILEVEL::ct_cxz[3]
   CT_MULTILEVEL::ct_cyy[0]
   CT_MULTILEVEL::ct_cyy[1]
   CT_MULTILEVEL::ct_cyy[2]
   CT_MULTILEVEL::ct_cyy[3]
   CT_MULTILEVEL::ct_cyz[0]
   CT_MULTILEVEL::ct_cyz[1]
   CT_MULTILEVEL::ct_cyz[2]
   CT_MULTILEVEL::ct_cyz[3]
   CT_MULTILEVEL::ct_czz[0]
   CT_MULTILEVEL::ct_czz[1]
   CT_MULTILEVEL::ct_czz[2]
   CT_MULTILEVEL::ct_czz[3]
   CT_MULTILEVEL::ct_cx[0]
   CT_MULTILEVEL::ct_cx[1]
   CT_MULTILEVEL::ct_cx[2]
   CT_MULTILEVEL::ct_cx[3]
   CT_MULTILEVEL::ct_cy[0]
   CT_MULTILEVEL::ct_cy[1]
   CT_MULTILEVEL::ct_cy[2]
   CT_MULTILEVEL::ct_cy[3]
   CT_MULTILEVEL::ct_cz[0]
   CT_MULTILEVEL::ct_cz[1]
   CT_MULTILEVEL::ct_cz[2]
   CT_MULTILEVEL::ct_cz[3]
   CT_MULTILEVEL::ct_c0[0]
   CT_MULTILEVEL::ct_c0[1]
   CT_MULTILEVEL::ct_c0[2]
   CT_MULTILEVEL::ct_c0[3]
   CT_MULTILEVEL::ct_c1[0]
   CT_MULTILEVEL::ct_c1[1]
   CT_MULTILEVEL::ct_c1[2]
   CT_MULTILEVEL::ct_c1[3]
   CT_MULTILEVEL::ct_c2[0]
   CT_MULTILEVEL::ct_c2[1]
   CT_MULTILEVEL::ct_c2[2]
   CT_MULTILEVEL::ct_c2[3]
   CT_MULTILEVEL::ct_c3[0]
   CT_MULTILEVEL::ct_c3[1]
   CT_MULTILEVEL::ct_c3[2]
   CT_MULTILEVEL::ct_c3[3]
   CT_MULTILEVEL::ct_c4[0]
   CT_MULTILEVEL::ct_c4[1]
   CT_MULTILEVEL::ct_c4[2]
   CT_MULTILEVEL::ct_c4[3]
   CT_MULTILEVEL::ct_a0[0]
   CT_MULTILEVEL::ct_a0[1]
   CT_MULTILEVEL::ct_a0[2]
   CT_MULTILEVEL::ct_a0[3]
   CT_MULTILEVEL::ct_a1[0]
   CT_MULTILEVEL::ct_a1[1]
   CT_MULTILEVEL::ct_a1[2]
   CT_MULTILEVEL::ct_a1[3]
   CT_MULTILEVEL::ct_a2[0]
   CT_MULTILEVEL::ct_a2[1]
   CT_MULTILEVEL::ct_a2[2]
   CT_MULTILEVEL::ct_a2[3]
   CT_MULTILEVEL::ct_a3[0]
   CT_MULTILEVEL::ct_a3[1]
   CT_MULTILEVEL::ct_a3[2]
   CT_MULTILEVEL::ct_a3[3]
   CT_MULTILEVEL::ct_a4[0]
   CT_MULTILEVEL::ct_a4[1]
   CT_MULTILEVEL::ct_a4[2]
   CT_MULTILEVEL::ct_a4[3]
   CT_MULTILEVEL::ct_auxiliary[0]
   CT_MULTILEVEL::ct_auxiliary[1]
   CT_MULTILEVEL::ct_auxiliary[2]
   CT_MULTILEVEL::ct_auxiliary[3]
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5' registered: AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): Periodic AMR output requested for:
   CT_MULTILEVEL::ct_psi[0]
   CT_MULTILEVEL::ct_psi[1]
   CT_MULTILEVEL::ct_psi[2]
   CT_MULTILEVEL::ct_psi[3]
   CT_MULTILEVEL::ct_err[0]
   CT_MULTILEVEL::ct_err[1]
   CT_MULTILEVEL::ct_err[2]
   CT_MULTILEVEL::ct_err[3]
   CT_MULTILEVEL::ct_terr[0]
   CT_MULTILEVEL::ct_terr[1]
   CT_MULTILEVEL::ct_terr[2]
   CT_MULTILEVEL::ct_terr[3]
   CT_MULTILEVEL::ct_trunc[0]
   CT_MULTILEVEL::ct_trunc[1]
   CT_MULTILEVEL::ct_trunc[2]
   CT_MULTILEVEL::ct_trunc[3]
   CT_MULTILEVEL::ct_residual[0]
   CT_MULTILEVEL::ct_residual[1]
   CT_MULTILEVEL::ct_residual[2]
   CT_MULTILEVEL::ct_residual[3]
   CT_MULTILEVEL::ct_residual_above[0]
   CT_MULTILEVEL::ct_residual_above[1]
   CT_MULTILEVEL::ct_residual_above[2]
   CT_MULTILEVEL::ct_residual_above[3]
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_0D' registered: 0D AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_1D' registered: 1D AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_2D' registered: 2D AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_3D' registered: 3D AMR output of grid variables to HDF5 files
INFO (MoL): Using Runge-Kutta 4 as the time integrator.
INFO (MoL): The maximum number of evolved variables is 512. 0 are registered.
INFO (MoL): The maximum number of slow evolved variables is 512. 0 are registered.
INFO (MoL): The maximum number of constrained variables is 512. 0 are registered.
INFO (MoL): The maximum number of SandR variables is 512. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 512. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 512. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 512. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (Vectors): Testing vectorisation... [errors may result in segfaults]
INFO (Vectors): 375/375 tests passed 
INFO (CarpetRegrid2): Enforcing grid structure properties, iteration 0
INFO (CarpetRegrid2): Enforcing grid structure properties, iteration 1
INFO (CarpetRegrid2): Enforcing grid structure properties, iteration 0
INFO (CarpetRegrid2): Enforcing grid structure properties, iteration 1
INFO (Carpet): Grid structure (superregions, grid points):
   [0][0][0]   exterior: [0,0,0] : [16,16,16]   ([17,17,17] + PADDING) 4913
   [1][0][0]   exterior: [3,3,3] : [29,29,29]   ([27,27,27] + PADDING) 19683
   [2][0][0]   exterior: [9,9,9] : [55,55,55]   ([47,47,47] + PADDING) 103823
INFO (Carpet): Grid structure (superregions, coordinates):
   [0][0][0]   exterior: [-1.6,-1.6,-1.6] : [1.6,1.6,1.6] : [0.2,0.2,0.2]
   [1][0][0]   exterior: [-1.3,-1.3,-1.3] : [1.3,1.3,1.3] : [0.1,0.1,0.1]
   [2][0][0]   exterior: [-1.15,-1.15,-1.15] : [1.15,1.15,1.15] : [0.05,0.05,0.05]
INFO (Carpet): Global grid structure statistics:
INFO (Carpet): GF: rhs: 42k active, 42k owned (+0%), 75k total (+77%), 7 steps/time
INFO (Carpet): GF: vars: 478, pts: 38M active, 38M owned (+0%), 71M total (+86%), 1.0 comp/proc
INFO (Carpet): GA: vars: 263, pts: 0M active, 0M total (+0%)
INFO (Carpet): Total required memory: 0.565 GByte (for GAs and currently active GFs)
INFO (Carpet): Load balance:  min     avg     max     sdv     max/avg-1
INFO (Carpet): Level  0:       0M      0M      0M      0M owned      9%
INFO (Carpet): Level  1:       2M      2M      2M      0M owned      5%
INFO (Carpet): Level  2:      16M     16M     17M      0M owned      2%
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>2.0000000e-01  dy=>2.0000000e-01  dz=>2.0000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-1.600, 1.600]  y=>[-1.600, 1.600]  z=>[-1.600, 1.600]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,16]  y=>[0,16]  z=>[0,16]
INFO (Time): Timestep set to 0.04 (courant_static)
INFO (Time): Timestep set to 0.02 (courant_static)
INFO (Time): Timestep set to 0.01 (courant_static)
INFO (CT_MultiLevel): === Level 0 ===
INFO (CT_MultiLevel):  * Equation #0: 50 iterations, norm of final residual = 1.8885673151e-02
INFO (CT_MultiLevel):  * Equation #1: 50 iterations, norm of final residual = 1.7860144688e-05
INFO (CT_MultiLevel):  * Equation #2: 50 iterations, norm of final residual = 1.9229409247e-05
INFO (CT_MultiLevel):  * Equation #3: 50 iterations, norm of final residual = 2.0019263666e-05
INFO (CT_MultiLevel): === Level 1 ===
INFO (CT_MultiLevel):  * Equation #0: 10 iterations, norm of final residual = 1.9439511223e-02
INFO (CT_MultiLevel):  * Equation #1: 10 iterations, norm of final residual = 5.3667639195e-04
INFO (CT_MultiLevel):  * Equation #2: 10 iterations, norm of final residual = 5.3399367188e-04
INFO (CT_MultiLevel):  * Equation #3: 10 iterations, norm of final residual = 4.6127911822e-04
INFO (CT_MultiLevel): === Level 0 ===
INFO (CT_MultiLevel):  * Equation #0: 50 iterations, norm of final residual = 1.8311831687e-04
INFO (CT_MultiLevel):  * Equation #1: 50 iterations, norm of final residual = 3.8199651951e-08
INFO (CT_MultiLevel):  * Equation #2: 50 iterations, norm of final residual = 5.5738903904e-08
INFO (CT_MultiLevel):  * Equation #3: 50 iterations, norm of final residual = 8.0556356114e-08
INFO (CT_MultiLevel): === Level 1 ===
INFO (CT_MultiLevel):  * Equation #0: 10 iterations, norm of final residual = 3.0654870427e-03
INFO (CT_MultiLevel):  * Equation #1: 10 iterations, norm of final residual = 3.3549774202e-05
INFO (CT_MultiLevel):  * Equation #2: 10 iterations, norm of final residual = 3.3161767719e-05
INFO (CT_MultiLevel):  * Equation #3: 10 iterations, norm of final residual = 3.6763901471e-05
INFO (CT_MultiLevel): === Level 2 ===
INFO (CT_MultiLevel):  * Equation #0: 10 iterations, norm of final residual = 3.0360615897e-03
INFO (CT_MultiLevel):  * Equation #1: 10 iterations, norm of final residual = 8.1255883111e-04
INFO (CT_MultiLevel):  * Equation #2: 10 iterations, norm of final residual = 8.1281392640e-04
INFO (CT_MultiLevel):  * Equation #3: 10 iterations, norm of final residual = 7.9330137922e-04
INFO (CT_MultiLevel): === Level 1 ===
INFO (CT_MultiLevel):  * Equation #0: 50 iterations, norm of final residual = 3.6928039232e-04
INFO (CT_MultiLevel):  * Equation #1: 50 iterations, norm of final residual = 5.8284372089e-06
INFO (CT_MultiLevel):  * Equation #2: 50 iterations, norm of final residual = 5.8384108217e-06
INFO (CT_MultiLevel):  * Equation #3: 50 iterations, norm of final residual = 4.6316016583e-06
INFO (CT_MultiLevel): === Level 0 ===
INFO (CT_MultiLevel):  * Equation #0: 50 iterations, norm of final residual = 3.8298313337e-06
INFO (CT_MultiLevel):  * Equation #1: 50 iterations, norm of final residual = 3.6249956097e-08
INFO (CT_MultiLevel):  * Equation #2: 50 iterations, norm of final residual = 3.4309295166e-08
INFO (CT_MultiLevel):  * Equation #3: 50 iterations, norm of final residual = 2.3367895829e-08
INFO (CT_MultiLevel): === Level 1 ===
INFO (CT_MultiLevel):  * Equation #0: 50 iterations, norm of final residual = 9.4604693930e-05
INFO (CT_MultiLevel):  * Equation #1: 50 iterations, norm of final residual = 7.8525997430e-07
INFO (CT_MultiLevel):  * Equation #2: 50 iterations, norm of final residual = 7.4607677189e-07
INFO (CT_MultiLevel):  * Equation #3: 50 iterations, norm of final residual = 5.1106136974e-07
INFO (CT_MultiLevel): === Level 2 ===
INFO (CT_MultiLevel):  * Equation #0: 10 iterations, norm of final residual = 5.9417010327e-04
INFO (CT_MultiLevel):  * Equation #1: 10 iterations, norm of final residual = 8.2781205530e-05
INFO (CT_MultiLevel):  * Equation #2: 10 iterations, norm of final residual = 8.0471111576e-05
INFO (CT_MultiLevel):  * Equation #3: 10 iterations, norm of final residual = 8.5336056519e-05
----------------------------------------------------------------------------------------------
Iteration      Time | *:ct_terr[0] | *:ct_terr[1] | *residual[0] | *residual[1] | *me_per_hour
                    |        norm2 |        norm2 |        norm2 |        norm2 |             
----------------------------------------------------------------------------------------------
        0     0.000 |    0.0000279 |    0.0000187 |    0.0007487 |    0.0001364 |    0.0000000
--------------------------------------------------------------------------------
Done.
+ echo Stopping:
Stopping:
+ date
Tue Dec  6 05:55:05 UTC 2022
+ echo Done.
Done.
  Elapsed time: 13.3 s
