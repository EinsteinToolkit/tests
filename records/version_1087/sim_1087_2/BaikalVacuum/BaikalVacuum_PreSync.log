/home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/BaikalVacuum
Preparing:
+ set -e
+ cd output-0000-active
+ echo Checking:
Checking:
+ pwd
/home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/BaikalVacuum/output-0000-active
+ hostname
fv-az1433-314
+ date
Sun Jan  5 23:22:46 UTC 2025
+ echo Environment:
Environment:
+ export CACTUS_NUM_PROCS=2
+ CACTUS_NUM_PROCS=2
+ export CACTUS_NUM_THREADS=1
+ CACTUS_NUM_THREADS=1
+ export GMON_OUT_PREFIX=gmon.out
+ GMON_OUT_PREFIX=gmon.out
+ export OMP_NUM_THREADS=1
+ OMP_NUM_THREADS=1
+ env
+ sort
+ echo Starting:
Starting:
++ date +%s
+ export CACTUS_STARTTIME=1736119366
+ CACTUS_STARTTIME=1736119366
+ '[' 2 = 1 ']'
+ mpirun -np 2 /home/runner/simulations/TestJob01_temp_2/SIMFACTORY/exe/cactus_sim -L 3 /home/runner/simulations/TestJob01_temp_2/output-0000/arrangements/WVUThorns/BaikalVacuum/test/BaikalVacuum_PreSync.par
INFO (Cactus): Increased logging level from 0 to 3
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.17.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 
--------------------------------------------------------------------------------

Cactus version:    4.17.0
Compile date:      Jan 05 2025 (23:07:05)
Run date:          Jan 05 2025 (23:22:46+0000)
Run host:          fv-az1433-314.ucltxrqff54ehluxo0gmudw5wg.bx.internal.cloudapp.net (pid=135248)
Working directory: /home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/BaikalVacuum
Executable:        /home/runner/simulations/TestJob01_temp_2/SIMFACTORY/exe/cactus_sim
Parameter file:    /home/runner/simulations/TestJob01_temp_2/output-0000/arrangements/WVUThorns/BaikalVacuum/test/BaikalVacuum_PreSync.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->CoordBase SymBase Boundary NanChecker CartGrid3d Time MoL CarpetIOBasic CarpetIOScalar IOUtil Carpet CarpetLib CarpetReduce CarpetInterp CarpetIOASCII ADMBase StaticConformal SpaceMask ShiftedGaugeWave GenericFD CoordGauge LoopControl BaikalVacuum SphericalSurface ADMMacros TimerReport NewRad<---
Thorn Carpet requests automatic activation of MPI
Thorn Carpet requests automatic activation of Timers
Thorn CarpetLib requests automatic activation of Vectors
Thorn CarpetLib requests automatic activation of CycleClock
Thorn LoopControl requests automatic activation of hwloc
Thorn hwloc requests automatic activation of zlib
Activating thorn ADMBase...Success -> active implementation ADMBase
Activating thorn ADMMacros...Success -> active implementation ADMMacros
Activating thorn BaikalVacuum...Success -> active implementation BaikalVacuum
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetInterp...Success -> active implementation interp
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetIOBasic...Success -> active implementation IOBasic
Activating thorn CarpetIOScalar...Success -> active implementation IOScalar
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CartGrid3d...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn CoordGauge...Success -> active implementation CoordGauge
Activating thorn CycleClock...Success -> active implementation CycleClock
Activating thorn GenericFD...Success -> active implementation GenericFD
Activating thorn hwloc...Success -> active implementation hwloc
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn MPI...Success -> active implementation MPI
Activating thorn NanChecker...Success -> active implementation NaNChecker
Activating thorn NewRad...Success -> active implementation NewRad
Activating thorn ShiftedGaugeWave...Success -> active implementation ShiftedGaugeWave
Activating thorn SpaceMask...Success -> active implementation SpaceMask
Activating thorn SphericalSurface...Success -> active implementation SphericalSurface
Activating thorn StaticConformal...Success -> active implementation StaticConformal
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn Time...Success -> active implementation time
Activating thorn TimerReport...Success -> active implementation timerreport
Activating thorn Timers...Success -> active implementation Timers
Activating thorn Vectors...Success -> active implementation Vectors
Activating thorn zlib...Success -> active implementation zlib
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      BaikalVacuum::BaikalVacuum_RegisterSlicing: [meta] Register 3+1 slicing condition
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CycleClock::CycleClock_Setup: Set up CycleClock
      LoopControl::LC_setup: Set up LoopControl
      Timers::Timer_Startup: Prepare hierarchical timers
      Carpet::Driver_Startup: Startup routine
      CarpetInterp::CarpetInterpStartup: Startup routine
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      IOUtil::IOUtil_Startup: Startup routine
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      CarpetIOScalar::CarpetIOScalarStartup: [global] Startup routine
      MoL::MoL_Startup: Startup banner
      ShiftedGaugeWave::ShiftedGaugeWave_Startup: [meta] create banner
      SymBase::SymBase_Startup: Register GH Extension for SymBase
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      Vectors::Vectors_Startup: Print startup message
      GROUP hwloc_startup: hwloc startup group
        hwloc::hwloc_version: Output hwloc version

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      ADMBase::Einstein_InitSymBound: [global] Set up GF symmetries
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      GROUP Driver_BoundarySelect: Group for functions which select BCs for variables and groups.
        BaikalVacuum::BaikalVacuum_specify_Driver_BoundaryConditions: [meta] Register boundary conditions in PreSync bin Driver_BoundarySelect.
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      CoordGauge::Einstein_ActivateSlicing: Initialize slicing, setup priorities for mixed slicings
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        BaikalVacuum::BaikalVacuum_MoL_registration: [meta] Register variables for MoL
        ShiftedGaugeWave::ShiftedGaugeWave_RegisterVars: [meta] Register Variables for MoL
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::CartGrid3D_RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
          ShiftedGaugeWave::ShiftedGaugeWave_RegisterSymmetries: [meta] register symmetries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
      ADMBase::ADMBase_ParamCheck: [global] Check consistency of parameters
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      MoL::MoL_ParamCheck: Basic parameter checking
      ShiftedGaugeWave::ShiftedGaugeWave_ParamCheck: [global] Check parameter consistency
      SphericalSurface::SphericalSurface_ParamCheck: [global] Check that all surface names are unique
      Vectors::Vectors_Test: Run correctness tests.

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        BaikalVacuum::Symmetry_registration: [global] Register symmetries, the CartGrid3D way.
        BaikalVacuum::BaikalVacuum_zero_rhss: Idea from Lean: set all rhs functions to zero to prevent spurious nans
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        ShiftedGaugeWave::ShiftedGaugeWave_CheckBoundaries: [meta] check boundaries treatment
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_INITIAL]
        StaticConformal::StaticConformal_InitialiseState: Set the conformal_state variable to 0
        GROUP ADMBase_InitialData: Schedule group for calculating ADM initial data
          ShiftedGaugeWave::ShiftedGaugeWave_initial: ShiftedGaugeWave_initial
        GROUP ADMBase_InitialGauge: Schedule group for the ADM initial gauge condition
        GROUP ADMBase_PostInitial: Schedule group for modifying the ADM initial data, such as e.g. adding noise
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        MoL::MoL_StartLoop: [level] Initialise the step size control
        BaikalVacuum::BaikalVacuum_ADM_to_BSSN_order_8: Convert initial data into BSSN variables
      [CCTK_POSTINITIAL]
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          BaikalVacuum::BaikalVacuum_specify_evol_BoundaryConditions: [level] Register boundary conditions and perform AMR+interprocessor synchronization
          GROUP BaikalVacuum_evol_ApplyBCs: Apply registered boundary conditions
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          BaikalVacuum::BaikalVacuum_floor_the_lapse: Set lapse = max(lapse_floor, lapse)
          BaikalVacuum::BaikalVacuum_enforce_detgammahat_constraint: Enforce detgammabar = detgammahat (= 1 in Cartesian)
          BaikalVacuum::BaikalVacuum_BSSN_to_ADM: Perform BSSN-to-ADM conversion. Useful for diagnostics.
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          ShiftedGaugeWave::ShiftedGaugeWave_SelectBoundConds: [level] select boundary conditions
          GROUP ShiftedGaugeWave_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          BaikalVacuum::BaikalVacuum_BSSN_constraints: Compute BSSN (Hamiltonian and momentum) constraints, at finite-differencing order 8
          BaikalVacuum::BaikalVacuum_specify_aux_BoundaryConditions: [level] Register boundary conditions and perform AMR+interprocessor synchronization
          GROUP BaikalVacuum_aux_ApplyBCs: Apply registered boundary conditions
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          BaikalVacuum::BaikalVacuum_specify_evol_BoundaryConditions: [level] Register boundary conditions and perform AMR+interprocessor synchronization
          GROUP BaikalVacuum_evol_ApplyBCs: Apply registered boundary conditions
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          BaikalVacuum::BaikalVacuum_floor_the_lapse: Set lapse = max(lapse_floor, lapse)
          BaikalVacuum::BaikalVacuum_enforce_detgammahat_constraint: Enforce detgammabar = detgammahat (= 1 in Cartesian)
          BaikalVacuum::BaikalVacuum_BSSN_to_ADM: Perform BSSN-to-ADM conversion. Useful for diagnostics.
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          ShiftedGaugeWave::ShiftedGaugeWave_SelectBoundConds: [level] select boundary conditions
          GROUP ShiftedGaugeWave_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        BaikalVacuum::Symmetry_registration: [global] Register symmetries, the CartGrid3D way.
        BaikalVacuum::BaikalVacuum_zero_rhss: Idea from Lean: set all rhs functions to zero to prevent spurious nans
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        ShiftedGaugeWave::ShiftedGaugeWave_CheckBoundaries: [meta] check boundaries treatment
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          BaikalVacuum::BaikalVacuum_specify_evol_BoundaryConditions: [level] Register boundary conditions and perform AMR+interprocessor synchronization
          GROUP BaikalVacuum_evol_ApplyBCs: Apply registered boundary conditions
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          BaikalVacuum::BaikalVacuum_floor_the_lapse: Set lapse = max(lapse_floor, lapse)
          BaikalVacuum::BaikalVacuum_enforce_detgammahat_constraint: Enforce detgammabar = detgammahat (= 1 in Cartesian)
          BaikalVacuum::BaikalVacuum_BSSN_to_ADM: Perform BSSN-to-ADM conversion. Useful for diagnostics.
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          ShiftedGaugeWave::ShiftedGaugeWave_SelectBoundConds: [level] select boundary conditions
          GROUP ShiftedGaugeWave_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
        TimerReport::zzz_TimerReport_Output: [global] Print the timer report
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        BaikalVacuum::BaikalVacuum_specify_evol_BoundaryConditions: [level] Register boundary conditions and perform AMR+interprocessor synchronization
        GROUP BaikalVacuum_evol_ApplyBCs: Apply registered boundary conditions
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        BaikalVacuum::BaikalVacuum_floor_the_lapse: Set lapse = max(lapse_floor, lapse)
        BaikalVacuum::BaikalVacuum_enforce_detgammahat_constraint: Enforce detgammabar = detgammahat (= 1 in Cartesian)
        BaikalVacuum::BaikalVacuum_BSSN_to_ADM: Perform BSSN-to-ADM conversion. Useful for diagnostics.
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        ShiftedGaugeWave::ShiftedGaugeWave_SelectBoundConds: [level] select boundary conditions
        GROUP ShiftedGaugeWave_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      LoopControl::LC_steer: [meta] Update LoopControl algorithm preferences
      NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
            MoL::MoL_AllocateScratchSpace: [level] Allocate storage for scratch levels
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
          MoL::MoL_AllocateScratch: Allocate sufficient space for array scratch variables
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          MoL::MoL_UpdateValidForInitialCopy: Automatically update valid regions based on MoL
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                BaikalVacuum::BaikalVacuum_Ricci: Compute Ricci tensor, needed for BSSN RHSs, at finite-differencing order 8
                BaikalVacuum::BaikalVacuum_RHS: Evaluate BSSN RHSs, at finite-differencing order 8
                BaikalVacuum::BaikalVacuum_specify_NewRad_BoundaryConditions_parameters: NewRad boundary conditions, scheduled right after RHS eval.
              GROUP MoL_PostRHS: Modify RHS functions
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient Runge-Kutta 4 method
              MoL::MoL_UpdateValidForAdd: Automatically update valid regions based on MoL
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                BaikalVacuum::BaikalVacuum_specify_evol_BoundaryConditions: [level] Register boundary conditions and perform AMR+interprocessor synchronization
                GROUP BaikalVacuum_evol_ApplyBCs: Apply registered boundary conditions
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                BaikalVacuum::BaikalVacuum_floor_the_lapse: Set lapse = max(lapse_floor, lapse)
                BaikalVacuum::BaikalVacuum_enforce_detgammahat_constraint: Enforce detgammabar = detgammahat (= 1 in Cartesian)
                BaikalVacuum::BaikalVacuum_BSSN_to_ADM: Perform BSSN-to-ADM conversion. Useful for diagnostics.
                GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
                ShiftedGaugeWave::ShiftedGaugeWave_SelectBoundConds: [level] select boundary conditions
                GROUP ShiftedGaugeWave_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
          MoL::MoL_FreeScratchSpace: [level] Free storage for scratch levels
      end while
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        BaikalVacuum::BaikalVacuum_BSSN_constraints: Compute BSSN (Hamiltonian and momentum) constraints, at finite-differencing order 8
        BaikalVacuum::BaikalVacuum_specify_aux_BoundaryConditions: [level] Register boundary conditions and perform AMR+interprocessor synchronization
        GROUP BaikalVacuum_aux_ApplyBCs: Apply registered boundary conditions
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        BaikalVacuum::BaikalVacuum_specify_evol_BoundaryConditions: [level] Register boundary conditions and perform AMR+interprocessor synchronization
        GROUP BaikalVacuum_evol_ApplyBCs: Apply registered boundary conditions
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        BaikalVacuum::BaikalVacuum_floor_the_lapse: Set lapse = max(lapse_floor, lapse)
        BaikalVacuum::BaikalVacuum_enforce_detgammahat_constraint: Enforce detgammabar = detgammahat (= 1 in Cartesian)
        BaikalVacuum::BaikalVacuum_BSSN_to_ADM: Perform BSSN-to-ADM conversion. Useful for diagnostics.
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        ShiftedGaugeWave::ShiftedGaugeWave_SelectBoundConds: [level] select boundary conditions
        GROUP ShiftedGaugeWave_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    [CCTK_POSTSTEP]
      GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
      NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
      SphericalSurface::SphericalSurface_Set: [global] Set surface radii
      GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
        SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
    if (checkpoint)
      [CCTK_CHECKPOINT]
      TimerReport::zzz_TimerReport_Checkpoint: [global] Print the timer report
    endif
    if (analysis)
      [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
      TimerReport::zzz_TimerReport_Output: [global] Print the timer report
    endif
    Output grid variables
    enddo

  Termination routines
    [CCTK_TERMINATE]
      LoopControl::LC_statistics_terminate: [meta] Output LoopControl statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays
      TimerReport::zzz_TimerReport_Output: [global] Print the timer report

  Shutdown routines
    [CCTK_SHUTDOWN]
      Timers::Timer_Shutdown: Prepare hierarchical timers

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        BaikalVacuum::BaikalVacuum_specify_evol_BoundaryConditions: [level] Register boundary conditions and perform AMR+interprocessor synchronization
        GROUP BaikalVacuum_evol_ApplyBCs: Apply registered boundary conditions
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        BaikalVacuum::BaikalVacuum_floor_the_lapse: Set lapse = max(lapse_floor, lapse)
        BaikalVacuum::BaikalVacuum_enforce_detgammahat_constraint: Enforce detgammabar = detgammahat (= 1 in Cartesian)
        BaikalVacuum::BaikalVacuum_BSSN_to_ADM: Perform BSSN-to-ADM conversion. Useful for diagnostics.
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        ShiftedGaugeWave::ShiftedGaugeWave_SelectBoundConds: [level] select boundary conditions
        GROUP ShiftedGaugeWave_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   processes 0-1: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
INFO (CarpetLib): Process startup time was 0.972 seconds
Current core file size limit: hard=[unlimited], soft=0 MB
Current addres space size limit: hard=[unlimited], soft=[unlimited]
Current data segment size limit: hard=[unlimited], soft=[unlimited]
Current resident set size limit: hard=[unlimited], soft=[unlimited]
INFO (CycleClock): Measuring CycleClock tick via OpenMP...
INFO (CycleClock): Calibrated CycleClock: 0.40892 ns per clock tick (2.44547 GHz)
INFO (Vectors): Using vector size 2 for architecture SSE2 (64-bit precision)
INFO (hwloc): library version 2.7.0, API version 0x20500
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR scalar I/O provided by CarpetIOScalar
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------
ShiftedGaugeWave
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 2 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 1 threads, this is thread 0
INFO (Carpet): There are 2 threads in total
INFO (Carpet): There are 1 threads per process
INFO (Carpet): This process runs on host fv-az1433-314, pid=135248
INFO (Carpet): This process runs on 2 cores: 0-1
INFO (Carpet): Thread 0 runs on 2 cores: 0-1
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): Boundary specification for map 0:
   nboundaryzones: [[5,5,5],[5,5,5]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[0,0,0],[0,0,0]]
INFO (Carpet): CoordBase domain specification for map 0:
   physical extent: [-1,-1,-1] : [1,1,1]   ([2,2,2])
   interior extent: [-0.9,-0.9,-0.9] : [0.9,0.9,0.9]   ([1.8,1.8,1.8])
   exterior extent: [-1.4,-1.4,-1.4] : [1.4,1.4,1.4]   ([2.8,2.8,2.8])
   base_spacing   : [0.1,0.1,0.1]
INFO (Carpet): Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-1,-1,-1] : [1,1,1]   ([2,2,2])
   interior extent   : [-0.9,-0.9,-0.9] : [0.9,0.9,0.9]   ([1.8,1.8,1.8])
   exterior extent   : [-1.4,-1.4,-1.4] : [1.4,1.4,1.4]   ([2.8,2.8,2.8])
   spacing           : [0.1,0.1,0.1]
INFO (Carpet): Base grid specification for map 0:
   number of grid points             : [29,29,29]
   number of coarse grid ghost points: [[5,5,5],[5,5,5]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 643 grid functions in 35 groups
INFO (Carpet):    There are 73 grid scalars in 34 groups
INFO (Carpet):    There are 11 1-dimensional grid arrays in 4 groups
INFO (Carpet):    There are 1 2-dimensional grid arrays in 2 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 0 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   ADMBASE::gxx
   ADMBASE::kxx
   ADMBASE::alp
   ADMBASE::betax
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (MoL): Using Runge-Kutta 4 as the time integrator.
INFO (MoL): The maximum number of evolved variables is 238. 24 are registered.
INFO (MoL): The maximum number of slow evolved variables is 238. 0 are registered.
INFO (MoL): The maximum number of constrained variables is 238. 0 are registered.
INFO (MoL): The maximum number of SandR variables is 238. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 238. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 238. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 238. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (Vectors): Testing vectorisation... [errors may result in segfaults]
INFO (Vectors): 375/375 tests passed 
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.0000000e-01  dy=>1.0000000e-01  dz=>1.0000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-1.400, 1.400]  y=>[-1.400, 1.400]  z=>[-1.400, 1.400]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,28]  y=>[0,28]  z=>[0,28]
INFO (Time): Timestep set to 0.05 (courant_static)
-----------------------------------------------
Iteration      Time |              ADMBASE::alp
                    |      minimum      maximum
-----------------------------------------------
        0     0.000 |    0.9555909    1.0512380
        1     0.050 |    0.8947049    1.1116126
        2     0.100 |    0.8581579    1.1458758
        3     0.150 |    0.8382122    1.1600707
        4     0.200 |    0.7917777    1.1758882
        5     0.250 |    0.7210166    1.1750568
        6     0.300 |    0.6646395    1.1645005
        7     0.350 |    0.6612363    1.1335794
        8     0.400 |    0.7372837    1.1282999
INFO (TimerReport): Timer Report before terminating at iteration 8 time 0.4
INFO (TimerReport): Top timers at iteration 8 time 0.4
======================================================================
    %    Time/s   Min/s   Max/s   Timer (gettimeofday)
======================================================================
100.0   1.15215 1.15197 1.15232   meta mode/meta mode/global mode
 99.6   1.14797 1.14651 1.14943   meta mode/meta mode/global mode/level(0)
 96.1   1.10724 1.10723 1.10725   main/Evolve
 95.3   1.09795 1.09695 1.09894   main/Evolve/CallEvol
 94.3   1.08664 1.08628 1.08700   main/Evolve/CallEvol/CCTK_EVOL
 94.1   1.08395 1.08333 1.08457   main/Evolve/CallEvol/CCTK_EVOL/CallFunction
 80.2   0.92438 0.80396 1.04479   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns
 31.2   0.35996 0.29510 0.42483   [0108] BaikalVacuum: BaikalVacuum_specify_NewRad_BoundaryConditions_parameters in CCTK_EVOL
 31.2   0.35897 0.29423 0.42371   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/BaikalVacuum_specify_NewRad_BoundaryConditions_parameters
 22.3   0.25718 0.20905 0.30531   [0107] BaikalVacuum: BaikalVacuum_RHS in CCTK_EVOL
 22.2   0.25621 0.20820 0.30421   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/BaikalVacuum_RHS
 13.1   0.15075 0.11776 0.18373   [0106] BaikalVacuum: BaikalVacuum_Ricci in CCTK_EVOL
 13.0   0.14981 0.11693 0.18269   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/BaikalVacuum_Ricci
 13.0   0.14953 0.02713 0.27192   [0117] BaikalVacuum: BaikalVacuum_floor_the_lapse in CCTK_EVOL
 12.5   0.14407 0.02106 0.26707   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/Sync
 11.4   0.13115 0.00321 0.25908   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/Sync/comm_state[6].state_do_some_work.step
  8.7   0.10002 0.10001 0.10003   [0002] CycleClock: CycleClock_Setup in CCTK_STARTUP
  4.9   0.05701 0.01067 0.10334   [0119] BaikalVacuum: BaikalVacuum_BSSN_to_ADM in CCTK_EVOL
  4.9   0.05606 0.00962 0.10251   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/BaikalVacuum_BSSN_to_ADM
  4.6   0.05256 0.04189 0.06323   [0125] BaikalVacuum: BaikalVacuum_BSSN_constraints in CCTK_EVOL
  4.5   0.05234 0.04170 0.06298   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/BaikalVacuum_BSSN_constraints
  4.3   0.04905 0.04903 0.04907   main/Initialise
  4.2   0.04860 0.04859 0.04861   main/CarpetStartup
  4.1   0.04706 0.04683 0.04728   main/CarpetStartup/CarpetLib::gh::regrid
  4.1   0.04689 0.04664 0.04713   main/CarpetStartup/CarpetLib::gh::regrid/CarpetLib::dh::regrid
  3.8   0.04401 0.04390 0.04412   main/Initialise/CallInitial
  2.0   0.02289 0.01528 0.03051   [0109] MoL: MoL_Add in CCTK_EVOL
  1.9   0.02193 0.01445 0.02942   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/MoL_Add
  1.6   0.01829 0.01590 0.02068   main/Initialise/CallInitial/CCTK_INITIAL
  1.6   0.01824 0.01585 0.02062   main/Initialise/CallInitial/CCTK_INITIAL/CallFunction
  1.6   0.01812 0.01574 0.02050   main/Initialise/CallInitial/CCTK_INITIAL/CallFunction/thorns
  1.5   0.01730 0.01491 0.01968   [0118] BaikalVacuum: BaikalVacuum_enforce_detgammahat_constraint in CCTK_EVOL
  1.4   0.01642 0.01413 0.01870   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/BaikalVacuum_enforce_detgammahat_constraint
  1.3   0.01487 0.01145 0.01828   [0066] ShiftedGaugeWave: ShiftedGaugeWave_initial in CCTK_INITIAL
  1.3   0.01484 0.01143 0.01825   main/Initialise/CallInitial/CCTK_INITIAL/CallFunction/thorns/ShiftedGaugeWave_initial
  1.1   0.01307 0.01079 0.01534   main/Initialise/CallInitial/CCTK_POSTINITIAL
  1.1   0.01298 0.01069 0.01526   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction
  1.1   0.01293 0.00910 0.01677   main/CarpetStartup/CarpetLib::gh::regrid/CarpetLib::dh::regrid/test
  1.1   0.01233 0.00870 0.01596   main/CarpetStartup/CarpetLib::gh::regrid/CarpetLib::dh::regrid/buffers
  0.8   0.00977 0.00019 0.01935   main/CarpetStartup/CarpetLib::gh::regrid/CarpetLib::dh::regrid/bcast_boxes
======================================================================
--------------------------------------------------------------------------------
Done.
+ echo Stopping:
Stopping:
+ date
Sun Jan  5 23:22:48 UTC 2025
+ echo Done.
Done.
  Elapsed time: 2.2 s
