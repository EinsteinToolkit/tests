/home/runner/simulations/TestJob01_temp_1/output-0000/TEST/sim/ML_CCZ4_Test
Preparing:
+ set -e
+ cd output-0000-active
+ echo Checking:
Checking:
+ pwd
/home/runner/simulations/TestJob01_temp_1/output-0000/TEST/sim/ML_CCZ4_Test/output-0000-active
+ hostname
fv-az131-130
+ date
Thu Jun 23 13:54:38 UTC 2022
+ echo Environment:
Environment:
+ export CACTUS_NUM_PROCS=1
+ CACTUS_NUM_PROCS=1
+ export CACTUS_NUM_THREADS=2
+ CACTUS_NUM_THREADS=2
+ export GMON_OUT_PREFIX=gmon.out
+ GMON_OUT_PREFIX=gmon.out
+ export OMP_NUM_THREADS=2
+ OMP_NUM_THREADS=2
+ env
+ sort
+ echo Starting:
Starting:
++ date +%s
+ export CACTUS_STARTTIME=1655992478
+ CACTUS_STARTTIME=1655992478
+ '[' 1 = 1 ']'
+ '[' 0 -eq 0 ']'
+ /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim -L 3 /home/runner/simulations/TestJob01_temp_1/output-0000/arrangements/McLachlan/ML_CCZ4_Test/test/ML_CCZ4_sgw3d_rhs.par
INFO (Cactus): Increased logging level from 0 to 3
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.12.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 
--------------------------------------------------------------------------------

Cactus version:    4.12.0
Compile date:      Jun 23 2022 (13:48:16)
Run date:          Jun 23 2022 (13:54:38+0000)
Run host:          fv-az131-130.02s2s2wytf3ezhces2b0zshxxg.phxx.internal.cloudapp.net (pid=98943)
Working directory: /home/runner/simulations/TestJob01_temp_1/output-0000/TEST/sim/ML_CCZ4_Test
Executable:        /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim
Parameter file:    /home/runner/simulations/TestJob01_temp_1/output-0000/arrangements/McLachlan/ML_CCZ4_Test/test/ML_CCZ4_sgw3d_rhs.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->CoordBase SymBase Boundary NanChecker CartGrid3d Time MoL CarpetIOBasic CarpetIOScalar IOUtil Carpet CarpetLib CarpetReduce CarpetInterp CarpetSlab CarpetIOASCII ADMBase StaticConformal SpaceMask Slab Periodic Exact GenericFD CoordGauge LoopControl ML_CCZ4 ML_CCZ4_Helper GenericFD TMuNuBase SphericalSurface ADMMacros TimerReport<---
Warning: thorn GenericFD already scheduled for activation
Thorn Carpet requests automatic activation of MPI
Thorn Carpet requests automatic activation of Timers
Thorn CarpetLib requests automatic activation of Vectors
Thorn CarpetLib requests automatic activation of CycleClock
Thorn LoopControl requests automatic activation of hwloc
Thorn hwloc requests automatic activation of zlib
Activating thorn ADMBase...Success -> active implementation ADMBase
Activating thorn ADMMacros...Success -> active implementation ADMMacros
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetInterp...Success -> active implementation interp
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetIOBasic...Success -> active implementation IOBasic
Activating thorn CarpetIOScalar...Success -> active implementation IOScalar
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CarpetSlab...Success -> active implementation Hyperslab
Activating thorn CartGrid3d...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn CoordGauge...Success -> active implementation CoordGauge
Activating thorn CycleClock...Success -> active implementation CycleClock
Activating thorn Exact...Success -> active implementation exact
Activating thorn GenericFD...Success -> active implementation GenericFD
Activating thorn hwloc...Success -> active implementation hwloc
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn ML_CCZ4...Success -> active implementation ML_CCZ4
Activating thorn ML_CCZ4_Helper...Success -> active implementation ML_CCZ4_Helper
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn MPI...Success -> active implementation MPI
Activating thorn NanChecker...Success -> active implementation NaNChecker
Activating thorn Periodic...Success -> active implementation Periodic
Activating thorn Slab...Success -> active implementation Slab
Activating thorn SpaceMask...Success -> active implementation SpaceMask
Activating thorn SphericalSurface...Success -> active implementation SphericalSurface
Activating thorn StaticConformal...Success -> active implementation StaticConformal
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn Time...Success -> active implementation time
Activating thorn TimerReport...Success -> active implementation timerreport
Activating thorn Timers...Success -> active implementation Timers
Activating thorn TMuNuBase...Success -> active implementation TmunuBase
Activating thorn Vectors...Success -> active implementation Vectors
Activating thorn zlib...Success -> active implementation zlib
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CycleClock::CycleClock_Setup: Set up CycleClock
      LoopControl::LC_setup: Set up LoopControl
      ML_CCZ4_Helper::ML_CCZ4_SetGroupTags: [meta] Set checkpointing and prolongation group tags
      Timers::Timer_Startup: Prepare hierarchical timers
      CarpetInterp::CarpetInterpStartup: Startup routine
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      Carpet::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      CarpetIOScalar::CarpetIOScalarStartup: [global] Startup routine
      ML_CCZ4::ML_CCZ4_Startup: [meta] create banner
      ML_CCZ4_Helper::ML_CCZ4_RegisterSlicing: [meta] Register slicing
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      MoL::MoL_Startup: Startup banner
      Slab::Slab_InitMPIDatatypes: Create MPI datatypes for complex variables in C
      SymBase::SymBase_Startup: Register GH Extension for SymBase
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      Vectors::Vectors_Startup: Print startup message
      GROUP hwloc_startup: hwloc startup group
        hwloc::hwloc_version: Output hwloc version

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      ADMBase::Einstein_InitSymBound: [global] Set up GF symmetries
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      CoordGauge::Einstein_ActivateSlicing: Initialize slicing, setup priorities for mixed slicings
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      ML_CCZ4_Helper::ML_CCZ4_ParamCompat: [meta] Handle parameter backward compatibility
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        ML_CCZ4::ML_CCZ4_RegisterVars: [meta] Register Variables for MoL
        ML_CCZ4_Helper::ML_CCZ4_RegisterConstrained: [meta] Register ADMBase variables as constrained
      Slab::Slab_InitTimers: Initialise timers
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::CartGrid3D_RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
          ML_CCZ4::ML_CCZ4_RegisterSymmetries: [meta] register symmetries
          Periodic::Periodic_RegisterBC: Register periodic boundary conditions
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
  Parameter checking routines
    [CCTK_PARAMCHECK]
      ADMBase::ADMBase_ParamCheck: [global] Check consistency of parameters
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      Exact::Exact_ParamCheck: [global] do consistency checks on our parameters
      ML_CCZ4_Helper::ML_CCZ4_ParamCheck: [meta] Check parameters
      MoL::MoL_ParamCheck: Basic parameter checking
      SphericalSurface::SphericalSurface_ParamCheck: [global] Check that all surface names are unique
      TmunuBase::TmunuBase_ParamCheck: [global] Check that no deprecated parameters are used.
      Vectors::Vectors_Test: Run correctness tests.

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_CCZ4_ConstraintsEverywhere_bc_group: ML_CCZ4_ConstraintsEverywhere
            ML_CCZ4::ML_CCZ4_ConstraintsEverywhere_SelectBCs: [level] ML_CCZ4_ConstraintsEverywhere_SelectBCs
            GROUP ML_CCZ4_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsEverywhere
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_CCZ4_ConstraintsInterior_bc_group: ML_CCZ4_ConstraintsInterior
            ML_CCZ4::ML_CCZ4_ConstraintsInterior_SelectBCs: [level] ML_CCZ4_ConstraintsInterior_SelectBCs
            GROUP ML_CCZ4_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsInterior
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        ML_CCZ4::ML_CCZ4_CheckBoundaries: [meta] check boundaries treatment
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_INITIAL]
        StaticConformal::StaticConformal_InitialiseState: Set the conformal_state variable to 0
        GROUP ADMBase_InitialData: Schedule group for calculating ADM initial data
          Exact::Exact__decode_pars: decode/copy thorn Exact parameters into grid scalars
          Exact::Exact__initialize: Set initial data from exact solution on a trivial slice
        GROUP ADMBase_InitialGauge: Schedule group for the ADM initial gauge condition
          Exact::Exact__gauge: Set initial lapse and/or shift from exact solution on a trivial slice
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        GROUP ADMBase_PostInitial: Schedule group for modifying the ADM initial data, such as e.g. adding noise
        ML_CCZ4::ML_CCZ4_InitialADMBase1Everywhere: ML_CCZ4_InitialADMBase1Everywhere
        ML_CCZ4::ML_CCZ4_InitialADMBase2BoundaryScalar: ML_CCZ4_InitialADMBase2BoundaryScalar
        MoL::MoL_StartLoop: [level] Initialise the step size control
        ML_CCZ4::ML_CCZ4_InitialADMBase2Interior: ML_CCZ4_InitialADMBase2Interior
      [CCTK_POSTINITIAL]
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
          ML_CCZ4::ML_CCZ4_EnforceEverywhere: ML_CCZ4_EnforceEverywhere
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
          GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_CCZ4::ML_CCZ4_ADMBaseInterior: ML_CCZ4_ADMBaseInterior
          ML_CCZ4::ML_CCZ4_ADMBaseBoundaryScalar: ML_CCZ4_ADMBaseBoundaryScalar
          ML_CCZ4::ML_CCZ4_ADMBaseEverywhere: ML_CCZ4_ADMBaseEverywhere
          ML_CCZ4_Helper::ML_CCZ4_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
          GROUP ML_CCZ4_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP ML_CCZ4_ConstraintsEverywhere_group: ML_CCZ4_ConstraintsEverywhere
            ML_CCZ4::ML_CCZ4_ConstraintsEverywhere: ML_CCZ4_ConstraintsEverywhere
            GROUP ML_CCZ4_ConstraintsEverywhere_bc_group: ML_CCZ4_ConstraintsEverywhere
              ML_CCZ4::ML_CCZ4_ConstraintsEverywhere_SelectBCs: [level] ML_CCZ4_ConstraintsEverywhere_SelectBCs
              GROUP ML_CCZ4_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsEverywhere
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_CCZ4_ConstraintsInterior_group: ML_CCZ4_ConstraintsInterior
            ML_CCZ4::ML_CCZ4_ConstraintsInterior: ML_CCZ4_ConstraintsInterior
            GROUP ML_CCZ4_ConstraintsInterior_bc_group: ML_CCZ4_ConstraintsInterior
              ML_CCZ4::ML_CCZ4_ConstraintsInterior_SelectBCs: [level] ML_CCZ4_ConstraintsInterior_SelectBCs
              GROUP ML_CCZ4_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsInterior
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
          GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_CCZ4::ML_CCZ4_ADMBaseInterior: ML_CCZ4_ADMBaseInterior
          ML_CCZ4::ML_CCZ4_ADMBaseBoundaryScalar: ML_CCZ4_ADMBaseBoundaryScalar
          ML_CCZ4::ML_CCZ4_ADMBaseEverywhere: ML_CCZ4_ADMBaseEverywhere
          ML_CCZ4_Helper::ML_CCZ4_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
          GROUP ML_CCZ4_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_CCZ4_ConstraintsEverywhere_bc_group: ML_CCZ4_ConstraintsEverywhere
            ML_CCZ4::ML_CCZ4_ConstraintsEverywhere_SelectBCs: [level] ML_CCZ4_ConstraintsEverywhere_SelectBCs
            GROUP ML_CCZ4_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsEverywhere
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_CCZ4_ConstraintsInterior_bc_group: ML_CCZ4_ConstraintsInterior
            ML_CCZ4::ML_CCZ4_ConstraintsInterior_SelectBCs: [level] ML_CCZ4_ConstraintsInterior_SelectBCs
            GROUP ML_CCZ4_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsInterior
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        ML_CCZ4::ML_CCZ4_CheckBoundaries: [meta] check boundaries treatment
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
          GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_CCZ4::ML_CCZ4_ADMBaseInterior: ML_CCZ4_ADMBaseInterior
          ML_CCZ4::ML_CCZ4_ADMBaseBoundaryScalar: ML_CCZ4_ADMBaseBoundaryScalar
          ML_CCZ4::ML_CCZ4_ADMBaseEverywhere: ML_CCZ4_ADMBaseEverywhere
          ML_CCZ4_Helper::ML_CCZ4_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
          GROUP ML_CCZ4_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
        GROUP ML_CCZ4_EvolutionAnalysis: Calculate RHS at analysis
          ML_CCZ4::ML_CCZ4_EvolutionAnalysisInit: ML_CCZ4_EvolutionAnalysisInit
          ML_CCZ4::ML_CCZ4_EvolutionAnalysisInterior: ML_CCZ4_EvolutionAnalysisInterior
        TimerReport::zzz_TimerReport_Output: [global] Print the timer report
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
        GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_CCZ4::ML_CCZ4_ADMBaseInterior: ML_CCZ4_ADMBaseInterior
        ML_CCZ4::ML_CCZ4_ADMBaseBoundaryScalar: ML_CCZ4_ADMBaseBoundaryScalar
        ML_CCZ4::ML_CCZ4_ADMBaseEverywhere: ML_CCZ4_ADMBaseEverywhere
        ML_CCZ4_Helper::ML_CCZ4_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
        GROUP ML_CCZ4_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_CCZ4_ConstraintsEverywhere_bc_group: ML_CCZ4_ConstraintsEverywhere
          ML_CCZ4::ML_CCZ4_ConstraintsEverywhere_SelectBCs: [level] ML_CCZ4_ConstraintsEverywhere_SelectBCs
          GROUP ML_CCZ4_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsEverywhere
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_CCZ4_ConstraintsInterior_bc_group: ML_CCZ4_ConstraintsInterior
          ML_CCZ4::ML_CCZ4_ConstraintsInterior_SelectBCs: [level] ML_CCZ4_ConstraintsInterior_SelectBCs
          GROUP ML_CCZ4_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsInterior
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      LoopControl::LC_steer: [meta] Update LoopControl algorithm preferences
      NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
            MoL::MoL_AllocateScratchSpace: [level] Allocate storage for scratch levels
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
          MoL::MoL_AllocateScratch: Allocate sufficient space for array scratch variables
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                ML_CCZ4::ML_CCZ4_EvolutionBoundaryScalar: ML_CCZ4_EvolutionBoundaryScalar
                GROUP ML_CCZ4_EvolutionInteriorSplitBy: 
                  ML_CCZ4::ML_CCZ4_EvolutionInteriorSplitBy1: ML_CCZ4_EvolutionInteriorSplitBy1
                  ML_CCZ4::ML_CCZ4_EvolutionInteriorSplitBy2: ML_CCZ4_EvolutionInteriorSplitBy2
                  ML_CCZ4::ML_CCZ4_EvolutionInteriorSplitBy3: ML_CCZ4_EvolutionInteriorSplitBy3
              GROUP MoL_PostRHS: Modify RHS functions
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient Runge-Kutta 4 method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
                ML_CCZ4::ML_CCZ4_EnforceEverywhere: ML_CCZ4_EnforceEverywhere
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
                GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                ML_CCZ4::ML_CCZ4_ADMBaseInterior: ML_CCZ4_ADMBaseInterior
                ML_CCZ4::ML_CCZ4_ADMBaseBoundaryScalar: ML_CCZ4_ADMBaseBoundaryScalar
                ML_CCZ4::ML_CCZ4_ADMBaseEverywhere: ML_CCZ4_ADMBaseEverywhere
                ML_CCZ4_Helper::ML_CCZ4_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
                GROUP ML_CCZ4_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
          MoL::MoL_FreeScratchSpace: [level] Free storage for scratch levels
      end while
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP ML_CCZ4_ConstraintsEverywhere_group: ML_CCZ4_ConstraintsEverywhere
          ML_CCZ4::ML_CCZ4_ConstraintsEverywhere: ML_CCZ4_ConstraintsEverywhere
          GROUP ML_CCZ4_ConstraintsEverywhere_bc_group: ML_CCZ4_ConstraintsEverywhere
            ML_CCZ4::ML_CCZ4_ConstraintsEverywhere_SelectBCs: [level] ML_CCZ4_ConstraintsEverywhere_SelectBCs
            GROUP ML_CCZ4_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsEverywhere
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_CCZ4_ConstraintsInterior_group: ML_CCZ4_ConstraintsInterior
          ML_CCZ4::ML_CCZ4_ConstraintsInterior: ML_CCZ4_ConstraintsInterior
          GROUP ML_CCZ4_ConstraintsInterior_bc_group: ML_CCZ4_ConstraintsInterior
            ML_CCZ4::ML_CCZ4_ConstraintsInterior_SelectBCs: [level] ML_CCZ4_ConstraintsInterior_SelectBCs
            GROUP ML_CCZ4_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsInterior
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
        GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_CCZ4::ML_CCZ4_ADMBaseInterior: ML_CCZ4_ADMBaseInterior
        ML_CCZ4::ML_CCZ4_ADMBaseBoundaryScalar: ML_CCZ4_ADMBaseBoundaryScalar
        ML_CCZ4::ML_CCZ4_ADMBaseEverywhere: ML_CCZ4_ADMBaseEverywhere
        ML_CCZ4_Helper::ML_CCZ4_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
        GROUP ML_CCZ4_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_CCZ4_ConstraintsEverywhere_bc_group: ML_CCZ4_ConstraintsEverywhere
          ML_CCZ4::ML_CCZ4_ConstraintsEverywhere_SelectBCs: [level] ML_CCZ4_ConstraintsEverywhere_SelectBCs
          GROUP ML_CCZ4_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsEverywhere
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_CCZ4_ConstraintsInterior_bc_group: ML_CCZ4_ConstraintsInterior
          ML_CCZ4::ML_CCZ4_ConstraintsInterior_SelectBCs: [level] ML_CCZ4_ConstraintsInterior_SelectBCs
          GROUP ML_CCZ4_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsInterior
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    [CCTK_POSTSTEP]
      GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
      NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
      SphericalSurface::SphericalSurface_Set: [global] Set surface radii
      GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
        SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
    if (checkpoint)
      [CCTK_CHECKPOINT]
      TimerReport::zzz_TimerReport_Checkpoint: [global] Print the timer report
    endif
    if (analysis)
      [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
      GROUP ML_CCZ4_EvolutionAnalysis: Calculate RHS at analysis
        ML_CCZ4::ML_CCZ4_EvolutionAnalysisInit: ML_CCZ4_EvolutionAnalysisInit
        ML_CCZ4::ML_CCZ4_EvolutionAnalysisInterior: ML_CCZ4_EvolutionAnalysisInterior
      TimerReport::zzz_TimerReport_Output: [global] Print the timer report
    endif
    Output grid variables
    enddo

  Termination routines
    [CCTK_TERMINATE]
      LoopControl::LC_statistics_terminate: [meta] Output LoopControl statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays
      TimerReport::zzz_TimerReport_Output: [global] Print the timer report

  Shutdown routines
    [CCTK_SHUTDOWN]
      Timers::Timer_Shutdown: Prepare hierarchical timers

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
        GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_CCZ4::ML_CCZ4_ADMBaseInterior: ML_CCZ4_ADMBaseInterior
        ML_CCZ4::ML_CCZ4_ADMBaseBoundaryScalar: ML_CCZ4_ADMBaseBoundaryScalar
        ML_CCZ4::ML_CCZ4_ADMBaseEverywhere: ML_CCZ4_ADMBaseEverywhere
        ML_CCZ4_Helper::ML_CCZ4_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
        GROUP ML_CCZ4_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_CCZ4_ConstraintsEverywhere_bc_group: ML_CCZ4_ConstraintsEverywhere
          ML_CCZ4::ML_CCZ4_ConstraintsEverywhere_SelectBCs: [level] ML_CCZ4_ConstraintsEverywhere_SelectBCs
          GROUP ML_CCZ4_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsEverywhere
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_CCZ4_ConstraintsInterior_bc_group: ML_CCZ4_ConstraintsInterior
          ML_CCZ4::ML_CCZ4_ConstraintsInterior_SelectBCs: [level] ML_CCZ4_ConstraintsInterior_SelectBCs
          GROUP ML_CCZ4_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_CCZ4_ConstraintsInterior
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   process 0: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
INFO (CarpetLib): Process startup time was 0.853 seconds
Current core file size limit: hard=[unlimited], soft=0 MB
Current addres space size limit: hard=[unlimited], soft=[unlimited]
Current data segment size limit: hard=[unlimited], soft=[unlimited]
Current resident set size limit: hard=[unlimited], soft=[unlimited]
INFO (CycleClock): Measuring CycleClock tick via OpenMP...
INFO (CycleClock): Calibrated CycleClock: 0.385516 ns per clock tick (2.59393 GHz)
INFO (Vectors): Using vector size 2 for architecture SSE2 (64-bit precision)
INFO (hwloc): library version 2.1.0, API version 0x20100
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR scalar I/O provided by CarpetIOScalar
--------------------------------------------------------------------------------
ML_CCZ4
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 1 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 2 threads, this is thread 0
INFO (Carpet): There are 2 threads in total
INFO (Carpet): There are 2 threads per process
INFO (Carpet): This process runs on host fv-az131-130, pid=98943
INFO (Carpet): This process runs on 2 cores: 0-1
INFO (Carpet): Thread 0 runs on 2 cores: 0-1
INFO (Carpet): Thread 1 runs on 2 cores: 0-1
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): Boundary specification for map 0:
   nboundaryzones: [[3,3,3],[3,3,3]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[1,1,1],[0,0,0]]
INFO (Carpet): CoordBase domain specification for map 0:
   physical extent: [0,0,0] : [1,1,1]   ([1,1,1])
   interior extent: [0,0,0] : [0.9,0.9,0.9]   ([0.9,0.9,0.9])
   exterior extent: [-0.3,-0.3,-0.3] : [1.2,1.2,1.2]   ([1.5,1.5,1.5])
   base_spacing   : [0.1,0.1,0.1]
INFO (Carpet): Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [0,0,0] : [1,1,1]   ([1,1,1])
   interior extent   : [0,0,0] : [0.9,0.9,0.9]   ([0.9,0.9,0.9])
   exterior extent   : [-0.3,-0.3,-0.3] : [1.2,1.2,1.2]   ([1.5,1.5,1.5])
   spacing           : [0.1,0.1,0.1]
INFO (Carpet): Base grid specification for map 0:
   number of grid points             : [16,16,16]
   number of coarse grid ghost points: [[3,3,3],[3,3,3]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 792 grid functions in 56 groups
INFO (Carpet):    There are 90 grid scalars in 37 groups
INFO (Carpet):    There are 11 1-dimensional grid arrays in 4 groups
INFO (Carpet):    There are 1 2-dimensional grid arrays in 2 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 0 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   ADMBASE::gxx
   ADMBASE::kxx
   ML_CCZ4::phi
   ML_CCZ4::gt11
   ML_CCZ4::gt12
   ML_CCZ4::gt13
   ML_CCZ4::gt22
   ML_CCZ4::gt23
   ML_CCZ4::gt33
   ML_CCZ4::Xt1
   ML_CCZ4::Xt2
   ML_CCZ4::Xt3
   ML_CCZ4::trK
   ML_CCZ4::At11
   ML_CCZ4::At12
   ML_CCZ4::At13
   ML_CCZ4::At22
   ML_CCZ4::At23
   ML_CCZ4::At33
   ML_CCZ4::Theta
   ML_CCZ4::alpha
   ML_CCZ4::A
   ML_CCZ4::beta1
   ML_CCZ4::beta2
   ML_CCZ4::beta3
   ML_CCZ4::B1
   ML_CCZ4::B2
   ML_CCZ4::B3
   ML_CCZ4::cS
   ML_CCZ4::cXt1
   ML_CCZ4::cXt2
   ML_CCZ4::cXt3
   ML_CCZ4::cA
   ML_CCZ4::At11rhs
   ML_CCZ4::At12rhs
   ML_CCZ4::At13rhs
   ML_CCZ4::At22rhs
   ML_CCZ4::At23rhs
   ML_CCZ4::At33rhs
   ML_CCZ4::Arhs
   ML_CCZ4::B1rhs
   ML_CCZ4::B2rhs
   ML_CCZ4::B3rhs
   ML_CCZ4::Xt1rhs
   ML_CCZ4::Xt2rhs
   ML_CCZ4::Xt3rhs
   ML_CCZ4::alpharhs
   ML_CCZ4::phirhs
   ML_CCZ4::gt11rhs
   ML_CCZ4::gt12rhs
   ML_CCZ4::gt13rhs
   ML_CCZ4::gt22rhs
   ML_CCZ4::gt23rhs
   ML_CCZ4::gt33rhs
   ML_CCZ4::beta1rhs
   ML_CCZ4::beta2rhs
   ML_CCZ4::beta3rhs
   ML_CCZ4::Thetarhs
   ML_CCZ4::trKrhs
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (MoL): Using Runge-Kutta 4 as the time integrator.
INFO (SymBase): Symmetry on lower x-face: periodic
INFO (SymBase): Symmetry on upper x-face: periodic
INFO (SymBase): Symmetry on lower y-face: periodic
INFO (SymBase): Symmetry on upper y-face: periodic
INFO (SymBase): Symmetry on lower z-face: periodic
INFO (SymBase): Symmetry on upper z-face: periodic
WARNING[L2,P0] (SymBase): The symmetry "periodic" on the lower x-face has not registered a symmetry interpolator
WARNING[L2,P0] (SymBase): The symmetry "periodic" on the upper x-face has not registered a symmetry interpolator
WARNING[L2,P0] (SymBase): The symmetry "periodic" on the lower y-face has not registered a symmetry interpolator
WARNING[L2,P0] (SymBase): The symmetry "periodic" on the upper y-face has not registered a symmetry interpolator
WARNING[L2,P0] (SymBase): The symmetry "periodic" on the lower z-face has not registered a symmetry interpolator
WARNING[L2,P0] (SymBase): The symmetry "periodic" on the upper z-face has not registered a symmetry interpolator
INFO (MoL): The maximum number of evolved variables is 259. 26 are registered.
INFO (MoL): The maximum number of slow evolved variables is 259. 0 are registered.
INFO (MoL): The maximum number of constrained variables is 259. 20 are registered.
INFO (MoL): The maximum number of SandR variables is 259. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 259. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 259. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 259. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (Vectors): Testing vectorisation... [errors may result in segfaults]
INFO (Vectors): 375/375 tests passed 
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.0000000e-01  dy=>1.0000000e-01  dz=>1.0000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-0.300, 1.200]  y=>[-0.300, 1.200]  z=>[-0.300, 1.200]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,15]  y=>[0,15]  z=>[0,15]
INFO (Time): Timestep set to 0.05 (courant_static)
INFO (Exact): setting exact data on slice
-----------------------------------------------
Iteration      Time |              ADMBASE::alp
                    |      minimum      maximum
-----------------------------------------------
        0     0.000 |    0.9555909    1.0512380
INFO (TimerReport): Timer Report before terminating at iteration 0 time 0
INFO (TimerReport): Top timers at iteration 0 time 0
======================================================================
    %    Time/s   Min/s   Max/s   Timer (gettimeofday)
======================================================================
100.0   0.100031 0.100031 0.100031   [0001] CycleClock: CycleClock_Setup in CCTK_STARTUP
 79.8   0.079873 0.079873 0.079873   main/Initialise
 77.5   0.077559 0.077559 0.077559   meta mode/meta mode/global mode
 76.5   0.076542 0.076542 0.076542   meta mode/meta mode/global mode/level(0)
 62.0   0.062058 0.062058 0.062058   main/Initialise/CallInitial
 49.2   0.049218 0.049218 0.049218   main/Initialise/CallInitial/CCTK_INITIAL
 49.1   0.049141 0.049141 0.049141   main/Initialise/CallInitial/CCTK_INITIAL/CallFunction
 48.8   0.048825 0.048825 0.048825   main/Initialise/CallInitial/CCTK_INITIAL/CallFunction/thorns
 26.3   0.026297 0.026297 0.026297   main/CarpetStartup
 24.9   0.024915 0.024915 0.024915   main/CarpetStartup/CarpetLib::gh::regrid
 24.8   0.024779 0.024779 0.024779   main/CarpetStartup/CarpetLib::gh::regrid/CarpetLib::dh::regrid
 24.3   0.024277 0.024277 0.024277   [0072] Exact: Exact__initialize in CCTK_INITIAL
 24.2   0.024237 0.024237 0.024237   main/Initialise/CallInitial/CCTK_INITIAL/CallFunction/thorns/Exact__initialize
 23.9   0.023944 0.023944 0.023944   [0073] Exact: Exact__gauge in CCTK_INITIAL
 23.9   0.023902 0.023902 0.023902   main/Initialise/CallInitial/CCTK_INITIAL/CallFunction/thorns/Exact__gauge
 14.6   0.014570 0.014570 0.014570   main/Initialise/CallAnalysis
 10.3   0.010349 0.010349 0.010349   main/CarpetStartup/CarpetLib::gh::regrid/CarpetLib::dh::regrid/buffers
  7.7   0.007691 0.007691 0.007691   main/Initialise/CallAnalysis/OutputGH
  7.7   0.007684 0.007684 0.007684   main/Initialise/CallAnalysis/OutputGH/OutputGH
  7.6   0.007565 0.007565 0.007565   main/Initialise/CallInitial/CCTK_POSTINITIAL
  7.4   0.007430 0.007430 0.007430   main/Initialise/CallAnalysis/OutputGH/OutputGH/IOASCII::IOASCII_1D [3]
  7.4   0.007425 0.007425 0.007425   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction
  7.4   0.007422 0.007422 0.007422   main/Initialise/CallAnalysis/OutputGH/OutputGH/IOASCII::IOASCII_1D [3]/OutputGH<1>
  6.9   0.006867 0.006867 0.006867   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction/thorns
  6.6   0.006630 0.006630 0.006630   main/Initialise/CallAnalysis/CCTK_ANALYSIS
  6.6   0.006620 0.006620 0.006620   main/CarpetStartup/CarpetLib::gh::regrid/CarpetLib::dh::regrid/test
  5.8   0.005841 0.005841 0.005841   [0085] Periodic: Periodic_ApplyBC in CCTK_POSTINITIAL
  5.7   0.005744 0.005744 0.005744   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction/thorns/Periodic_ApplyBC
  4.4   0.004372 0.004372 0.004372   Slab/apply
  4.0   0.003957 0.003957 0.003957   main/Initialise/CallInitial/Poison
  2.9   0.002924 0.002924 0.002924   main/CarpetStartup/CarpetLib::gh::regrid/CarpetLib::dh::regrid/bcast_comm
  2.4   0.002409 0.002409 0.002409   main/CarpetStartup/CarpetLib::gh::regrid/CarpetLib::dh::regrid/region
  1.6   0.001588 0.001588 0.001588   Slab/copy_in
  1.4   0.001397 0.001397 0.001397   Slab/copy_back
  1.3   0.001335 0.001335 0.001335   main/CarpetStartup/CarpetLib::gh::regrid/CarpetLib::dh::regrid/bcast_comm/ref_refl_prol
  1.2   0.001170 0.001170 0.001170   main/Initialise/CallSetup
  1.2   0.001156 0.001156 0.001156   main/Initialise/CallAnalysis/CCTK_ANALYSIS/CallFunction
  1.2   0.001155 0.001155 0.001155   main/Initialise/CallInitial/CCTK_BASEGRID
  1.1   0.001053 0.001053 0.001053   main/Initialise/CallAnalysis/CCTK_ANALYSIS/CallFunction/thorns
  1.0   0.001044 0.001044 0.001044   Slab/copy_in_noxpose
======================================================================
--------------------------------------------------------------------------------
Done.
+ echo Stopping:
Stopping:
+ date
Thu Jun 23 13:54:39 UTC 2022
+ echo Done.
Done.
  Elapsed time: 1.0 s
