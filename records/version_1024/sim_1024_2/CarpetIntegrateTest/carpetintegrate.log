/home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/CarpetIntegrateTest
Preparing:
+ set -e
+ cd output-0000-active
+ echo Checking:
Checking:
+ pwd
/home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/CarpetIntegrateTest/output-0000-active
+ hostname
fv-az659-464
+ date
Mon Oct  7 18:23:59 UTC 2024
+ echo Environment:
Environment:
+ export CACTUS_NUM_PROCS=1
+ CACTUS_NUM_PROCS=1
+ export CACTUS_NUM_THREADS=1
+ CACTUS_NUM_THREADS=1
+ export GMON_OUT_PREFIX=gmon.out
+ GMON_OUT_PREFIX=gmon.out
+ export OMP_NUM_THREADS=1
+ OMP_NUM_THREADS=1
+ env
+ sort
+ echo Starting:
Starting:
++ date +%s
+ export CACTUS_STARTTIME=1728325439
+ CACTUS_STARTTIME=1728325439
+ '[' 1 = 1 ']'
+ '[' 0 -eq 0 ']'
+ /home/runner/simulations/TestJob01_temp_2/SIMFACTORY/exe/cactus_sim -L 3 /home/runner/simulations/TestJob01_temp_2/output-0000/arrangements/Carpet/CarpetIntegrateTest/test/carpetintegrate.par
INFO (Cactus): Increased logging level from 0 to 3
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.16.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 
--------------------------------------------------------------------------------

Cactus version:    4.16.0
Compile date:      Oct 07 2024 (18:06:44)
Run date:          Oct 07 2024 (18:24:00+0000)
Run host:          fv-az659-464.luykedtozraezimdvwvtsy4hga.cx.internal.cloudapp.net (pid=136575)
Working directory: /home/runner/simulations/TestJob01_temp_2/output-0000/TEST/sim/CarpetIntegrateTest
Executable:        /home/runner/simulations/TestJob01_temp_2/SIMFACTORY/exe/cactus_sim
Parameter file:    /home/runner/simulations/TestJob01_temp_2/output-0000/arrangements/Carpet/CarpetIntegrateTest/test/carpetintegrate.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->time carpet carpetlib carpetregrid GSL LoopControl carpetreduce carpetslab carpetinterp cartgrid3d coordbase initbase symbase boundary carpetiobasic carpetioascii carpetioscalar ioutil carpetintegratetest reflectionsymmetry<---
Thorn carpet requests automatic activation of MPI
Thorn carpet requests automatic activation of Timers
Thorn carpetlib requests automatic activation of Vectors
Thorn carpetlib requests automatic activation of CycleClock
Thorn LoopControl requests automatic activation of hwloc
Thorn hwloc requests automatic activation of zlib
Activating thorn boundary...Success -> active implementation boundary
Activating thorn carpet...Success -> active implementation Driver
Activating thorn carpetintegratetest...Success -> active implementation CarpetIntegrateTest
Activating thorn carpetinterp...Success -> active implementation interp
Activating thorn carpetioascii...Success -> active implementation IOASCII
Activating thorn carpetiobasic...Success -> active implementation IOBasic
Activating thorn carpetioscalar...Success -> active implementation IOScalar
Activating thorn carpetlib...Success -> active implementation CarpetLib
Activating thorn carpetreduce...Success -> active implementation reduce
Activating thorn carpetregrid...Success -> active implementation CarpetRegrid
Activating thorn carpetslab...Success -> active implementation Hyperslab
Activating thorn cartgrid3d...Success -> active implementation grid
Activating thorn coordbase...Success -> active implementation CoordBase
Activating thorn CycleClock...Success -> active implementation CycleClock
Activating thorn GSL...Success -> active implementation GSL
Activating thorn hwloc...Success -> active implementation hwloc
Activating thorn initbase...Success -> active implementation InitBase
Activating thorn ioutil...Success -> active implementation IO
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn MPI...Success -> active implementation MPI
Activating thorn reflectionsymmetry...Success -> active implementation ReflectionSymmetry
Activating thorn symbase...Success -> active implementation SymBase
Activating thorn time...Success -> active implementation time
Activating thorn Timers...Success -> active implementation Timers
Activating thorn Vectors...Success -> active implementation Vectors
Activating thorn zlib...Success -> active implementation zlib
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CycleClock::CycleClock_Setup: Set up CycleClock
      LoopControl::LC_setup: Set up LoopControl
      Timers::Timer_Startup: Prepare hierarchical timers
      Carpet::Driver_Startup: Startup routine
      CarpetInterp::CarpetInterpStartup: Startup routine
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      IOUtil::IOUtil_Startup: Startup routine
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      CarpetIOScalar::CarpetIOScalarStartup: [global] Startup routine
      SymBase::SymBase_Startup: Register GH Extension for SymBase
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      Vectors::Vectors_Startup: Print startup message
      GROUP hwloc_startup: hwloc startup group
        hwloc::hwloc_version: Output hwloc version

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::CartGrid3D_RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
          ReflectionSymmetry::ReflectionSymmetry_Register: Register reflection symmetry boundaries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CarpetRegrid::CarpetRegridParamcheck: [global] Check Parameters
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      Vectors::Vectors_Test: Run correctness tests.

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      [CCTK_BASEGRID]
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_INITIAL]
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        CarpetIntegrateTest::CarpetIntegrate_Local: Setup integrand function
      [CCTK_POSTINITIAL]
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetIntegrateTest::CarpetIntegrate_Global: [global] Global integration by reduction
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      LoopControl::LC_steer: [meta] Update LoopControl algorithm preferences
    [CCTK_EVOL]
      CarpetIntegrateTest::CarpetIntegrate_Local: Setup integrand function
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
    [CCTK_POSTSTEP]
    if (checkpoint)
      [CCTK_CHECKPOINT]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
      CarpetIntegrateTest::CarpetIntegrate_Global: [global] Global integration by reduction
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
    endif
    Output grid variables
    enddo

  Termination routines
    [CCTK_TERMINATE]
      LoopControl::LC_statistics_terminate: [meta] Output LoopControl statistics

  Shutdown routines
    [CCTK_SHUTDOWN]
      Timers::Timer_Shutdown: Prepare hierarchical timers

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   process 0: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
INFO (CarpetLib): Process startup time was 1.63 seconds
Current core file size limit: hard=[unlimited], soft=0 MB
Current addres space size limit: hard=[unlimited], soft=[unlimited]
Current data segment size limit: hard=[unlimited], soft=[unlimited]
Current resident set size limit: hard=[unlimited], soft=[unlimited]
INFO (CycleClock): Measuring CycleClock tick via OpenMP...
INFO (CycleClock): Calibrated CycleClock: 0.408915 ns per clock tick (2.44549 GHz)
INFO (Vectors): Using vector size 2 for architecture SSE2 (64-bit precision)
INFO (hwloc): library version 2.7.0, API version 0x20500
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR scalar I/O provided by CarpetIOScalar
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 1 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 1 threads, this is thread 0
INFO (Carpet): There are 1 threads in total
INFO (Carpet): There are 1 threads per process
INFO (Carpet): This process runs on host fv-az659-464, pid=136575
INFO (Carpet): This process runs on 4 cores: 0-3
INFO (Carpet): Thread 0 runs on 4 cores: 0-3
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): Boundary specification for map 0:
   nboundaryzones: [[1,1,3],[1,1,1]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[0,0,1],[0,0,0]]
INFO (Carpet): CoordBase domain specification for map 0:
   physical extent: [-0.5,-0.5,-0] : [0.5,0.5,0.5]   ([1,1,0.5])
   interior extent: [-0.477778,-0.477778,0] : [0.477778,0.477778,0.478261]   ([0.955556,0.955556,0.478261])
   exterior extent: [-0.5,-0.5,-0.0652174] : [0.5,0.5,0.5]   ([1,1,0.565217])
   base_spacing   : [0.0222222,0.0222222,0.0217391]
INFO (Carpet): Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-0.5,-0.5,-0] : [0.5,0.5,0.5]   ([1,1,0.5])
   interior extent   : [-0.477778,-0.477778,0] : [0.477778,0.477778,0.478261]   ([0.955556,0.955556,0.478261])
   exterior extent   : [-0.5,-0.5,-0.0652174] : [0.5,0.5,0.5]   ([1,1,0.565217])
   spacing           : [0.0222222,0.0222222,0.0217391]
INFO (Carpet): Base grid specification for map 0:
   number of grid points             : [46,46,27]
   number of coarse grid ghost points: [[3,3,3],[3,3,3]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[6,6,6],[6,6,6]]
   [2]: [[6,6,6],[6,6,6]]
   [3]: [[6,6,6],[6,6,6]]
   [4]: [[6,6,6],[6,6,6]]
   [5]: [[6,6,6],[6,6,6]]
   [6]: [[6,6,6],[6,6,6]]
   [7]: [[6,6,6],[6,6,6]]
   [8]: [[6,6,6],[6,6,6]]
   [9]: [[6,6,6],[6,6,6]]
   [10]: [[6,6,6],[6,6,6]]
   [11]: [[6,6,6],[6,6,6]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[0,0,0],[0,0,0]]
   [2]: [[0,0,0],[0,0,0]]
   [3]: [[0,0,0],[0,0,0]]
   [4]: [[0,0,0],[0,0,0]]
   [5]: [[0,0,0],[0,0,0]]
   [6]: [[0,0,0],[0,0,0]]
   [7]: [[0,0,0],[0,0,0]]
   [8]: [[0,0,0],[0,0,0]]
   [9]: [[0,0,0],[0,0,0]]
   [10]: [[0,0,0],[0,0,0]]
   [11]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 12 grid functions in 7 groups
INFO (Carpet):    There are 57 grid scalars in 15 groups
INFO (Carpet):    There are 10 1-dimensional grid arrays in 3 groups
INFO (Carpet):    There are 0 2-dimensional grid arrays in 0 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 0 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   CARPETINTEGRATETEST::integrand
   CARPETREDUCE::weight
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (CarpetIOScalar): Periodic scalar output requested for:
   CARPETINTEGRATETEST::integrand
   CARPETREDUCE::weight
INFO (SymBase): Symmetry on lower z-face: reflection_symmetry
INFO (Vectors): Testing vectorisation... [errors may result in segfaults]
INFO (Vectors): 375/375 tests passed 
INFO (Carpet): Grid structure (superregions, grid points):
   [0][0][0]   exterior: [0,0,0] : [45,45,26]   ([46,46,27] + PADDING) 57132
   [1][0][0]   exterior: [22,22,3] : [66,66,28]   ([45,45,26] + PADDING) 52650
   [2][0][0]   exterior: [66,66,9] : [110,110,34]   ([45,45,26] + PADDING) 52650
INFO (Carpet): Grid structure (superregions, coordinates):
   [0][0][0]   exterior: [-0.5,-0.5,-0.0652173913043478] : [0.5,0.5,0.5] : [0.0222222222222222,0.0222222222222222,0.0217391304347826]
   [1][0][0]   exterior: [-0.255555555555556,-0.255555555555556,-0.0326086956521739] : [0.233333333333333,0.233333333333333,0.239130434782609] : [0.0111111111111111,0.0111111111111111,0.0108695652173913]
   [2][0][0]   exterior: [-0.133333333333333,-0.133333333333333,-0.016304347826087] : [0.111111111111111,0.111111111111111,0.119565217391304] : [0.00555555555555556,0.00555555555555556,0.00543478260869565]
INFO (Carpet): Global grid structure statistics:
INFO (Carpet): GF: rhs: 22k active, 46k owned (+108%), 73k total (+57%), 7 steps/time
INFO (Carpet): GF: vars: 8, pts: 1M active, 1M owned (+69%), 2M total (+51%), 1.0 comp/proc
INFO (Carpet): GA: vars: 67, pts: 0M active, 0M total (+0%)
INFO (Carpet): Total required memory: 0.013 GByte (for GAs and currently active GFs)
INFO (Carpet): Load balance:  min     avg     max     sdv     max/avg-1
INFO (Carpet): Level  0:       0M      0M      0M      0M owned      0%
INFO (Carpet): Level  1:       0M      0M      0M      0M owned      0%
INFO (Carpet): Level  2:       0M      0M      0M      0M owned      0%
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>2.2222222e-02  dy=>2.2222222e-02  dz=>2.1739130e-02
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-0.500, 0.500]  y=>[-0.500, 0.500]  z=>[-0.065, 0.500]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,45]  y=>[0,45]  z=>[0,26]
INFO (Time): Timestep set to 0.00815217 (courant_static)
INFO (Time): Timestep set to 0.00407609 (courant_static)
INFO (Time): Timestep set to 0.00203804 (courant_static)
Integral: 0.5
---------------------------------------------------------------------------
Iteration      Time | *INTEGRATETEST::integrand |      CARPETREDUCE::weight
                    |      minimum      maximum |      minimum      maximum
---------------------------------------------------------------------------
        0     0.000 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
      512     0.002 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     1024     0.004 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     1536     0.006 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     2048     0.008 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     2560     0.010 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     3072     0.012 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     3584     0.014 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     4096     0.016 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     4608     0.018 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     5120     0.020 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     5632     0.022 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     6144     0.024 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     6656     0.026 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     7168     0.029 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     7680     0.031 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     8192     0.033 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     8704     0.035 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     9216     0.037 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
     9728     0.039 |    1.0000000    1.0000000 |    0.1250000    1.0000000
Integral: 0.5
---------------------------------------------------------------------------
Iteration      Time | *INTEGRATETEST::integrand |      CARPETREDUCE::weight
                    |      minimum      maximum |      minimum      maximum
---------------------------------------------------------------------------
    10240     0.041 |    1.0000000    1.0000000 |    0.1250000    1.0000000
--------------------------------------------------------------------------------
Done.
+ echo Stopping:
Stopping:
+ date
Mon Oct  7 18:24:01 UTC 2024
+ echo Done.
Done.
  Elapsed time: 1.4 s
