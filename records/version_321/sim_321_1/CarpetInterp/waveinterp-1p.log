/home/runner/simulations/TestJob01_temp_1/output-0000/TEST/sim/CarpetInterp
Preparing:
+ set -e
+ cd output-0000-active
+ echo Checking:
Checking:
+ pwd
/home/runner/simulations/TestJob01_temp_1/output-0000/TEST/sim/CarpetInterp/output-0000-active
+ hostname
fv-az243-466
+ date
Sat Oct  8 05:19:12 UTC 2022
+ echo Environment:
Environment:
+ export CACTUS_NUM_PROCS=1
+ CACTUS_NUM_PROCS=1
+ export CACTUS_NUM_THREADS=2
+ CACTUS_NUM_THREADS=2
+ export GMON_OUT_PREFIX=gmon.out
+ GMON_OUT_PREFIX=gmon.out
+ export OMP_NUM_THREADS=2
+ OMP_NUM_THREADS=2
+ env
+ sort
+ echo Starting:
Starting:
++ date +%s
+ export CACTUS_STARTTIME=1665206352
+ CACTUS_STARTTIME=1665206352
+ '[' 1 = 1 ']'
+ '[' 0 -eq 0 ']'
+ /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim -L 3 /home/runner/simulations/TestJob01_temp_1/output-0000/arrangements/Carpet/CarpetInterp/test/waveinterp-1p.par
INFO (Cactus): Increased logging level from 0 to 3
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.12.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 
--------------------------------------------------------------------------------

Cactus version:    4.12.0
Compile date:      Oct 08 2022 (05:16:19)
Run date:          Oct 08 2022 (05:19:13+0000)
Run host:          fv-az243-466.eyhnzsvkqwvufobmc3lzdbadce.jx.internal.cloudapp.net (pid=99464)
Working directory: /home/runner/simulations/TestJob01_temp_1/output-0000/TEST/sim/CarpetInterp
Executable:        /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim
Parameter file:    /home/runner/simulations/TestJob01_temp_1/output-0000/arrangements/Carpet/CarpetInterp/test/waveinterp-1p.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->IOUtil InitBase LocalInterp AEILocalInterp LocalReduce Carpet CarpetLib CarpetInterp GSL LoopControl CarpetReduce CarpetSlab NaNChecker Boundary CartGrid3D CoordBase SymBase CarpetRegrid Time MoL WaveMoL IDWaveMoL InterpToArray CarpetIOBasic CarpetIOScalar CarpetIOASCII<---
Thorn Carpet requests automatic activation of MPI
Thorn Carpet requests automatic activation of Timers
Thorn CarpetLib requests automatic activation of Vectors
Thorn CarpetLib requests automatic activation of CycleClock
Thorn LoopControl requests automatic activation of hwloc
Thorn hwloc requests automatic activation of zlib
Activating thorn AEILocalInterp...Success -> active implementation AEILocalInterp
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetInterp...Success -> active implementation interp
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetIOBasic...Success -> active implementation IOBasic
Activating thorn CarpetIOScalar...Success -> active implementation IOScalar
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CarpetRegrid...Success -> active implementation CarpetRegrid
Activating thorn CarpetSlab...Success -> active implementation Hyperslab
Activating thorn CartGrid3D...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn CycleClock...Success -> active implementation CycleClock
Activating thorn GSL...Success -> active implementation GSL
Activating thorn hwloc...Success -> active implementation hwloc
Activating thorn IDWaveMoL...Success -> active implementation idwavemol
Activating thorn InitBase...Success -> active implementation InitBase
Activating thorn InterpToArray...Success -> active implementation InterpToArray
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LocalInterp...Success -> active implementation LocalInterp
Activating thorn LocalReduce...Success -> active implementation LocalReduce
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn MPI...Success -> active implementation MPI
Activating thorn NaNChecker...Success -> active implementation NaNChecker
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn Time...Success -> active implementation time
Activating thorn Timers...Success -> active implementation Timers
Activating thorn Vectors...Success -> active implementation Vectors
Activating thorn WaveMoL...Success -> active implementation wavemol
Activating thorn zlib...Success -> active implementation zlib
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CycleClock::CycleClock_Setup: Set up CycleClock
      LoopControl::LC_setup: Set up LoopControl
      Timers::Timer_Startup: Prepare hierarchical timers
      Carpet::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      CarpetInterp::CarpetInterpStartup: Startup routine
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      AEILocalInterp::AEILocalInterp_U_Startup: register CCTK_InterpLocalUniform() interpolation operators
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      LocalInterp::LocalInterp_Startup: register LocalInterp's interpolation operators
      LocalReduce::LocalReduce_Startup: Startup routine
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      MoL::MoL_Startup: Startup banner
      SymBase::SymBase_Startup: Register GH Extension for SymBase
      CarpetIOScalar::CarpetIOScalarStartup: [global] Startup routine
      Vectors::Vectors_Startup: Print startup message
      WaveMoL::WaveMoL_Startup: Register Banner
      GROUP hwloc_startup: hwloc startup group
        hwloc::hwloc_version: Output hwloc version

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        WaveMoL::WaveMoL_RegisterVars: [meta] Register variables for MoL
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::CartGrid3D_RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CarpetRegrid::CarpetRegridParamcheck: [global] Check Parameters
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      IDWaveMoL::IDWaveMoL_CheckParameters: Check parameters
      MoL::MoL_ParamCheck: Basic parameter checking
      Vectors::Vectors_Test: Run correctness tests.

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_BASEGRID]
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
        WaveMoL::WaveMoL_InitSymBound: [meta] Schedule symmetries
      [CCTK_INITIAL]
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        IDWaveMoL::IDWaveMoL_InitialData: Initial data for 3D wave equation
        MoL::MoL_StartLoop: [level] Initialise the step size control
      [CCTK_POSTINITIAL]
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          WaveMoL::WaveMoL_Boundaries: [level] Register boundary enforcement in MoL
          GROUP WaveMoL_ApplyBCs: Apply boundary conditions for WaveMoL
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          WaveMoL::WaveMoL_Energy: Calculate the energy
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        WaveMoL::WaveMoL_Energy: Calculate the energy
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          WaveMoL::WaveMoL_Boundaries: [level] Register boundary enforcement in MoL
          GROUP WaveMoL_ApplyBCs: Apply boundary conditions for WaveMoL
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          WaveMoL::WaveMoL_Energy: Calculate the energy
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
        WaveMoL::WaveMoL_InitSymBound: [meta] Schedule symmetries
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          WaveMoL::WaveMoL_Boundaries: [level] Register boundary enforcement in MoL
          GROUP WaveMoL_ApplyBCs: Apply boundary conditions for WaveMoL
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          WaveMoL::WaveMoL_Energy: Calculate the energy
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        InterpToArray::InterpToArray: [global] Interpolate to grid arrays
        LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        WaveMoL::WaveMoL_Boundaries: [level] Register boundary enforcement in MoL
        GROUP WaveMoL_ApplyBCs: Apply boundary conditions for WaveMoL
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        WaveMoL::WaveMoL_Energy: Calculate the energy
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      LoopControl::LC_steer: [meta] Update LoopControl algorithm preferences
      NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
            MoL::MoL_AllocateScratchSpace: [level] Allocate storage for scratch levels
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
          MoL::MoL_AllocateScratch: Allocate sufficient space for array scratch variables
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                WaveMoL::WaveMoL_CalcRHS: Register RHS calculation for MoL
              GROUP MoL_PostRHS: Modify RHS functions
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient Runge-Kutta 3 method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                WaveMoL::WaveMoL_Boundaries: [level] Register boundary enforcement in MoL
                GROUP WaveMoL_ApplyBCs: Apply boundary conditions for WaveMoL
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                WaveMoL::WaveMoL_Energy: Calculate the energy
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
          MoL::MoL_FreeScratchSpace: [level] Free storage for scratch levels
      end while
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        WaveMoL::WaveMoL_Boundaries: [level] Register boundary enforcement in MoL
        GROUP WaveMoL_ApplyBCs: Apply boundary conditions for WaveMoL
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        WaveMoL::WaveMoL_Energy: Calculate the energy
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    [CCTK_POSTSTEP]
      GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
      NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
    if (checkpoint)
      [CCTK_CHECKPOINT]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      InterpToArray::InterpToArray: [global] Interpolate to grid arrays
      LoopControl::LC_statistics_analysis: [meta] Output LoopControl statistics
    endif
    Output grid variables
    enddo

  Termination routines
    [CCTK_TERMINATE]
      LoopControl::LC_statistics_terminate: [meta] Output LoopControl statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays

  Shutdown routines
    [CCTK_SHUTDOWN]
      Timers::Timer_Shutdown: Prepare hierarchical timers

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        WaveMoL::WaveMoL_Boundaries: [level] Register boundary enforcement in MoL
        GROUP WaveMoL_ApplyBCs: Apply boundary conditions for WaveMoL
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        WaveMoL::WaveMoL_Energy: Calculate the energy
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   process 0: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
INFO (CarpetLib): Process startup time was 1.72 seconds
Current core file size limit: hard=[unlimited], soft=0 MB
Current addres space size limit: hard=[unlimited], soft=[unlimited]
Current data segment size limit: hard=[unlimited], soft=[unlimited]
Current resident set size limit: hard=[unlimited], soft=[unlimited]
INFO (CycleClock): Measuring CycleClock tick via OpenMP...
INFO (CycleClock): Calibrated CycleClock: 0.477301 ns per clock tick (2.09511 GHz)
INFO (Vectors): Using vector size 2 for architecture SSE2 (64-bit precision)
INFO (hwloc): library version 2.1.0, API version 0x20100
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------
AMR scalar I/O provided by CarpetIOScalar
--------------------------------------------------------------------------------
WaveMoL: Evolutions of a Scalar Field
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 1 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 2 threads, this is thread 0
INFO (Carpet): There are 2 threads in total
INFO (Carpet): There are 2 threads per process
INFO (Carpet): This process runs on host fv-az243-466, pid=99464
INFO (Carpet): This process runs on 2 cores: 0-1
INFO (Carpet): Thread 0 runs on 2 cores: 0-1
INFO (Carpet): Thread 1 runs on 2 cores: 0-1
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): Boundary specification for map 0:
   nboundaryzones: [[1,1,1],[1,1,1]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[0,0,0],[0,0,0]]
INFO (Carpet): CoordBase domain specification for map 0:
   physical extent: [-1,-1,-1] : [1,1,1]   ([2,2,2])
   interior extent: [-0.9,-0.9,-0.9] : [0.9,0.9,0.9]   ([1.8,1.8,1.8])
   exterior extent: [-1,-1,-1] : [1,1,1]   ([2,2,2])
   base_spacing   : [0.1,0.1,0.1]
INFO (Carpet): Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-1,-1,-1] : [1,1,1]   ([2,2,2])
   interior extent   : [-0.9,-0.9,-0.9] : [0.9,0.9,0.9]   ([1.8,1.8,1.8])
   exterior extent   : [-1,-1,-1] : [1,1,1]   ([2,2,2])
   spacing           : [0.1,0.1,0.1]
INFO (Carpet): Base grid specification for map 0:
   number of grid points             : [21,21,21]
   number of coarse grid ghost points: [[2,2,2],[2,2,2]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[0,0,0],[0,0,0]]
   [2]: [[0,0,0],[0,0,0]]
   [3]: [[0,0,0],[0,0,0]]
   [4]: [[0,0,0],[0,0,0]]
   [5]: [[0,0,0],[0,0,0]]
   [6]: [[0,0,0],[0,0,0]]
   [7]: [[0,0,0],[0,0,0]]
   [8]: [[0,0,0],[0,0,0]]
   [9]: [[0,0,0],[0,0,0]]
   [10]: [[0,0,0],[0,0,0]]
   [11]: [[0,0,0],[0,0,0]]
   [12]: [[0,0,0],[0,0,0]]
   [13]: [[0,0,0],[0,0,0]]
   [14]: [[0,0,0],[0,0,0]]
   [15]: [[0,0,0],[0,0,0]]
   [16]: [[0,0,0],[0,0,0]]
   [17]: [[0,0,0],[0,0,0]]
   [18]: [[0,0,0],[0,0,0]]
   [19]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[0,0,0],[0,0,0]]
   [2]: [[0,0,0],[0,0,0]]
   [3]: [[0,0,0],[0,0,0]]
   [4]: [[0,0,0],[0,0,0]]
   [5]: [[0,0,0],[0,0,0]]
   [6]: [[0,0,0],[0,0,0]]
   [7]: [[0,0,0],[0,0,0]]
   [8]: [[0,0,0],[0,0,0]]
   [9]: [[0,0,0],[0,0,0]]
   [10]: [[0,0,0],[0,0,0]]
   [11]: [[0,0,0],[0,0,0]]
   [12]: [[0,0,0],[0,0,0]]
   [13]: [[0,0,0],[0,0,0]]
   [14]: [[0,0,0],[0,0,0]]
   [15]: [[0,0,0],[0,0,0]]
   [16]: [[0,0,0],[0,0,0]]
   [17]: [[0,0,0],[0,0,0]]
   [18]: [[0,0,0],[0,0,0]]
   [19]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 230 grid functions in 17 groups
INFO (Carpet):    There are 67 grid scalars in 20 groups
INFO (Carpet):    There are 14 1-dimensional grid arrays in 6 groups
INFO (Carpet):    There are 1 2-dimensional grid arrays in 3 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 2 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 0D AMR output requested for:
   WAVEMOL::phi
   WAVEMOL::phit
   WAVEMOL::phix
   WAVEMOL::phiy
   WAVEMOL::phiz
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   INTERPTOARRAY::arrays1d[0]
   INTERPTOARRAY::arrays1d[1]
   INTERPTOARRAY::arrays1d[2]
   WAVEMOL::phi
   WAVEMOL::phit
   WAVEMOL::phix
   WAVEMOL::phiy
   WAVEMOL::phiz
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (CarpetIOScalar): Periodic scalar output requested for:
   WAVEMOL::phi
   WAVEMOL::phit
   WAVEMOL::phix
   WAVEMOL::phiy
   WAVEMOL::phiz
INFO (MoL): Using Runge-Kutta 3 as the time integrator.
INFO (MoL): MoL will not treat variable energy as a constrained variable as it has only one timelevel. This should not cause problems with the evolution.
INFO (MoL): The maximum number of evolved variables is 106. 5 are registered.
INFO (MoL): The maximum number of slow evolved variables is 106. 0 are registered.
INFO (MoL): The maximum number of constrained variables is 106. 0 are registered.
INFO (MoL): The maximum number of SandR variables is 106. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 106. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 106. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 106. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (Vectors): Testing vectorisation... [errors may result in segfaults]
INFO (Vectors): 375/375 tests passed 
INFO (Carpet): Grid structure (superregions, grid points):
   [0][0][0]   exterior: [0,0,0] : [20,20,20]   ([21,21,21] + PADDING) 9261
   [1][0][0]   exterior: [12,12,12] : [28,28,28]   ([17,17,17] + PADDING) 4913
   [2][0][0]   exterior: [32,32,32] : [48,48,48]   ([17,17,17] + PADDING) 4913
INFO (Carpet): Grid structure (superregions, coordinates):
   [0][0][0]   exterior: [-1,-1,-1] : [1,1,1] : [0.1,0.1,0.1]
   [1][0][0]   exterior: [-0.4,-0.4,-0.4] : [0.4,0.4,0.4] : [0.05,0.05,0.05]
   [2][0][0]   exterior: [-0.2,-0.2,-0.2] : [0.2,0.2,0.2] : [0.025,0.025,0.025]
INFO (Carpet): There are not enough time levels for the desired temporal prolongation order in the grid function group "WAVEMOL::SCALARRHSMOL_SCALAR".  With Carpet::prolongation_order_time=2, you need at least 3 time levels.
INFO (Carpet): There are not enough time levels for the desired temporal prolongation order in the grid function group "WAVEMOL::SCALARRHSMOL_VECTOR".  With Carpet::prolongation_order_time=2, you need at least 3 time levels.
INFO (Carpet): There are not enough time levels for the desired temporal prolongation order in the grid function group "WAVEMOL::ENERGY".  With Carpet::prolongation_order_time=2, you need at least 3 time levels.
INFO (Carpet): Global grid structure statistics:
INFO (Carpet): GF: rhs: 5k active, 5k owned (+0%), 9k total (+78%), 7 steps/time
INFO (Carpet): GF: vars: 27, pts: 0M active, 0M owned (+0%), 1M total (+67%), 1.0 comp/proc
INFO (Carpet): GA: vars: 74, pts: 0M active, 0M total (+0%)
INFO (Carpet): Total required memory: 0.006 GByte (for GAs and currently active GFs)
INFO (Carpet): Load balance:  min     avg     max     sdv     max/avg-1
INFO (Carpet): Level  0:       0M      0M      0M      0M owned      0%
INFO (Carpet): Level  1:       0M      0M      0M      0M owned      0%
INFO (Carpet): Level  2:       0M      0M      0M      0M owned      0%
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.0000000e-01  dy=>1.0000000e-01  dz=>1.0000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-1.000, 1.000]  y=>[-1.000, 1.000]  z=>[-1.000, 1.000]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,20]  y=>[0,20]  z=>[0,20]
INFO (Time): Timestep set to 0.025 (courant_static)
INFO (Time): Timestep set to 0.0125 (courant_static)
INFO (Time): Timestep set to 0.00625 (courant_static)
----------------------------------------------------------------
Iteration      Time | WAVEMOL::phi | *VEMOL::phit | *VEMOL::phix
                    |        norm2 |        norm2 |        norm2
----------------------------------------------------------------
        0     0.000 |    1.0000000 |    1.0000000 |    0.0000000
   131072     0.006 |    1.0062500 |    1.0000000 |    0.0000000
   262144     0.013 |    1.0125000 |    1.0000000 |    0.0000000
   393216     0.019 |    1.0187500 |    1.0000000 |    0.0000000
   524288     0.025 |    1.0250000 |    1.0000000 |    0.0000000
   655360     0.031 |    1.0312500 |    1.0000000 |    0.0000000
   786432     0.037 |    1.0375000 |    1.0000000 | 1.250927e-18
   917504     0.044 |    1.0437500 |    1.0000000 | 1.370459e-18
  1048576     0.050 |    1.0500000 |    1.0000000 | 6.254634e-19
  1179648     0.056 |    1.0562500 |    1.0000000 | 5.675257e-19
  1310720     0.062 |    1.0625000 |    1.0000000 | 6.254634e-19
  1441792     0.069 |    1.0687500 |    1.0000000 | 9.080412e-19
  1572864     0.075 |    1.0750000 |    1.0000000 | 3.593014e-18
  1703936     0.081 |    1.0812500 |    1.0000000 | 3.947235e-18
  1835008     0.088 |    1.0875000 |    1.0000000 | 3.926381e-18
  1966080     0.094 |    1.0937500 |    1.0000000 | 3.703365e-18
  2097152     0.100 |    1.1000000 |    1.0000000 | 1.876390e-18
INFO (Carpet): Terminating due to cctk_final_time at t = 0.100000
--------------------------------------------------------------------------------
Done.
+ echo Stopping:
Stopping:
+ date
Sat Oct  8 05:19:46 UTC 2022
+ echo Done.
Done.
  Elapsed time: 33.5 s
