/home/runner/simulations/TestJob01_temp_1/output-0000/TEST/sim/WaveMoL
Preparing:
+ set -e
+ cd output-0000-active
+ echo Checking:
Checking:
+ pwd
/home/runner/simulations/TestJob01_temp_1/output-0000/TEST/sim/WaveMoL/output-0000-active
+ hostname
fv-az801-431
+ date
Fri Nov 17 20:12:06 UTC 2023
+ echo Environment:
Environment:
+ export CACTUS_NUM_PROCS=1
+ CACTUS_NUM_PROCS=1
+ export CACTUS_NUM_THREADS=2
+ CACTUS_NUM_THREADS=2
+ export GMON_OUT_PREFIX=gmon.out
+ GMON_OUT_PREFIX=gmon.out
+ export OMP_NUM_THREADS=2
+ OMP_NUM_THREADS=2
+ env
+ sort
+ echo Starting:
Starting:
++ date +%s
+ export CACTUS_STARTTIME=1700251926
+ CACTUS_STARTTIME=1700251926
+ '[' 1 = 1 ']'
+ '[' 0 -eq 0 ']'
+ /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim -L 3 /home/runner/simulations/TestJob01_temp_1/output-0000/arrangements/CactusExamples/WaveMoL/test/gaussian.par
INFO (Cactus): Increased logging level from 0 to 3
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.14.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 
--------------------------------------------------------------------------------

Cactus version:    4.14.0
Compile date:      Nov 17 2023 (20:05:42)
Run date:          Nov 17 2023 (20:12:06+0000)
Run host:          fv-az801-431.jplelvhbra5e3n4vadtwxrmqqe.phxx.internal.cloudapp.net (pid=133781)
Working directory: /home/runner/simulations/TestJob01_temp_1/output-0000/TEST/sim/WaveMoL
Executable:        /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim
Parameter file:    /home/runner/simulations/TestJob01_temp_1/output-0000/arrangements/CactusExamples/WaveMoL/test/gaussian.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->CoordBase SymBase NaNChecker PUGHReduce CartGrid3D PUGH Boundary IOBasic IOUtil IOASCII IDWaveMoL PUGHSlab WaveMoL Time MoL LocalReduce<---
Thorn PUGH requests automatic activation of MPI
Thorn PUGH requests automatic activation of Vectors
Thorn MPI requests automatic activation of hwloc
Thorn hwloc requests automatic activation of zlib
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn CartGrid3D...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn hwloc...Success -> active implementation hwloc
Activating thorn IDWaveMoL...Success -> active implementation idwavemol
Activating thorn IOASCII...Success -> active implementation IOASCII
Activating thorn IOBasic...Success -> active implementation IOBasic
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LocalReduce...Success -> active implementation LocalReduce
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn MPI...Success -> active implementation MPI
Activating thorn NaNChecker...Success -> active implementation NaNChecker
Activating thorn PUGH...Success -> active implementation Driver
Activating thorn PUGHReduce...Success -> active implementation Reduce
Activating thorn PUGHSlab...Success -> active implementation Hyperslab
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn Time...Success -> active implementation time
Activating thorn Vectors...Success -> active implementation Vectors
Activating thorn WaveMoL...Success -> active implementation wavemol
Activating thorn zlib...Success -> active implementation zlib
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      PUGH::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      IOASCII::IOASCII_Startup: Startup routine
      LocalReduce::LocalReduce_Startup: Startup routine
      MoL::MoL_Startup: Startup banner
      IOBasic::IOBasic_Startup: Startup routine
      PUGH::PUGH_RegisterPUGHP2LRoutines: Register Physical to Logical process mapping routines
      PUGH::PUGH_RegisterPUGHTopologyRoutines: Register topology generation routines routines
      PUGHReduce::PUGHReduce_Startup: Startup routine
      SymBase::SymBase_Startup: Register GH Extension for SymBase
      Vectors::Vectors_Startup: Print startup message
      WaveMoL::WaveMoL_Startup: Register Banner
      GROUP hwloc_startup: hwloc startup group
        hwloc::hwloc_version: Output hwloc version

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        WaveMoL::WaveMoL_RegisterVars: [meta] Register variables for MoL
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::CartGrid3D_RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
      Boundary::Boundary_Check: Check dimension of grid variables
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      IDWaveMoL::IDWaveMoL_CheckParameters: Check parameters
      MoL::MoL_ParamCheck: Basic parameter checking
      Vectors::Vectors_Test: Run correctness tests.

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_BASEGRID]
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        IOASCII::IOASCII_Choose1D: Choose 1D output lines
        IOASCII::IOASCII_Choose2D: Choose 2D output planes
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        PUGH::PUGH_Report: Report on PUGH set up
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
        WaveMoL::WaveMoL_InitSymBound: [meta] Schedule symmetries
      [CCTK_INITIAL]
        IDWaveMoL::IDWaveMoL_InitialData: Initial data for 3D wave equation
        IOBasic::IOBasic_Init: Initialisation routine
        MoL::MoL_StartLoop: [level] Initialise the step size control
      [CCTK_POSTINITIAL]
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        WaveMoL::WaveMoL_Energy: Calculate the energy
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        IOASCII::IOASCII_Choose1D: Choose 1D output lines
        IOASCII::IOASCII_Choose2D: Choose 2D output planes
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        PUGH::PUGH_Report: Report on PUGH set up
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
        WaveMoL::WaveMoL_InitSymBound: [meta] Schedule symmetries
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          WaveMoL::WaveMoL_Boundaries: [level] Register boundary enforcement in MoL
          GROUP WaveMoL_ApplyBCs: Apply boundary conditions for WaveMoL
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          WaveMoL::WaveMoL_Energy: Calculate the energy
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        WaveMoL::WaveMoL_Boundaries: [level] Register boundary enforcement in MoL
        GROUP WaveMoL_ApplyBCs: Apply boundary conditions for WaveMoL
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        WaveMoL::WaveMoL_Energy: Calculate the energy
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
            MoL::MoL_AllocateScratchSpace: [level] Allocate storage for scratch levels
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
          MoL::MoL_AllocateScratch: Allocate sufficient space for array scratch variables
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                WaveMoL::WaveMoL_CalcRHS: Register RHS calculation for MoL
              GROUP MoL_PostRHS: Modify RHS functions
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient ICN method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                WaveMoL::WaveMoL_Boundaries: [level] Register boundary enforcement in MoL
                GROUP WaveMoL_ApplyBCs: Apply boundary conditions for WaveMoL
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                WaveMoL::WaveMoL_Energy: Calculate the energy
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
          MoL::MoL_FreeScratchSpace: [level] Free storage for scratch levels
      end while
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        WaveMoL::WaveMoL_Boundaries: [level] Register boundary enforcement in MoL
        GROUP WaveMoL_ApplyBCs: Apply boundary conditions for WaveMoL
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        WaveMoL::WaveMoL_Energy: Calculate the energy
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    [CCTK_POSTSTEP]
      GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
      NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
    if (checkpoint)
      [CCTK_CHECKPOINT]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
    endif
    Output grid variables
    enddo

  Termination routines
    [CCTK_TERMINATE]
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays
      PUGH::Driver_Terminate: Termination routine

  Shutdown routines
    [CCTK_SHUTDOWN]

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        WaveMoL::WaveMoL_Boundaries: [level] Register boundary enforcement in MoL
        GROUP WaveMoL_ApplyBCs: Apply boundary conditions for WaveMoL
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        WaveMoL::WaveMoL_Energy: Calccactus_sim: /home/runner/work/tests/tests/master/configs/sim/build/Cactus/main/RDWR.cc:332: int cctki_RDWR::CCTK_HasAccess(const cGH*, int): Assertion `current_function->RDWR' failed.
[fv-az801-431:133781] *** Process received signal ***
[fv-az801-431:133781] Signal: Aborted (6)
[fv-az801-431:133781] Signal code:  (-6)
[fv-az801-431:133781] [ 0] /lib/x86_64-linux-gnu/libc.so.6(+0x42520)[0x7f96d9a42520]
[fv-az801-431:133781] [ 1] /lib/x86_64-linux-gnu/libc.so.6(pthread_kill+0x12c)[0x7f96d9a969fc]
[fv-az801-431:133781] [ 2] /lib/x86_64-linux-gnu/libc.so.6(raise+0x16)[0x7f96d9a42476]
[fv-az801-431:133781] [ 3] /lib/x86_64-linux-gnu/libc.so.6(abort+0xd3)[0x7f96d9a287f3]
[fv-az801-431:133781] [ 4] /lib/x86_64-linux-gnu/libc.so.6(+0x2871b)[0x7f96d9a2871b]
[fv-az801-431:133781] [ 5] /lib/x86_64-linux-gnu/libc.so.6(+0x39e96)[0x7f96d9a39e96]
[fv-az801-431:133781] [ 6] /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim(CCTK_HasAccess+0x1f4)[0x564d96dffac4]
[fv-az801-431:133781] [ 7] /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim(CCTKi_VarDataPtrI+0x28)[0x564d96df94c8]
[fv-az801-431:133781] [ 8] /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim(MoL_SetupIndexArrays+0x30)[0x564d96768810]
[fv-az801-431:133781] [ 9] /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim(CCTK_CallFunction+0xd6)[0x564d96e008d6]
[fv-az801-431:133781] [10] /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim(+0x2b58f84)[0x564d96e00f84]
[fv-az801-431:133781] [11] /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim(+0x2b5fae9)[0x564d96e07ae9]
[fv-az801-431:133781] [12] /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim(CCTKi_DoScheduleTraverse+0x84)[0x564d96e07d94]
[fv-az801-431:133781] [13] /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim(+0x2b58cd1)[0x564d96e00cd1]
[fv-az801-431:133781] [14] /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim(CCTK_ScheduleTraverse+0xee)[0x564d96e01b0e]
[fv-az801-431:133781] [15] /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim(CCTKi_ScheduleTraverseGHExtensions+0x3c)[0x564d96df597c]
[fv-az801-431:133781] [16] /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim(CactusDefaultInitialise+0xa1)[0x564d96df0ec1]
[fv-az801-431:133781] [17] /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim(main+0x49)[0x564d94aaca89]
[fv-az801-431:133781] [18] /lib/x86_64-linux-gnu/libc.so.6(+0x29d90)[0x7f96d9a29d90]
[fv-az801-431:133781] [19] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0x80)[0x7f96d9a29e40]
[fv-az801-431:133781] [20] /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim(_start+0x25)[0x564d94b17ed5]
[fv-az801-431:133781] *** End of error message ***
/home/runner/simulations/TestJob01_temp_1/output-0000/SIMFACTORY/RunScript: line 36: 133781 Aborted                 (core dumped) /home/runner/simulations/TestJob01_temp_1/SIMFACTORY/exe/cactus_sim -L 3 ${TESTSUITE_PARFILE}
  Elapsed time: 0.8 s
