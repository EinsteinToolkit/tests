#!/bin/bash

set -x 
set -e
set -u
export JOB_NAME="TestJob01" 

ARGUMENT_LIST=(
  "testmode"
)
# Read arguments using getopt (allows for long option, whereas getopts does not)
opts=$(getopt \
  --longoptions "$(printf "%s:," "${ARGUMENT_LIST[@]}")" \
  --name "$(basename "$0")" \
  --options "" \
  -- "$@"
)

eval set --$opts

while [[ $# -gt 0 ]]; do
  case "$1" in
    --testmode)
      test_arg=$2
      shift 2
      ;;

    *)
      break
      ;;
  esac
done


. cactus/sim-functions.sh

# Run jobs in the foreground.  If this will in future also work on
# clusters, then we should adjust this
SIMFACTORY_FOREGROUND=1

machine=$(current_machine)
simdir=$(mdbentry $machine basedir)

# if [ "${machine}" = "build" ]; then
#     simdir=$WORKSPACE/../simulations
# else
#     simdir=$(simfactory/bin/sim print-mdb-entry $machine |grep '^[ \t]*basedir[ \t]*=[ \t]\(.*\)[\t ]*$'|awk '{print $3}'|sed "s/@USER@/$USER/")
# fi

cd $MASTER

if [ $test_arg = all -o $# = 0 ]; then
    tests=""
else
    tests="--select-tests $test_arg"
fi

if [ -z ${GIT_COMMIT+x} ]; then
    GIT_COMMIT=temp
fi

for nprocs in 1 2; do
    simname=${JOB_NAME}_${GIT_COMMIT}_${nprocs}
rm -rf $simdir/$simname

    cores=$(mdbentry $machine ppn)

    common_args="--testsuite $tests --procs $cores --num-threads $((cores/nprocs)) $simname"
    # Ideally, this condition would come from whether there was a
    # submit command defined, but simfactory thinks that all machines
    # have submit commands
    if [ "${SIMFACTORY_FOREGROUND}" = "1" ]; then
        simfactory/bin/sim create-run $common_args
    else
        simfactory/bin/sim create-submit --walltime 1:00:00 $common_args
    fi
done

for nprocs in 1 2; do
    simname=${JOB_NAME}_${GIT_COMMIT}_${nprocs}

    if [ "${SIMFACTORY_FOREGROUND}" -ne "1" ]; then
        echo "Waiting for ${simname}" >&2
        while true; do
            output=$(simfactory/bin/sim list-simulations ${simname})
            case ${output?} in
                *QUEUED*|*RUNNING*)
                    echo "Waiting for ${simname}" >&2
                    sleep 10
                    ;;
                *FINISHED*|*INACTIVE*)
                    echo "${simname} has finished" >&2
                    break
                    ;;
                *)
                    log "Unrecognised output from sim list-simulations: ${output?}"
                    exit 1
                    break
            esac
        done
    fi

    testdir=$simdir/$simname/output-0000/TEST
    
    if [ ! -r $testdir/sim/summary.log ]; then
        echo "No such file $testdir/sim/summary.log; aborting">&2
        cat $simdir/$simname/output-0000/${simname}.out
        cat $simdir/$simname/output-0000/${simname}.err
        exit 1
    fi

    cores=$(mdbentry $machine ppn)
    threads=$((cores/nprocs))
    cp $testdir/sim/summary.log build__${nprocs}_${threads}.log

    # check for a failure in tests
    if [ -n "$GITHUB_ENV" ] ; then
        if ! [ -r $testdir/sim/summary.log ] || \
           grep -q 'Number failed *-> [^0]' $testdir/sim/summary.log ; then
            echo "TESTS_FAILED=True" >> $GITHUB_ENV
        fi
    fi
done

# Enter $GTIHUB_WORKSPACE/scripts to run store.py
# TODO: remove this assumption about relative location of repos
cd $WORKSPACE
python3 store.py --master $PWD/../master --ghpages $PWD/../gh-pages --dir1 $HOME/simulations/TestJob01_temp_1/output-0000/TEST/sim --dir2 $HOME/simulations/TestJob01_temp_2/output-0000/TEST/sim || true
